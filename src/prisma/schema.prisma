// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Language {
  code String @id @unique
  name String
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                      String   @id @default(cuid())
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                String   @unique
  allowPublicSignup       Boolean  @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
}

model User {
  id                      String    @id @default(cuid())
  tenant                  Tenant    @relation(fields: [tenantId], references: [id])
  tenantId                String
  email                   String    @unique
  name                    String
  password                String
  role                    String
  status                  String?   @default("active")
  lastLogin               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  sessionId               String?   @unique

  dateOfBirth             String?
  gender                  String?
  mobileNumber            String?
  currentAddress          String?
  graduationYear          String?
  degreeProgram           String?
  department              String?
  currentJobTitle         String?
  currentOrganization     String?
  industry                String?
  workLocation            String?
  linkedInProfile         String?
  yearsOfExperience       String?
  skills                  String[]
  areasOfSupport          String[]
  timeCommitment          String?
  preferredEngagementMode String?
  otherComments           String?
  lookingForSupportType   String?
  helpNeededDescription   String?
  shareProfileConsent     Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl       String?
  resumeText              String?
  careerInterests         String?
  bio                     String?
  interests               String[]
  userApiKey              String?
  offersHelpWith          String[]
  appointmentCoinCost     Int?
  xpPoints                Int?
  dailyStreak             Int?
  longestStreak           Int?
  totalActiveDays         Int?
  weeklyActivity          Int[]
  referralCode            String?   @unique
  earnedBadges            String[]
  affiliateCode           String?   @unique
  interviewCredits        Int?
  isDistinguished         Boolean?
  challengeTopics         String[]
  challengeProgress       Json?
  completedChallengeIds   String[]
  streakFreezes           Int?
  dashboardWidgets        Json?
  
  // New fields from latest updates
  completedFlipTaskIds    String[]
  currentFlipChallenge    Json?
  flipChallengeAssignedAt DateTime?
  flipChallengeProgressStart Json?

  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  appointmentsAsRequester Appointment[] @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[] @relation("AlumniAppointments")
  referralHistory         ReferralHistory[]
  affiliateProfile        Affiliate?
  notifications           Notification[]
  activities              Activity[]

  createdGalleryEvents    GalleryEvent[]
  attendedGalleryEvents   GalleryEvent[] @relation("Attendees")
  
  nominationsMade         Nomination[] @relation("Nominator")
  nominationsReceived     Nomination[] @relation("Nominee")
  votesCast               Vote[]       @relation("Voter")
  awardsWon               Award[]      @relation("Winner")
  
  promoCodeRedemptions    UserPromoCodeRedemption[]
}

model JobApplication {
  id                  String   @id @default(cuid())
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  tenantId            String
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  companyName         String
  jobTitle            String
  status              String
  dateApplied         DateTime
  notes               String[]
  jobDescription      String?
  location            String?
  salary              String?
  reminderDate        DateTime?
  sourceJobOpeningId  String?
  applicationUrl      String?
  resumeIdUsed        String?
  coverLetterText     String?
  interviews          Interview[]
}

model Interview {
    id                  String          @id @default(cuid())
    jobApplication      JobApplication  @relation(fields: [jobApplicationId], references: [id])
    jobApplicationId    String
    date                DateTime
    type                String
    interviewer         String
    interviewerEmail    String?
    interviewerMobile   String?
    notes               String[]
}

model ResumeProfile {
    id              String      @id @default(cuid())
    tenant          Tenant      @relation(fields: [tenantId], references: [id])
    tenantId        String
    user            User        @relation(fields: [userId], references: [id])
    userId          String
    name            String
    resumeText      String
    lastAnalyzed    DateTime?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    deletedAt       DateTime?
}

model ResumeScanHistory {
    id                  String      @id @default(cuid())
    tenant              Tenant      @relation(fields: [tenantId], references: [id])
    tenantId            String
    user                User        @relation(fields: [userId], references: [id])
    userId              String
    resumeId            String
    resumeName          String
    jobTitle            String
    companyName         String
    resumeTextSnapshot  String
    jobDescriptionText  String
    scanDate            DateTime    @default(now())
    matchScore          Int?
    bookmarked          Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  tenantId        String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  requesterUserId String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
}


model Activity {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  timestamp   DateTime @default(now())
  description String
}

model CommunityPost {
    id                  String      @id @default(cuid())
    tenant              Tenant      @relation(fields: [tenantId], references: [id])
    tenantId            String
    user                User        @relation(fields: [userId], references: [id])
    userId              String
    userName            String
    userAvatar          String?
    timestamp           DateTime    @default(now())
    content             String?
    type                String
    tags                String[]
    imageUrl            String?
    pollOptions         Json?
    eventTitle          String?
    eventDate           DateTime?
    eventLocation       String?
    attendees           Int?
    capacity            Int?
    assignedTo          String?
    status              String?
    moderationStatus    String
    flagCount           Int
    flagReasons         String[]
    comments            CommunityComment[]
    bookmarkedBy        String[]
    votedBy             String[]
    registeredBy        String[]
    flaggedBy           String[]
    likes               Int?
    likedBy             String[]
    isPinned            Boolean     @default(false)
}

model CommunityComment {
    id          String      @id @default(cuid())
    post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      String?
    blogPost    BlogPost?   @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
    blogPostId  String?
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    userName    String
    userAvatar  String?
    timestamp   DateTime    @default(now())
    comment     String
    parentId    String?
    parent      CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies     CommunityComment[] @relation("CommentReplies")
}

model FeatureRequest {
    id          String      @id @default(cuid())
    tenant      Tenant      @relation(fields: [tenantId], references: [id])
    tenantId    String
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    userName    String
    userAvatar  String?
    timestamp   DateTime    @default(now())
    title       String
    description String
    status      String
    upvotes     Int?
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean?  @default(true)
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  attendees       User[]    @relation("Attendees")
  deletedAt       DateTime?
}

model JobOpening {
    id              String      @id @default(cuid())
    tenant          Tenant      @relation(fields: [tenantId], references: [id])
    tenantId        String
    title           String
    company         String
    location        String
    description     String
    datePosted      DateTime
    type            String
    postedByAlumni  User        @relation(fields: [postedByAlumniId], references: [id])
    postedByAlumniId String
    alumniName      String
    applicationLink String?
}


model Badge {
    id                  String  @id @default(cuid())
    name                String
    description         String
    icon                String
    xpReward            Int?
    triggerCondition    String?
    streakFreezeReward  Int?
}

model DailyChallenge {
    id          String @id @default(cuid())
    type        String // 'standard' or 'flip'
    date        DateTime?
    title       String
    description String
    difficulty  String?
    category    String?
    solution    String?
    xpReward    Int?
    tasks       Json?
    createdAt   DateTime @default(now())
}

model GamificationRule {
    actionId    String  @id @unique
    description String
    xpPoints    Int
}

model MockInterviewSession {
    id                  String      @id @default(cuid())
    user                User        @relation(fields: [userId], references: [id])
    userId              String
    topic               String
    description         String?
    jobDescription      String?
    questions           Json?
    answers             Json[]
    overallFeedback     Json?
    overallScore        Int?
    status              String
    createdAt           DateTime    @default(now())
    timerPerQuestion    Int?
    difficulty          String?
    questionCategories  String[]
    recordingReferences Json[]
}

model PlatformSettings {
    id                              String      @id @default(cuid())
    platformName                    String
    maintenanceMode                 Boolean
    communityFeedEnabled            Boolean
    autoModeratePosts               Boolean
    jobBoardEnabled                 Boolean
    maxJobPostingDays               Int
    gamificationEnabled             Boolean
    xpForLogin                      Int
    xpForNewPost                    Int
    resumeAnalyzerEnabled           Boolean
    aiResumeWriterEnabled           Boolean
    coverLetterGeneratorEnabled     Boolean
    mockInterviewEnabled            Boolean
    aiMockInterviewCost             Int         @default(25)
    referralsEnabled                Boolean
    affiliateProgramEnabled         Boolean
    alumniConnectEnabled            Boolean
    defaultAppointmentCost          Int
    featureRequestsEnabled          Boolean
    allowTenantCustomBranding       Boolean
    allowTenantEmailCustomization   Boolean
    allowUserApiKey                 Boolean?
    defaultProfileVisibility        String
    maxResumeUploadsPerUser         Int
    defaultTheme                    String
    enablePublicProfilePages        Boolean
    sessionTimeoutMinutes           Int
    maxEventRegistrationsPerUser    Int?
    globalAnnouncement              String?
    pointsForAffiliateSignup        Int?
    walletEnabled                   Boolean?
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
  deletedAt      DateTime?
}

model PromotionalContent {
    id              String @id @default(cuid())
    isActive        Boolean
    title           String
    description     String
    imageUrl        String
    imageAlt        String
    imageHint       String?
    buttonText      String
    buttonLink      String
    gradientFrom    String?
    gradientTo      String?
    gradientVia     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ReferralHistory {
    id                  String @id @default(cuid())
    referrerUser        User @relation(fields: [referrerUserId], references: [id])
    referrerUserId      String
    referredEmailOrName String
    referredUserId      String?
    referralDate        DateTime @default(now())
    status              String
    rewardAmount        Int?
}


model Survey {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  steps         Json
  createdAt     DateTime  @default(now())
  tenantId      String?
}

model SurveyResponse {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyId     String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
}

model Wallet {
    id              String      @id @default(cuid())
    user            User        @relation(fields: [userId], references: [id])
    userId          String      @unique
    coins           Int
    flashCoins      Json?
    transactions    WalletTransaction[]
}

model WalletTransaction {
    id          String @id @default(cuid())
    wallet      Wallet @relation(fields: [walletId], references: [id])
    walletId    String
    date        DateTime @default(now())
    description String
    amount      Int
    type        String // 'credit' or 'debit'
    currency    String // 'coins' or 'xp'
}


model BlogPost {
  id            String    @id @default(cuid())
  tenantId      String
  userId        String
  userName      String
  userAvatar    String
  title         String
  slug          String    @unique
  author        String
  date          DateTime
  imageUrl      String
  dataAiHint    String?
  content       String
  excerpt       String
  tags          String[]
  comments      CommunityComment[]
  bookmarkedBy  String[]
}


model BlogGenerationSettings {
  id                      String      @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}


model InterviewQuestion {
    id                  String      @id @default(cuid())
    category            String
    questionText        String
    isMCQ               Boolean?
    mcqOptions          Json?
    correctAnswer       String?
    answerOrTip         String
    tags                String[]
    difficulty          String?
    rating              Float?
    ratingsCount        Int?
    userRatings         Json?
    userComments        Json?
    createdBy           String?
    approved            Boolean?
    createdAt           DateTime?   @default(now())
    bookmarkedBy        String[]
    baseScore           Int?
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model PromoCode {
  id          String      @id @default(cuid())
  tenantId    String?
  code        String      @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int         @default(0)
  isActive    Boolean
  createdAt   DateTime    @default(now())
  redemptions UserPromoCodeRedemption[]
  deletedAt   DateTime?
}

model UserPromoCodeRedemption {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  promoCode   PromoCode   @relation(fields: [promoCodeId], references: [id])
  promoCodeId String
  redeemedAt  DateTime    @default(now())
  
  @@unique([userId, promoCodeId])
}

model ResumeTemplate {
    id              String @id @default(cuid())
    name            String
    description     String
    previewImageUrl String
    category        String
    dataAiHint      String?
    content         String
    headerColor     String?
    bodyColor       String?
    headerFontSize  String?
    textAlign       String?
    layout          String?
    deletedAt       DateTime?
}

model CommissionTier {
  id                    String      @id @default(cuid())
  name                  String      @unique
  milestoneRequirement  Int         // e.g., number of signups needed
  commissionRate        Float       // e.g., 0.15 for 15%
  affiliates            Affiliate[]
}

model Affiliate {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
  name              String
  email             String
  status            String
  affiliateCode     String      @unique
  commissionRate    Float
  totalEarned       Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  clicks            AffiliateClick[]
  signups           AffiliateSignup[]
  commissionTier    CommissionTier @relation(fields: [commissionTierId], references: [id])
  commissionTierId  String
}

model AffiliateClick {
  id                 String    @id @default(cuid())
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId        String
  timestamp          DateTime  @default(now())
  ipAddress          String?
  convertedToSignup  Boolean   @default(false)
}

model AffiliateSignup {
  id                  String    @id @default(cuid())
  affiliate           Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId         String
  newUserId           String    @unique
  signupDate          DateTime  @default(now())
  commissionEarned    Float?
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String      @id @default(cuid())
  title               String
  description         String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  categoryId          String
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String
  winnerId            String?
  winner              User?       @relation("Winner", fields: [winnerId], references: [id])
  nominations         Nomination[]
}

model Nomination {
  id            String    @id @default(cuid())
  award         Award     @relation(fields: [awardId], references: [id])
  awardId       String
  nominee       User      @relation("Nominee", fields: [nomineeId], references: [id])
  nomineeId     String
  nominator     User      @relation("Nominator", fields: [nominatorId], references: [id])
  nominatorId   String
  justification String
  createdAt     DateTime  @default(now())
  votes         Vote[]
}

model Vote {
  id            String      @id @default(cuid())
  nomination    Nomination  @relation(fields: [nominationId], references: [id])
  nominationId  String
  voter         User        @relation("Voter", fields: [voterId], references: [id])
  voterId       String
  createdAt     DateTime    @default(now())
  @@unique([nominationId, voterId])
}


model ProductCompany {
  id            String    @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model EmailTemplate {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  type      String   // e.g., 'WELCOME', 'APPOINTMENT_CONFIRMATION', 'PASSWORD_RESET'
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([tenantId, type])
}
