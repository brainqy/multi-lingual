// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String    @id @default(cuid())
  tenantId                    String
  name                        String
  email                       String    @unique
  password                    String?
  role                        String // "user", "manager", "admin"
  status                      String    @default("active") // "active", "inactive", "pending", "suspended"
  lastLogin                   DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  dateOfBirth                 String?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  company                     String?
  currentOrganization         String?
  currentJobTitle             String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  skills                      String[]
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  interests                   String[]
  offersHelpWith              String[]
  careerInterests             String?
  userApiKey                  String?
  challengeTopics             String[]
  challengeProgress           Json?
  bio                         String?
  profilePictureUrl           String?
  referralCode                String?   @unique
  shortBio                    String?
  university                  String?
  xpPoints                    Int?
  dailyStreak                 Int?
  longestStreak               Int?
  totalActiveDays             Int?
  weeklyActivity              Boolean[]
  earnedBadges                String[]
  interviewCredits            Int?
  isDistinguished             Boolean?
  resumeText                  String?
  sessionId                   String?   @unique

  tenant                      Tenant                    @relation(fields: [tenantId], references: [id])
  affiliateProfile            Affiliate?
  referralHistory             ReferralHistoryItem[]
  wallet                      Wallet?
  appointmentsAsRequester     Appointment[]             @relation("Requester")
  appointmentsAsAlumni        Appointment[]             @relation("Alumni")
  jobApplications             JobApplication[]
  resumeProfiles              ResumeProfile[]
  resumeScanHistory           ResumeScanHistoryItem[]
  featureRequests             FeatureRequest[]
  communityPosts              CommunityPost[]
  comments                    CommunityComment[]
  createdAnnouncements        Announcement[]
  activities                  Activity[]
  createdInterviewQuestions   InterviewQuestion[]
  affiliateSignups            AffiliateSignup[]         @relation("ReferringUser")
  referredBySignup            AffiliateSignup?          @relation("NewUserSignup")

  @@index([tenantId])
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                    String    @id @default(cuid())
  tenantId              String    @unique
  allowPublicSignup     Boolean   @default(true)
  customLogoUrl         String?
  primaryColor          String?
  accentColor           String?
  features              Json?
  emailTemplates        Json?
  tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model Translation {
  id             String        @id @default(cuid())
  key            String
  text           String
  languageCode   String
  qualityScore   Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  suggestions    Translation[] @relation("SuggestionToTranslation")
  suggestionFor  Translation?  @relation("SuggestionToTranslation", fields: [suggestionForId], references: [id])
  suggestionForId String?

  @@unique([key, languageCode])
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String   // e.g., 'Full-time', 'Part-time'
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  user               User        @relation(fields: [userId], references: [id])
  interviews         Interview[]
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
  application      JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
  user               User     @relation(fields: [userId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id                 String             @id @default(cuid())
  tenantId           String
  userId             String
  userName           String
  userAvatar         String?
  timestamp          DateTime           @default(now())
  content            String?
  type               String
  tags               String[]
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          String?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  assignedTo         String?
  status             String?
  moderationStatus   String
  flagCount          Int
  bookmarkedBy       String[]
  user               User               @relation(fields: [userId], references: [id])
  comments           CommunityComment[]
}

model CommunityComment {
  id        String         @id @default(cuid())
  postId    String
  userId    String
  userName  String
  userAvatar String?
  timestamp DateTime       @default(now())
  comment   String
  parentId  String?
  post      CommunityPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id])
  parent    CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   CommunityComment[] @relation("CommentReplies")
}

model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  tenantId       String?
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  timestamp   DateTime @default(now())
  description String
  user        User     @relation(fields: [userId], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  user         User                @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
  requesterUser   User     @relation("Requester", fields: [requesterUserId], references: [id])
  alumniUser      User     @relation("Alumni", fields: [alumniUserId], references: [id])
}

model InterviewQuestion {
  id            String    @id @default(cuid())
  category      String
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    String?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  approved      Boolean?
  createdAt     DateTime  @default(now())
  bookmarkedBy  String[]
  baseScore     Int?
}

model MockInterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  topic              String
  jobDescription     String?
  questions          Json
  answers            Json
  overallFeedback    Json?
  overallScore       Int?
  status             String
  createdAt          DateTime @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model DailyChallenge {
  id          String  @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String  @unique
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  steps       Json
  createdAt   DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[] @relation("ReferringUser")
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation("ReferringUser", fields: [affiliateId], references: [id])
  newUserId        String    @unique
  newUser          User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model ReferralHistoryItem {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              ReferralStatus
  rewardAmount        Int?
  referrerUser        User     @relation(fields: [referrerUserId], references: [id])
}
