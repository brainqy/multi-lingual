// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String @id @unique
  name String
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?   @unique
  createdAt DateTime  @default(now())
  settings  TenantSettings?
  users     User[]
  jobOpenings JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  appointments Appointment[]
  announcements Announcement[]
  promoCodes PromoCode[]
  galleryEvents GalleryEvent[]
  communityPosts CommunityPost[]
  featureRequests FeatureRequest[]
  activities Activity[]
  surveys Survey[]
  emailTemplates EmailTemplate[]
}

model TenantSettings {
  id                String  @id @default(cuid())
  tenant            Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String  @unique
  allowPublicSignup Boolean @default(true)
  customLogoUrl     String?
  primaryColor      String?
  accentColor       String?
  features          Json? // for storing feature flags like { "communityFeedEnabled": true }
}

model User {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email              String   @unique
  name               String
  password           String?
  role               String   @default("user") // 'user', 'manager', 'admin'
  status             String   @default("active") // 'active', 'inactive', 'pending', 'suspended'
  lastLogin          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  sessionId          String?

  // Profile Fields
  dateOfBirth        String?
  gender             String?
  mobileNumber       String?
  currentAddress     String?
  graduationYear     String?
  degreeProgram      String?
  department         String?
  university         String?
  currentJobTitle    String?
  currentOrganization String?
  industry           String?
  workLocation       String?
  linkedInProfile    String?
  yearsOfExperience  String?
  skills             String[]
  careerInterests    String?
  bio                String?
  interests          String[]
  profilePictureUrl  String?
  resumeText         String?
  userApiKey         String?

  // Engagement Fields
  areasOfSupport           String[]
  timeCommitment           String?
  preferredEngagementMode  String?
  lookingForSupportType    String?
  helpNeededDescription    String?
  shareProfileConsent      Boolean?
  featureInSpotlightConsent Boolean?
  offersHelpWith           String[]
  appointmentCoinCost      Int?

  // Gamification
  xpPoints                 Int?     @default(0)
  dailyStreak              Int?     @default(0)
  longestStreak            Int?     @default(0)
  weeklyActivity           Int[]
  referralCode             String?  @unique
  earnedBadges             String[]
  interviewCredits         Int?     @default(5)
  isDistinguished          Boolean? @default(false)
  streakFreezes            Int?     @default(0)
  challengeTopics          String[]
  completedChallengeIds    String[]
  completedFlipTaskIds     String[]
  currentFlipChallenge     Json?
  flipChallengeAssignedAt  DateTime?
  flipChallengeProgressStart Json?

  // Notifications
  emailNotificationsEnabled     Boolean?
  appNotificationsEnabled       Boolean?
  gamificationNotificationsEnabled Boolean?
  referralNotificationsEnabled  Boolean?

  // Customization
  dashboardWidgets Json? // Store user's widget preferences, e.g., { "user": ["card1", "card2"] }

  // Relations
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  appointmentsAsRequester Appointment[]      @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[]      @relation("AlumniAppointments")
  createdGalleryEvents    GalleryEvent[]
  attendedGalleryEvents   GalleryEvent[]     @relation("EventAttendees")
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  featureRequests         FeatureRequest[]
  activities              Activity[]
  notifications           Notification[]
  mockInterviewSessions   MockInterviewSession[]
  wallet                  Wallet?
  referralHistory         ReferralHistory[]
  affiliateProfile        Affiliate?
  nominationsMade         Nomination[] @relation("Nominator")
  nominationsReceived     Nomination[] @relation("Nominee")
  votesCast               Vote[]
  awardWins               Award[]

  promoCodeRedemptions UserPromoCodeRedemption[]
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String   // e.g., 'Full-time', 'Internship'
  postedByAlumniId  String
  alumniName        String
  applicationUrl    String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName        String
  jobTitle           String
  status             String      // e.g., 'Saved', 'Applied', 'Interviewing', 'Offer', 'Rejected'
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String         // e.g., 'Phone Screen', 'Technical'
  interviewer      String
  interviewerMobile String?
  interviewerEmail String?
  notes            String?
}

model ResumeProfile {
  id             String              @id @default(cuid())
  tenantId       String
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  resumeText     String
  lastAnalyzed   DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  scanHistory    ResumeScanHistory[]
  deletedAt      DateTime?
}

model ResumeScanHistory {
  id                   String        @id @default(cuid())
  tenantId             String
  tenant               Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId             String
  resumeProfile        ResumeProfile @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime      @default(now())
  matchScore           Int?
  bookmarked           Boolean?      @default(false)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String   // e.g., 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean?  @default(true)
  createdByUserId String
  createdByUser   User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  attendeeUserIds String[]
  attendees       User[]    @relation("EventAttendees")
  deletedAt       DateTime?
}

model CommunityPost {
  id               String       @id @default(cuid())
  tenantId         String
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName         String
  userAvatar       String?
  timestamp        DateTime     @default(now())
  content          String?
  type             String       // 'text', 'poll', 'event', 'request'
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?      // for requests: 'open', 'in progress', 'completed'
  moderationStatus String       // 'visible', 'flagged', 'removed'
  flagCount        Int          @default(0)
  flagReasons      String[]
  flaggedBy        String[]     @default([])
  likes            Int?         @default(0)
  likedBy          String[]     @default([])
  votedBy          String[]     @default([])
  registeredBy     String[]     @default([])
  bookmarkedBy     String[]     @default([])
  isPinned         Boolean?     @default(false)
  comments         CommunityComment[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String   // 'Pending', 'In Progress', 'Completed', 'Rejected'
  upvotes     Int?     @default(0)
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String   // 'error', 'warning', 'info', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]           @default([])
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?    @default(0)
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String   // 'credit' or 'debit'
  currency    String   // 'coins' or 'xp'
}

model PromoCode {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code      String   @unique
  description String
  rewardType String  // 'coins', 'xp', 'premium_days', etc.
  rewardValue Int
  expiresAt DateTime?
  usageLimit Int
  timesUsed Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  deletedAt DateTime?

  redemptions UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode  @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime   @default(now())

  @@id([userId, promoCodeId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // 'mention', 'event', 'system'
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DailyChallenge {
  id           String   @id @default(cuid())
  type         String   // 'standard' or 'flip'
  date         DateTime?
  title        String
  description  String
  difficulty   String?
  category     String?
  solution     String?
  xpReward     Int?
  tasks        Json?
  createdAt    DateTime @default(now())
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String       // 'Draft', 'Nominating', 'Voting', 'Completed'
  winnerId            String?      @unique
  winner              User?        @relation(fields: [winnerId], references: [id])
  nominations         Nomination[]
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  award         Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId     String
  nominee       User     @relation("Nominee", fields: [nomineeId], references: [id])
  nominatorId   String
  nominator     User     @relation("Nominator", fields: [nominatorId], references: [id])
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId      String
  voter        User       @relation(fields: [voterId], references: [id])
  createdAt    DateTime   @default(now())
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String
  milestoneRequirement Int
  commissionRate       Float
  affiliates           Affiliate[]
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id])
  name             String
  email            String
  status           String            // 'pending', 'approved', 'rejected'
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float?            @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  commissionTierId String
  commissionTier   CommissionTier    @relation(fields: [commissionTierId], references: [id])
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ReferralHistory {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referrerUser        User     @relation(fields: [referrerUserId], references: [id])
  referredUserId      String
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String   // 'Pending', 'Signed Up', 'Reward Earned'
  rewardAmount        Int?
}

model InterviewQuestion {
  id            String   @id @default(cuid())
  category      String
  questionText  String
  isMCQ         Boolean? @default(false)
  mcqOptions    Json?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    String?
  baseScore     Int?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  approved      Boolean? @default(true)
  createdAt     DateTime @default(now())
  bookmarkedBy  String[]
}

model MockInterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  topic              String
  jobDescription     String?
  questions          Json?
  answers            Json?
  overallFeedback    Json?
  overallScore       Int?
  status             String   // 'pending', 'in-progress', 'completed'
  createdAt          DateTime @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
  interviewerScores     Json?
}

model LiveInterviewSession {
  id                   String   @id @default(cuid())
  tenantId             String
  title                String
  participants         Json
  scheduledTime        DateTime
  actualStartTime      DateTime?
  actualEndTime        DateTime?
  status               String   // 'Scheduled', 'In-Progress', 'Completed', 'Cancelled'
  meetingLink          String?
  interviewTopics      String[]
  notes                String?
  preSelectedQuestions Json?
  recordingReferences  Json?
  interviewerScores    Json?
  finalScore           Json?
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  steps       Json
  tenantId    String?
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model ResumeTemplate {
  id               String    @id @default(cuid())
  name             String
  description      String
  previewImageUrl  String
  category         String
  dataAiHint       String?
  content          String
  headerColor      String?
  bodyColor        String?
  headerFontSize   String?
  textAlign        String?
  layout           String?
  deletedAt        DateTime?
}

model ProductCompany {
    id              String @id @default(cuid())
    name            String @unique
    location        String
    websiteUrl      String
    domain          String
    hrName          String?
    hrEmail         String?
    contactNumber   String?
    logoUrl         String?
}
