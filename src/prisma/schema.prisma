// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(cuid())
  tenantId                   String?
  name                       String
  email                      String    @unique
  password                   String?
  role                       String    @default("user")
  status                     String?   @default("active")
  lastLogin                  DateTime? @default(now())
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  sessionId                  String?
  // Personal & Professional Info
  dateOfBirth                String?
  gender                     String?
  mobileNumber               String?
  currentAddress             String?
  graduationYear             String?
  degreeProgram              String?
  department                 String?
  currentJobTitle            String?
  currentOrganization        String?
  industry                   String?
  workLocation               String?
  linkedInProfile            String?
  yearsOfExperience          String?
  skills                     String[]
  areasOfSupport             String[]
  timeCommitment             String?
  preferredEngagementMode    String?
  otherComments              String?
  lookingForSupportType      String?
  helpNeededDescription      String?
  shareProfileConsent        Boolean?
  featureInSpotlightConsent  Boolean?
  profilePictureUrl          String?
  resumeText                 String?
  careerInterests            String?
  bio                        String?
  shortBio                   String?
  interests                  String[]
  userApiKey                 String?
  isDistinguished            Boolean?
  challengeTopics            String[]
  challengeProgress          Json?     @db.Json
  // Gamification & Wallet
  xpPoints                   Int?
  dailyStreak                Int?
  longestStreak              Int?
  totalActiveDays            Int?
  weeklyActivity             Int[]
  referralCode               String?   @unique
  earnedBadges               String[]
  interviewCredits           Int?
  streakFreezes              Int?
  // Relations
  tenant                     Tenant?                  @relation(fields: [tenantId], references: [id])
  jobApplications            JobApplication[]
  resumeProfiles             ResumeProfile[]
  resumeScanHistory          ResumeScanHistory[]
  createdAnnouncements       Announcement[]
  featureRequests            FeatureRequest[]
  createdQuestions           InterviewQuestion[]      @relation("CreatedBy")
  bookmarkedQuestions        InterviewQuestion[]      @relation("BookmarkedBy")
  createdQuizzes             MockInterviewSession[]
  appointmentsAsRequester    Appointment[]            @relation("Requester")
  appointmentsAsAlumni       Appointment[]            @relation("Alumni")
  activities                 Activity[]
  affiliateProfile           Affiliate?
  referredByAffiliateSignup  AffiliateSignup?         @relation(fields: [referredByAffiliateSignupId], references: [id])
  referredByAffiliateSignupId String?                  @unique
  wallet                     Wallet?
  communityPosts             CommunityPost[]
  communityComments          CommunityComment[]
  createdBlogPosts           BlogPost[]
  referralsMade              ReferralHistoryItem[]    @relation("Referrer")
  referralReceived           ReferralHistoryItem?     @relation("ReferredUser")
  postedJobOpenings          JobOpening[]
  surveyResponses            SurveyResponse[]
  affiliateSignups           AffiliateSignup[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                String   @id @default(cuid())
  tenantId          String   @unique
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  allowPublicSignup Boolean  @default(true)
  customLogoUrl     String?
  primaryColor      String?
  accentColor       String?
  features          Json?    @db.Json
  emailTemplates    Json?    @db.Json
  createdAt         DateTime @default(now())
}

model Language {
  code String @id @unique
  name String
  
  Word Word[]
  Translation Translation[]
}

model Word {
  id             String        @id @default(cuid())
  originalText   String
  languageId     String
  language       Language      @relation(fields: [languageId], references: [code])
  translations   Translation[] @relation("OriginalWord")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Translation {
  id              String   @id @default(cuid())
  originalWordId  String
  originalWord    Word     @relation("OriginalWord", fields: [originalWordId], references: [id])
  languageId      String
  language        Language @relation(fields: [languageId], references: [code])
  translatedText  String
  qualityScore    Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
// Models from previous fixes...
model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user               User        @relation(fields: [userId], references: [id])
  interviews         Interview[]
}

model Interview {
  id                 String   @id @default(cuid())
  jobApplicationId   String
  date               DateTime
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id])
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Float?
  bookmarked          Boolean? @default(false)
  user                User     @relation(fields: [userId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?
  user        User     @relation(fields: [userId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postedBy         User     @relation(fields: [postedByAlumniId], references: [id])
}

model Announcement {
  id             String   @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  creator        User     @relation(fields: [createdBy], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  timestamp DateTime @default(now())
  description String
  user      User     @relation(fields: [userId], references: [id])
}

model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  xpReward    Int?
  triggerCondition String?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json? @db.Json
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model MockInterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json? @db.Json
  answers            Json? @db.Json
  overallFeedback    Json? @db.Json
  overallScore       Float?
  status             String
  createdAt          DateTime @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json? @db.Json
  user               User     @relation(fields: [userId], references: [id])
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?
  mcqOptions     Json?  @db.Json
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json? @db.Json
  userComments   Json? @db.Json
  createdBy      String
  approved       Boolean?
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
  creator        User      @relation("CreatedBy", fields: [createdBy], references: [id])
  bookmarkedByUsers User[] @relation("BookmarkedBy")
}

model Survey {
  id        String   @id @default(cuid())
  name      String   @unique
  description String?
  steps     Json? @db.Json
  createdAt DateTime @default(now())
  responses SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json @db.Json
  survey       Survey   @relation(fields: [surveyId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int      @default(0)
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model ReferralHistoryItem {
  id                String   @id @default(cuid())
  referrerUserId    String
  referredUserId    String   @unique
  referralDate      DateTime @default(now())
  status            String
  rewardAmount      Float?
  referrer          User     @relation("Referrer", fields: [referrerUserId], references: [id])
  referredUser      User     @relation("ReferredUser", fields: [referredUserId], references: [id])
}

model Affiliate {
  id         String   @id @default(cuid())
  userId     String   @unique
  name       String
  email      String
  status     String
  affiliateCode String @unique
  commissionRate Float
  totalEarned  Float?   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  signups    AffiliateSignup[]
  clicks     AffiliateClick[]
}

model AffiliateClick {
  id                String   @id @default(cuid())
  affiliateId       String
  timestamp         DateTime @default(now())
  ipAddress         String?
  convertedToSignup Boolean  @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String    @unique
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  user             User      @relation(fields: [newUserId], references: [id])
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json? @db.Json
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Float
  type        String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json? @db.Json
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  bookmarkedBy      String[]
  user              User               @relation(fields: [userId], references: [id])
  comments          CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?
  user       User     @relation(fields: [userId], references: [id])
  post       CommunityPost @relation(fields: [postId], references: [id])
  parent     CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    String?
  requester       User     @relation("Requester", fields: [requesterUserId], references: [id])
  alumni          User     @relation("Alumni", fields: [alumniUserId], references: [id])
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean  @default(true)
  createdByUserId String?
  attendeeUserIds String[]
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model BlogPost {
  id            String             @id @default(cuid())
  tenantId      String
  userId        String
  userName      String
  userAvatar    String?
  title         String
  slug          String             @unique
  author        String
  date          DateTime
  imageUrl      String?
  dataAiHint    String?
  content       String
  excerpt       String
  tags          String[]
  bookmarkedBy  String[]
  user          User               @relation(fields: [userId], references: [id])
}

model BlogGenerationSettings {
  id                      String @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}
