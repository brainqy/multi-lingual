// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(uuid())
  code String @unique
  name String
}

model User {
  id                           String                @id @default(uuid())
  tenantId                     String?
  name                         String
  email                        String                @unique
  password                     String?
  role                         String
  status                       String?
  lastLogin                    DateTime?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  sessionId                    String?               @unique
  dateOfBirth                  String?
  gender                       String?
  mobileNumber                 String?
  currentAddress               String?
  graduationYear               String?
  degreeProgram                String?
  department                   String?
  company                      String?
  currentOrganization          String?
  industry                     String?
  workLocation                 String?
  linkedInProfile              String?
  yearsOfExperience            String?
  areasOfSupport               String[]
  timeCommitment               String?
  preferredEngagementMode      String?
  otherComments                String?
  lookingForSupportType        String?
  helpNeededDescription        String?
  shareProfileConsent          Boolean?
  featureInSpotlightConsent    Boolean?
  interests                    String[]
  offersHelpWith               String[]
  careerInterests              String?
  userApiKey                   String?
  challengeTopics              String[]
  challengeProgress            Json?
  referralCode                 String?               @unique
  currentJobTitle              String?
  skills                       String[]
  bio                          String?
  profilePictureUrl            String?
  xpPoints                     Int?                  @default(0)
  dailyStreak                  Int?                  @default(0)
  longestStreak                Int?                  @default(0)
  totalActiveDays              Int?                  @default(0)
  weeklyActivity               Boolean[]             @default([false, false, false, false, false, false, false])
  earnedBadges                 String[]
  interviewCredits             Int?                  @default(5)
  isDistinguished              Boolean?              @default(false)
  shortBio                     String?
  university                   String?
  resumeText                   String?
  tenant                       Tenant?               @relation(fields: [tenantId], references: [id])
  affiliateProfile             Affiliate?
  referralHistory              ReferralHistoryItem[]
  wallet                       Wallet?
  appointmentsAsRequester      Appointment[]         @relation("RequesterAppointments")
  appointmentsAsAlumni         Appointment[]         @relation("AlumniAppointments")
  jobApplications              JobApplication[]
  resumeProfiles               ResumeProfile[]
  resumeScanHistory            ResumeScanHistoryItem[]
  featureRequests              FeatureRequest[]
  communityPosts               CommunityPost[]
  comments                     CommunityComment[]
  createdAnnouncements         Announcement[]
  activities                   Activity[]
  createdInterviewQuestions    InterviewQuestion[]
  referredBySignup             AffiliateSignup?      @relation("NewUserSignup")
}

model Tenant {
  id        String          @id @default(uuid())
  name      String
  domain    String?         @unique
  users     User[]
  createdAt DateTime        @default(now())
  settings  TenantSettings?
}

model TenantSettings {
  id                    String   @id @default(uuid())
  tenantId              String   @unique
  allowPublicSignup     Boolean  @default(true)
  customLogoUrl         String?
  primaryColor          String?
  accentColor           String?
  features              Json?
  emailTemplates        Json?
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Appointment {
  id              String   @id @default(uuid())
  tenantId        String?
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model Interview {
  id               String          @id @default(uuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
  jobApplication   JobApplication  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id                   String       @id @default(uuid())
  tenantId             String?
  userId               String
  companyName          String
  jobTitle             String
  status               String
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         String?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Interview[]
  user                 User        @relation(fields: [userId], references: [id])
}

model JobOpening {
  id                String   @id @default(uuid())
  tenantId          String?
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime
  type              String
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model ResumeProfile {
  id           String    @id @default(uuid())
  tenantId     String?
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                 String   @id @default(uuid())
  tenantId           String?
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean? @default(false)
  user               User     @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id                String             @id @default(uuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?               @default(0)
  capacity          Int?               @default(0)
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int                @default(0)
  bookmarkedBy      String[]
  user              User               @relation(fields: [userId], references: [id])
  comments          CommunityComment[]
}

model CommunityComment {
  id         String         @id @default(uuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  post       CommunityPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
}

model GalleryEvent {
  id              String   @id @default(uuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean? @default(true)
  createdByUserId String?
  attendeeUserIds String[]
}

model BlogPost {
  id           String   @id @default(uuid())
  tenantId     String?
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String @id @default(uuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model Badge {
  id               String  @id @default(uuid())
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String                @id @default(uuid())
  userId       String                @unique
  coins        Int
  flashCoins   Json?
  user         User                  @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(uuid())
  walletId    String
  tenantId    String?
  userId      String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model PromoCode {
  id          String    @id @default(uuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MockInterviewSession {
  id                 String   @id @default(uuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  answers            Json
  overallFeedback    Json?
  overallScore       Int?
  status             String
  createdAt          DateTime
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  questions          Json
}

model DailyChallenge {
  id          String @id @default(uuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model Announcement {
  id             String    @id @default(uuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation(fields: [createdById], references: [id])
  createdById    String
}

model Survey {
  id        String   @id @default(uuid())
  name      String   @unique
  questions Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveyResponse {
  id           String   @id @default(uuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id             String            @id @default(uuid())
  userId         String            @unique
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id])
  clicks         AffiliateClick[]
  signups        AffiliateSignup[] @relation("ReferringAffiliate")
}

model AffiliateClick {
  id                String    @id @default(uuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id               String    @id @default(uuid())
  affiliateId      String
  newUserId        String    @unique
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  newUser          User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  affiliate        Affiliate @relation("ReferringAffiliate", fields: [affiliateId], references: [id])
}

model ReferralHistoryItem {
  id              String        @id @default(uuid())
  referrerUserId  String
  referredEmailOrName String
  referralDate    DateTime
  status          ReferralStatus
  rewardAmount    Int?
  referrerUser    User          @relation(fields: [referrerUserId], references: [id])
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model InterviewQuestion {
  id           String   @id @default(uuid())
  category     String
  questionText String
  isMCQ        Boolean? @default(false)
  mcqOptions   Json?
  correctAnswer String?
  answerOrTip  String
  tags         String[]
  difficulty   String?
  rating       Float?   @default(0)
  ratingsCount Int?     @default(0)
  userRatings  Json?
  userComments Json?
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String
  approved     Boolean? @default(true)
  createdAt    DateTime @default(now())
  bookmarkedBy String[]
  baseScore    Int?
}

model SystemAlert {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model PromotionalContent {
  id           String   @id @default(uuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ProductCompany {
  id            String  @id @default(uuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}
