// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  tenantId          String
  role              String
  name              String
  email             String    @unique
  status            String?
  lastLogin         DateTime?
  dateOfBirth       DateTime? @db.Date
  gender            String?
  mobileNumber      String?
  currentAddress    String?
  graduationYear    String?
  degreeProgram     String?
  department        String?
  currentJobTitle   String?
  company           String?
  currentOrganization String?
  industry          String?
  workLocation      String?
  linkedInProfile   String?
  yearsOfExperience String?
  skills            Json?
  areasOfSupport    Json?
  timeCommitment    String?
  preferredEngagementMode String?
  otherComments     String?
  lookingForSupportType String?
  helpNeededDescription String?
  shareProfileConsent Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl String?
  resumeText        String?
  careerInterests   String?
  bio               String?
  interests         Json?
  offersHelpWith    Json?
  appointmentCoinCost Int?
  xpPoints          Int?
  dailyStreak       Int?
  longestStreak     Int?
  totalActiveDays   Int?
  weeklyActivity    Json?
  referralCode      String?
  earnedBadges      Json?
  affiliateCode     String?
  pastInterviewSessions Json?
  interviewCredits  Int?
  createdAt         DateTime  @default(now())
  isDistinguished   Boolean?
  userApiKey        String?
  challengeTopics   Json?
  challengeProgress Json?
  sessionId         String?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  jobApplications JobApplication[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  communityPosts CommunityPost[]
  communityComments CommunityComment[]
  createdAnnouncements Announcement[]
  requestedAppointments Appointment[] @relation("RequesterAppointments")
  alumniAppointments Appointment[] @relation("AlumniAppointments")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                 String   @id @default(cuid())
  tenantId           String   @unique
  allowPublicSignup  Boolean?
  customLogoUrl      String?
  primaryColor       String?
  accentColor        String?
  features           Json?
  emailTemplates     Json?
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String // Full-time, Part-time, etc.
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              Json?
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  
  user       User          @relation(fields: [userId], references: [id])
  interviews Interview[]
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerMobile String?
  interviewerEmail  String?
  notes            Json?
  
  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model CommunityPost {
  id                String   @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime @default(now())
  content           String?
  type              String // text, poll, event, request
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String? // open, assigned, completed
  moderationStatus  String
  flagCount         Int
  bookmarkedBy      String[]

  user              User @relation(fields: [userId], references: [id])
  comments          CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?

  user User @relation(fields: [userId], references: [id])
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // All Users, Specific Tenant, Specific Role
  audienceTarget String?
  status         String // Draft, Published, Archived
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  
  creator User @relation(fields: [createdBy], references: [id])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?

  requester User @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumni    User @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}
