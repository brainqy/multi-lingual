// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                          String                 @id @default(cuid())
  tenantId                    String
  tenant                      Tenant                 @relation(fields: [tenantId], references: [id])
  name                        String
  email                       String                 @unique
  password                    String?
  role                        String                 @default("user") // admin, manager, user
  status                      String                 @default("active") // active, inactive, pending, suspended
  lastLogin                   DateTime?
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  sessionId                   String?
  dateOfBirth                 DateTime?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  currentJobTitle             String?
  currentOrganization         String?
  company                     String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  skills                      String[]
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  profilePictureUrl           String?
  resumeText                  String?
  careerInterests             String?
  bio                         String?
  interests                   String[]
  userApiKey                  String?
  xpPoints                    Int?                   @default(0)
  dailyStreak                 Int?                   @default(0)
  longestStreak               Int?                   @default(0)
  totalActiveDays             Int?                   @default(0)
  weeklyActivity              Boolean[]
  referralCode                String?                @unique
  earnedBadges                String[]
  affiliateCode               String?                @unique
  pastInterviewSessions       String[]
  interviewCredits            Int?                   @default(5)
  isDistinguished             Boolean?               @default(false)
  challengeTopics             InterviewQuestionCategory[]
  challengeProgress           Json?
  streakFreezes               Int?                   @default(1)
  wallet                      Wallet?
  activities                  Activity[]
  mockInterviewSessions       MockInterviewSession[]
  resumeProfiles              ResumeProfile[]
  scanHistories               ResumeScanHistoryItem[]
  jobApplications             JobApplication[]
  jobOpenings                 JobOpening[]
  communityPosts              CommunityPost[]
  communityComments           CommunityComment[]
  featureRequests             FeatureRequest[]
  affiliateProfile            Affiliate?
  referralHistoryAsReferrer   ReferralHistoryItem[]  @relation("ReferrerReferralHistory")
  referralHistoryAsReferred   ReferralHistoryItem[]  @relation("ReferredReferralHistory")
  announcements               Announcement[]
  galleryEvents               GalleryEvent[]
  createdQuestions            InterviewQuestion[]
  productCompanies            ProductCompany[]
  affiliateSignup             AffiliateSignup?
  requesterAppointments       Appointment[]          @relation("RequesterAppointments")
  alumniAppointments          Appointment[]          @relation("AlumniAppointments")
}

model Tenant {
  id              String           @id @default(cuid())
  name            String
  domain          String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           User[]
  jobOpenings     JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles  ResumeProfile[]
  scanHistories   ResumeScanHistoryItem[]
  galleryEvents   GalleryEvent[] // Added missing relation
  communityPosts  CommunityPost[]
  announcements   Announcement[]
  settings        TenantSettings?
  surveys         Survey[]
  surveyResponses SurveyResponse[]
  appointments    Appointment[]
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  emailTemplates              Json?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistoryItem {
  id                 String    @id @default(cuid())
  tenantId           String
  tenant             Tenant    @relation(fields: [tenantId], references: [id])
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime  @default(now())
  matchScore         Int?
  bookmarked         Boolean?  @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // credit or debit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String // text, poll, event, request
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String? // open, assigned, completed
  moderationStatus String // visible, flagged, removed
  flagCount        Int
  comments         CommunityComment[]
  bookmarkedBy     String[]
  votedBy          String[]
  registeredBy     String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost? @relation(name: "BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String // pending, in-progress, completed
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
  questions           Json?
}

model MockInterviewAnswer {
  id                    String               @id @default(cuid())
  sessionId             String
  session               MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId            String
  questionText          String
  userAnswer            String
  aiFeedback            String?
  aiScore               Int?
  strengths             String[]
  areasForImprovement   String[]
  suggestedImprovements String[]
  isRecording           Boolean?             @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // pending, approved, rejected
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ReferralHistoryItem {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referrer            User     @relation("ReferrerReferralHistory", fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String // Pending, Signed Up, Reward Earned, Expired
  rewardAmount        Int?
  referredUserId      String?  @unique
  referredUser        User?    @relation("ReferredReferralHistory", fields: [referredUserId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String // Full-time, Part-time, Internship, Contract
  postedByAlumniId String
  postedBy         User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String // Saved, Applied, Interviewing, Offer, Rejected
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Interview {
  id                String   @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String // Phone Screen, Technical, Behavioral, On-site, Final Round
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation(name: "BlogPostComments")
  bookmarkedBy String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // standard, flip
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  tenantId    String?
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
}

model PlatformSettings {
  id                            String   @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean
  communityFeedEnabled          Boolean
  autoModeratePosts             Boolean
  jobBoardEnabled               Boolean
  maxJobPostingDays             Int
  gamificationEnabled           Boolean
  xpForLogin                    Int
  xpForNewPost                  Int
  resumeAnalyzerEnabled         Boolean
  aiResumeWriterEnabled         Boolean
  coverLetterGeneratorEnabled   Boolean
  mockInterviewEnabled          Boolean
  referralsEnabled              Boolean
  affiliateProgramEnabled       Boolean
  alumniConnectEnabled          Boolean
  defaultAppointmentCost        Int
  featureRequestsEnabled        Boolean
  allowTenantCustomBranding     Boolean
  allowTenantEmailCustomization Boolean
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String
  maxResumeUploadsPerUser       Int
  defaultTheme                  String
  enablePublicProfilePages      Boolean
  sessionTimeoutMinutes         Int
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean?
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // All Users, Specific Tenant, Specific Role
  audienceTarget String?
  status         String // Draft, Published, Archived
  createdBy      String
  user           User      @relation(fields: [createdBy], references: [id])
  tenantId       String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String // Pending, In Progress, Completed, Rejected
  upvotes     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String?
  tenant          Tenant?   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean?  @default(true)
  createdByUserId String?
  user            User?     @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String // coins, xp, premium_days, flash_coins, streak_freeze
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String // error, warning, info, success
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  RoleSpecific
  Analytical
  HR
  Situational
  ProblemSolving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

model InterviewQuestion {
  id            String                      @id @default(cuid())
  category      InterviewQuestionCategory
  questionText  String
  isMCQ         Boolean?                    @default(false)
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    InterviewQuestionDifficulty?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  user          User?                       @relation(fields: [createdBy], references: [id])
  approved      Boolean?                    @default(false)
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  bookmarkedBy  String[]
}
