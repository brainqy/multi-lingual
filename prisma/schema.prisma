// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                 @unique
  password                  String?
  role                      String                 @default("user") // e.g., 'user', 'manager', 'admin'
  status                    String                 @default("active") // e.g., 'active', 'inactive', 'pending'
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  sessionId                 String?
  dateOfBirth               DateTime?              @db.Date
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?               @default(true)
  featureInSpotlightConsent Boolean?               @default(false)
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  offersHelpWith            String[]
  appointmentCoinCost       Int?                   @default(10)
  xpPoints                  Int?                   @default(0)
  dailyStreak               Int?                   @default(0)
  longestStreak             Int?                   @default(0)
  totalActiveDays           Int?                   @default(0)
  weeklyActivity            Boolean[]
  referralCode              String?                @unique
  earnedBadges              String[]
  affiliateCode             String?                @unique
  pastInterviewSessions     String[]
  interviewCredits          Int?                   @default(5)
  isDistinguished           Boolean?               @default(false)
  challengeTopics           String[]
  challengeProgress         Json?
  streakFreezes             Int?                   @default(1)
  updatedAt                 DateTime               @updatedAt
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  jobApplications           JobApplication[]
  jobOpenings               JobOpening[]
  resumeProfiles            ResumeProfile[]
  resumeScans               ResumeScanHistory[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  wallet                    Wallet?
  activities                Activity[]
  createdQuestions          InterviewQuestion[]
}

model Tenant {
  id                String              @id @default(cuid())
  name              String
  domain            String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  settings          TenantSettings?
  users             User[]
  jobOpenings       JobOpening[]
  jobApplications   JobApplication[]
  resumeProfiles    ResumeProfile[]
  resumeScans       ResumeScanHistory[]
  communityPosts    CommunityPost[]
  surveys           Survey[]
  surveyResponses   SurveyResponse[]
  appointments      Appointment[]
  announcements     Announcement[]
  galleryEvents     GalleryEvent[]
}

model TenantSettings {
  id                          String  @id @default(cuid())
  tenantId                    String  @unique
  tenant                      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  welcomeEmailTemplate        String?
  appointmentReminderTemplate String?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json? // Store as an array of { amount, expiresAt, source }
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Survey {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  steps           Json // Array of SurveyStep
  createdAt       DateTime         @default(now())
  tenantId        String?
  tenant          Tenant?          @relation(fields: [tenantId], references: [id])
  responses       SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String // 'error', 'warning', 'info', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id           String  @id @default(cuid())
  type         String // 'standard' or 'flip'
  date         String?
  title        String
  description  String
  difficulty   String?
  category     String?
  solution     String?
  xpReward     Int?
  tasks        Json? // Array of { description, action, target } for flip challenges
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  streakFreezeReward Int?
  triggerCondition   String?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String   @default("Pending")
  upvotes     Int      @default(0)
}

model Announcement {
  id             String   @id @default(cuid())
  tenantId       String?
  tenant         Tenant?  @relation(fields: [tenantId], references: [id])
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?
  status         String   @default("Draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean  @default(false)
  location        String?
  approved        Boolean  @default(true)
  createdByUserId String?
  attendeeUserIds String[] @default([])
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  userId        String?
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String   @db.Text
  datePosted       DateTime @default(now())
  type             String // 'Full-time', 'Part-time', etc.
  postedByAlumniId String
  user             User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?  @db.Text
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?  @db.Text
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String // 'Phone Screen', 'Technical', etc.
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json? // Array of MockInterviewQuestion
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json? // Array of RecordingReference
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String               @db.Text
  aiFeedback           String?              @db.Text
  aiScore              Int?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String             @db.Text
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?            @db.Text
  type              String // 'text', 'poll', 'event', 'request'
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[] @relation("CommunityPostComments")
  votedBy           String[]
  registeredBy      String[]
  bookmarkedBy      String[]
  likes             String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  postId     String?
  post       CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String // 'coins', 'xp', 'premium_days', etc.
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int       @default(0)
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String   @db.Text
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String   @db.Text
  jobDescriptionText  String   @db.Text
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String  @db.Text
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}

model PlatformSettings {
  id                              String  @id @default("platform_settings")
  platformName                    String
  maintenanceMode                 Boolean @default(false)
  communityFeedEnabled            Boolean @default(true)
  autoModeratePosts               Boolean @default(true)
  jobBoardEnabled                 Boolean @default(true)
  maxJobPostingDays               Int     @default(30)
  gamificationEnabled             Boolean @default(true)
  xpForLogin                      Int     @default(10)
  xpForNewPost                    Int     @default(20)
  resumeAnalyzerEnabled           Boolean @default(true)
  aiResumeWriterEnabled           Boolean @default(true)
  coverLetterGeneratorEnabled     Boolean @default(true)
  mockInterviewEnabled            Boolean @default(true)
  referralsEnabled                Boolean @default(true)
  affiliateProgramEnabled         Boolean @default(true)
  alumniConnectEnabled            Boolean @default(true)
  defaultAppointmentCost          Int     @default(10)
  featureRequestsEnabled          Boolean @default(true)
  allowTenantCustomBranding       Boolean @default(true)
  allowTenantEmailCustomization   Boolean @default(false)
  allowUserApiKey                 Boolean @default(true)
  defaultProfileVisibility        String  @default("alumni_only")
  maxResumeUploadsPerUser         Int     @default(5)
  defaultTheme                    String  @default("light")
  enablePublicProfilePages        Boolean @default(false)
  sessionTimeoutMinutes           Int     @default(60)
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean @default(true)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?
}

model InterviewQuestion {
  id            String                      @id @default(cuid())
  category      InterviewQuestionCategory
  questionText  String                      @db.Text
  isMCQ         Boolean                     @default(false)
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String                      @db.Text
  tags          String[]
  difficulty    InterviewQuestionDifficulty?
  rating        Float?                      @default(0)
  ratingsCount  Int?                        @default(0)
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  user          User?                       @relation(fields: [createdBy], references: [id])
  approved      Boolean?                    @default(false)
  createdAt     DateTime                    @default(now())
  bookmarkedBy  String[]
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  RoleSpecific
  Analytical
  HR
  Situational
  ProblemSolving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}
