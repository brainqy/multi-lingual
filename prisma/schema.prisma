// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  tenantId                      String
  name                          String
  email                         String    @unique
  password                      String?
  role                          String
  status                        String?
  lastLogin                     DateTime?
  dateOfBirth                   DateTime? @db.Date
  gender                        String?
  mobileNumber                  String?
  currentAddress                String?
  graduationYear                String?
  degreeProgram                 String?
  department                    String?
  currentJobTitle               String?
  currentOrganization           String?
  industry                      String?
  workLocation                  String?
  linkedInProfile               String?
  yearsOfExperience             String?
  skills                        Json?
  areasOfSupport                Json?
  timeCommitment                String?
  preferredEngagementMode       String?
  otherComments                 String?
  lookingForSupportType         String?
  helpNeededDescription         String?
  shareProfileConsent           Boolean?
  featureInSpotlightConsent     Boolean?
  profilePictureUrl             String?
  resumeText                    String?
  careerInterests               String?
  bio                           String?
  interests                     Json?
  offersHelpWith                Json?
  appointmentCoinCost           Int?
  xpPoints                      Int?
  dailyStreak                   Int?
  longestStreak                 Int?
  totalActiveDays               Int?
  weeklyActivity                Json?
  referralCode                  String?
  earnedBadges                  Json?
  affiliateCode                 String?
  pastInterviewSessions         Json?
  interviewCredits              Int?
  isDistinguished               Boolean?
  userApiKey                    String?
  challengeTopics               Json?
  challengeProgress             Json?
  createdAt                     DateTime  @default(now())
  sessionId                     String?
  company                       String? // Added field for company
  university                    String? // Added field for university

  tenant                 Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  jobApplications        JobApplication[]
  jobOpenings            JobOpening[]
  resumeProfiles         ResumeProfile[]
  resumeScanHistories    ResumeScanHistory[]
  createdInterviewQuestions InterviewQuestion[] @relation("CreatedQuestions")

  @@index([tenantId])
}

model JobApplication {
  id                   String      @id @default(cuid())
  tenantId             String
  userId               String
  companyName          String
  jobTitle             String
  status               String
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Interview[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  notes            String[]
  interviewerMobile String?
  interviewerEmail String?

  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)

  @@index([jobApplicationId])
}

model CommunityPost {
  id                String              @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  bookmarkedBy      String[]
  comments          CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime
  comment    String
  parentId   String?

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?
  status         String // 'Draft', 'Published', 'Archived'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime
  type              String
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?

  postedBy User @relation(fields: [postedByAlumniId], references: [id], onDelete: Cascade)

  @@index([postedByAlumniId])
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model InterviewQuestion {
  id            String    @id @default(cuid())
  category      String
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    String?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  approved      Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  bookmarkedBy  String[]

  creator User? @relation("CreatedQuestions", fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([createdBy])
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  settings  TenantSettings?
  users     User[]
}

model TenantSettings {
  id                    String   @id @default(cuid())
  tenantId              String   @unique
  allowPublicSignup     Boolean  @default(true)
  customLogoUrl         String?
  primaryColor          String?
  accentColor           String?
  features              Json?
  emailTemplates        Json?
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float?            @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId])
}

model PromotionalContent {
  id            String   @id @default(cuid())
  isActive      Boolean  @default(false)
  title         String
  description   String
  imageUrl      String
  imageAlt      String
  imageHint     String?
  buttonText    String
  buttonLink    String
  gradientFrom  String?
  gradientTo    String?
  gradientVia   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  timestamp   DateTime @default(now())
  description String
}