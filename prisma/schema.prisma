// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                  @id @default(cuid())
  tenantId                       String
  name                           String
  email                          String                  @unique
  password                       String?
  role                           String
  status                         String                  @default("active") // active, inactive, pending, suspended
  lastLogin                      DateTime?
  createdAt                      DateTime                @default(now())
  updatedAt                      DateTime                @updatedAt
  dateOfBirth                    String?
  gender                         String?
  mobileNumber                   String?
  currentAddress                 String?
  graduationYear                 String?
  degreeProgram                  String?
  department                     String?
  company                        String?
  currentOrganization            String?
  industry                       String?
  workLocation                   String?
  linkedInProfile                String?
  yearsOfExperience              String?
  skills                         String[]
  areasOfSupport                 String[]
  timeCommitment                 String?
  preferredEngagementMode        String?
  otherComments                  String?
  lookingForSupportType          String?
  helpNeededDescription          String?
  shareProfileConsent            Boolean?                @default(true)
  featureInSpotlightConsent      Boolean?                @default(false)
  shortBio                       String?
  university                     String?
  profilePictureUrl              String?
  interests                      String[]
  offersHelpWith                 String[]
  appointmentCoinCost            Int?                    @default(10)
  xpPoints                       Int?                    @default(0)
  dailyStreak                    Int?                    @default(0)
  longestStreak                  Int?                    @default(0)
  totalActiveDays                Int?                    @default(0)
  weeklyActivity                 Boolean[]
  referralCode                   String?                 @unique
  earnedBadges                   String[]
  affiliateCode                  String?                 @unique
  pastInterviewSessions          String[]
  interviewCredits               Int?                    @default(5)
  isDistinguished                Boolean?                @default(false)
  userApiKey                     String?
  careerInterests                String?
  bio                            String?
  challengeTopics                String[]
  challengeProgress              Json?
  sessionId                      String?                 @unique
  resumeText                     String?

  tenant                         Tenant                  @relation(fields: [tenantId], references: [id])
  affiliateProfile               Affiliate?
  referralHistory                ReferralHistoryItem[]
  wallet                         Wallet?
  appointmentsAsRequester        Appointment[]           @relation("RequesterAppointments")
  appointmentsAsAlumni           Appointment[]           @relation("AlumniAppointments")
  jobApplications                JobApplication[]
  resumeProfiles                 ResumeProfile[]
  resumeScanHistory              ResumeScanHistoryItem[]
  featureRequests                FeatureRequest[]
  communityPosts                 CommunityPost[]
  comments                       CommunityComment[]
  createdAnnouncements           Announcement[]
  activities                     Activity[]
  createdInterviewQuestions      InterviewQuestion[]
  affiliateSignups               AffiliateSignup[]       @relation("ReferringUser")
  referredBySignup               AffiliateSignup?        @relation("NewUser")

  @@index([tenantId])
}


model Tenant {
  id          String          @id @default(cuid())
  name        String
  domain      String?         @unique
  createdAt   DateTime        @default(now())
  users       User[]
  settings    TenantSettings?
}

model TenantSettings {
  id                      String    @id @default(cuid())
  tenantId                String    @unique
  allowPublicSignup       Boolean   @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
  emailTemplates          Json?
  tenant                  Tenant    @relation(fields: [tenantId], references: [id])
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String // Full-time, Part-time, etc.
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model JobApplication {
  id                  String      @id @default(cuid())
  tenantId            String
  userId              String
  companyName         String
  jobTitle            String
  status              String      // e.g., Saved, Applied, Interviewing
  dateApplied         DateTime
  notes               String[]
  jobDescription      String?
  location            String?
  salary              String?
  reminderDate        DateTime?
  sourceJobOpeningId  String?
  applicationUrl      String?
  resumeIdUsed        String?
  coverLetterText     String?
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews          Interview[]

  @@index([userId])
}

model Interview {
  id                  String         @id @default(cuid())
  jobApplicationId    String
  date                DateTime
  type                String         // e.g., Phone Screen, Technical
  interviewer         String
  interviewerMobile   String?
  interviewerEmail    String?
  notes               String[]
  jobApplication      JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)

  @@index([jobApplicationId])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean? @default(false)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Appointment {
  id              String    @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String    // e.g., Pending, Confirmed, Cancelled
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
  withUser        String? // Name of the other person

  requesterUser   User @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUser      User @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)

  @@index([requesterUserId])
  @@index([alumniUserId])
}


model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // credit or debit
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
}


model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String             // text, poll, event, request
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?            // open, assigned, completed, in progress
  moderationStatus  String
  flagCount         Int                @default(0)
  bookmarkedBy      String[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments          CommunityComment[]

  @@index([userId])
  @@index([tenantId])
}


model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String    // All Users, Specific Tenant, Specific Role
  audienceTarget String?   // Tenant ID or Role Name
  status         String    // Draft, Published, Archived
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByUserId  String
  createdBy      User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@index([createdByUserId])
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}


model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}


model MockInterviewSession {
  id                   String   @id @default(cuid())
  userId               String
  topic                String
  description          String?
  jobDescription       String?
  answers              Json?
  overallFeedback      Json?
  overallScore         Int?
  status               String // pending, in-progress, completed
  createdAt            DateTime @default(now())
  timerPerQuestion     Int?
  difficulty           String?
  questionCategories   String[]
  recordingReferences  Json?
  questions            Json
}


model DailyChallenge {
  id          String   @id @default(cuid())
  type        String   // standard, flip
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}


model SystemAlert {
  id        String   @id @default(cuid())
  type      String   // error, warning, info, success
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}


model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  steps       Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  name            String
  email           String
  status          String            // pending, approved, rejected
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float             @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks          AffiliateClick[]
  signups         AffiliateSignup[] @relation("ReferringUser")
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String    @unique
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  referringUser    User      @relation("ReferringUser", fields: [affiliateId], references: [id], onDelete: Cascade)
  newUser          User      @relation("NewUser", fields: [newUserId], references: [id], onDelete: Cascade)

  @@index([affiliateId])
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?  @default(false)
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  baseScore      Int?
  rating         Float?    @default(0)
  ratingsCount   Int?      @default(0)
  userRatings    Json?
  userComments   Json?
  createdByUserId  String
  approved       Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
  createdBy      User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  
  @@index([createdByUserId])
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model Language {
  id String @id @default(cuid())
  code String @unique
  name String
  words Word[]
}

model Word {
  id String @id @default(cuid())
  text String
  languageId String
  language Language @relation(fields: [languageId], references: [id])
  translations Translation[] @relation("original")
  translationOf Translation[] @relation("translated")
}

model Translation {
  id String @id @default(cuid())
  originalId String
  translatedId String
  qualityScore Int?
  original Word @relation("original", fields: [originalId], references: [id])
  translated Word @relation("translated", fields: [translatedId], references: [id])
}
