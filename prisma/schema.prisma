// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String @id @unique
  name String
}

model Tenant {
  id               String             @id @default(cuid())
  name             String
  domain           String?            @unique
  createdAt        DateTime           @default(now())
  users            User[]
  jobOpenings      JobOpening[]
  jobApplications  JobApplication[]
  resumeProfiles   ResumeProfile[]
  resumeScans      ResumeScanHistory[]
  communityPosts   CommunityPost[]
  announcements    Announcement[]
  galleryEvents    GalleryEvent[]
  surveys          Survey[]
  surveyResponses  SurveyResponse[]   @relation("TenantSurveyResponses")
  appointments     Appointment[]
}

model TenantSettings {
  id                          String          @id @default(cuid())
  tenantId                    String          @unique
  tenant                      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean         @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  emailTemplates              Json?
}

model User {
  id                          String                   @id @default(cuid())
  tenantId                    String
  tenant                      Tenant                   @relation(fields: [tenantId], references: [id])
  role                        String                   @default("user")
  name                        String
  email                       String                   @unique
  password                    String?
  status                      String?                  @default("active")
  lastLogin                   DateTime?
  createdAt                   DateTime                 @default(now())
  dateOfBirth                 DateTime?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  currentJobTitle             String?
  company                     String?
  currentOrganization         String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  skills                      String[]
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  profilePictureUrl           String?
  resumeText                  String?
  careerInterests             String?
  bio                         String?
  interests                   String[]
  userApiKey                  String?
  offersHelpWith              String[]
  appointmentCoinCost         Int?
  xpPoints                    Int?                     @default(0)
  dailyStreak                 Int?                     @default(0)
  longestStreak               Int?                     @default(0)
  totalActiveDays             Int?                     @default(0)
  weeklyActivity              Boolean[]
  referralCode                String?                  @unique
  earnedBadges                String[]
  affiliateCode               String?                  @unique
  pastInterviewSessions       String[]
  interviewCredits            Int?                     @default(5)
  isDistinguished             Boolean?                 @default(false)
  challengeTopics             String[]
  challengeProgress           Json?
  sessionId                   String?
  streakFreezes               Int?                     @default(1)

  // Relationships
  requesterAppointments       Appointment[]            @relation("RequesterAppointments")
  alumniAppointments          Appointment[]            @relation("AlumniAppointments")
  createdQuestions            InterviewQuestion[]
  jobOpenings                 JobOpening[]
  jobApplications             JobApplication[]
  resumeProfiles              ResumeProfile[]
  resumeScanHistory           ResumeScanHistory[]
  communityPosts              CommunityPost[]
  communityComments           CommunityComment[]
  featureRequests             FeatureRequest[]
  surveyResponses             SurveyResponse[]         @relation("UserSurveyResponses")
  wallet                      Wallet?
  activities                  Activity[]
  mockInterviewSessions       MockInterviewSession[]
  affiliate                   Affiliate?
  referredSignups             AffiliateSignup[]
  referralsMade               ReferralHistoryItem[]
  createdAnnouncements        Announcement[]
  createdGalleryEvents        GalleryEvent[]
  productCompanies            ProductCompany[]
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Wallet {
  id            String              @id @default(cuid())
  userId        String              @unique
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins         Int
  flashCoins    Json?
  transactions  WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model SystemAlert {
  id          String   @id @default(cuid())
  type        String   // 'error', 'warning', 'info', 'success'
  title       String
  message     String
  timestamp   DateTime @default(now())
  linkTo      String?
  linkText    String?
  isRead      Boolean  @default(false)
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Badge {
  id                 String  @id @unique
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model DailyChallenge {
  id           String  @id @default(cuid())
  type         String // 'standard' or 'flip'
  date         DateTime?
  title        String
  description  String
  difficulty   String?
  category     String?
  solution     String?
  xpReward     Int?
  tasks        Json?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                      String               @id @default(cuid())
  sessionId               String
  session                 MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId              String
  questionText            String
  userAnswer              String
  aiFeedback              String?
  aiScore                 Float?
  strengths               String[]
  areasForImprovement     String[]
  suggestedImprovements   String[]
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String             // 'text', 'poll', 'event', 'request'
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?            // for requests: 'open', 'assigned', 'completed'
  moderationStatus  String             // 'visible', 'flagged', 'removed'
  flagCount         Int                @default(0)
  votedBy           String[]
  registeredBy      String[]
  likes             Int                @default(0)
  comments          CommunityComment[] @relation("CommunityPostComments")
  bookmarkedBy      String[]
}

model CommunityComment {
  id          String   @id @default(cuid())
  postId      String?
  post        CommunityPost? @relation(name: "CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost? @relation(name: "BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  comment     String
  parentId    String?
  parent      CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[] @relation("CommentReplies")
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  tenantId    String?
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(name: "UserSurveyResponses", fields: [userId], references: [id])
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
  tenant       Tenant?  @relation(name: "TenantSurveyResponses", fields: [tenantId], references: [id])
}

model Announcement {
  id               String   @id @default(cuid())
  title            String
  content          String
  startDate        DateTime
  endDate          DateTime?
  audience         String   // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget   String?
  status           String   // 'Draft', 'Published', 'Archived'
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String
  creator          User     @relation(fields: [createdBy], references: [id])
  tenantId         String?
  tenant           Tenant?  @relation(fields: [tenantId], references: [id])
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String            // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String
  newUser            User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ReferralHistoryItem {
  id                String   @id @default(cuid())
  referrerUserId    String
  referrer          User     @relation(fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate      DateTime @default(now())
  status            String   // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount      Int?
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean  @default(false)
  location        String?
  approved        Boolean  @default(true)
  createdByUserId String
  creator         User     @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requester       User     @relation(name: "RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation(name: "AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String   // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
  withUser        String
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?  @default(false)
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  createdBy      String
  creator        User      @relation(fields: [createdBy], references: [id])
  approved       Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String?
  resumeProfile       ResumeProfile? @relation(fields: [resumeId], references: [id])
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Float?
  bookmarked          Boolean?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
}
