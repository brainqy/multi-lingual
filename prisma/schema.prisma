
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(cuid())
  tenantId                  String
  name                      String
  email                     String      @unique
  role                      String // 'admin', 'manager', 'user'
  status                    String?
  lastLogin                 DateTime?
  dateOfBirth               DateTime?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?
  earnedBadges              String[]
  affiliateCode             String?
  pastInterviewSessions     String[]
  interviewCredits          Int?
  createdAt                 DateTime    @default(now())
  isDistinguished           Boolean?
  userApiKey                String?
  challengeTopics           String[]
  shortBio                  String?
  university                String?
  sessionId                 String?     @unique

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                           String   @id @default(cuid())
  tenantId                     String   @unique
  allowPublicSignup            Boolean  @default(true)
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  communityFeedEnabled         Boolean?
  jobBoardEnabled              Boolean?
  gamificationEnabled          Boolean?
  walletEnabled                Boolean?
  eventRegistrationEnabled     Boolean?
  welcomeEmailTemplate         String?
  tenant                       Tenant   @relation(fields: [tenantId], references: [id])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())

  @@index([userId])
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean? @default(false)

  @@index([userId])
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String // Saved, Applied, Interviewing, Offer, Rejected
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]

  @@index([userId])
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  date              DateTime
  type              String // Phone Screen, Technical, Behavioral, On-site, Final Round
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
}

model CommunityPost {
  id               String              @id @default(cuid())
  tenantId         String
  userId           String
  userName         String
  userAvatar       String?
  timestamp        DateTime            @default(now())
  content          String?
  type             String // text, poll, event, request
  tags             String[]
  imageUrl         String?
  pollOptions      Json? // [{ option: string, votes: number }]
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String? // open, assigned, completed, in progress
  moderationStatus String // visible, flagged, removed
  flagCount        Int
  comments         CommunityComment[]
  bookmarkedBy     String[]

  @@index([tenantId])
}

model CommunityComment {
  id         String        @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime      @default(now())
  comment    String
  parentId   String?
  post       CommunityPost @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?

  @@index([requesterUserId])
  @@index([alumniUserId])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  timestamp   DateTime @default(now())
  description String

  @@index([userId])
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}
