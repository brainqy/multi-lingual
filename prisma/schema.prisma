// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  email                         String    @unique
  name                          String
  password                      String?
  role                          String    @default("user")
  status                        String?   @default("active")
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  lastLogin                     DateTime?
  sessionId                     String?

  // New fields to match UserProfile
  profilePictureUrl             String?
  bio                           String?
  shortBio                      String?
  university                    String?
  currentJobTitle               String?
  company                       String?
  skills                        String[]
  xpPoints                      Int?      @default(0)
  dailyStreak                   Int?      @default(0)
  longestStreak                 Int?      @default(0)
  totalActiveDays               Int?      @default(0)
  weeklyActivity                Boolean[]
  earnedBadges                  String[]
  interviewCredits              Int?      @default(5)
  isDistinguished               Boolean?  @default(false)
  referralCode                  String?   @unique

  // Tenant Relation
  tenantId                      String
  tenant                        Tenant    @relation(fields: [tenantId], references: [id])
  
  // One-to-one relation for affiliate signup
  referredByAffiliateSignupId   String?   @unique
  referredBySignup              AffiliateSignup? @relation("NewUserSignup", fields: [referredByAffiliateSignupId], references: [id])


  // One-to-one relation for affiliate profile
  affiliateProfile              Affiliate?

  // One-to-many relations
  referralHistory               ReferralHistoryItem[]
  wallet                        Wallet?
  appointmentsAsRequester       Appointment[] @relation("Requester")
  appointmentsAsAlumni          Appointment[] @relation("Alumni")
  jobApplications               JobApplication[]
  resumeProfiles                ResumeProfile[]
  resumeScanHistory             ResumeScanHistoryItem[]
  featureRequests               FeatureRequest[]
  communityPosts                CommunityPost[]
  comments                      CommunityComment[]
  createdAnnouncements          Announcement[]
  activities                    Activity[]
  createdInterviewQuestions     InterviewQuestion[]
  affiliateSignups              AffiliateSignup[] @relation("NewUserSignupRelation")

  @@map("users")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String?  @unique
  createdAt   DateTime @default(now())
  users       User[]
  settings    TenantSettings?
  jobOpenings JobOpening[]
  announcements Announcement[]

  @@map("tenants")
}

model TenantSettings {
  id                 String   @id @default(cuid())
  tenantId           String   @unique
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup  Boolean  @default(true)
  customLogoUrl      String?
  primaryColor       String?
  accentColor        String?
  features           Json?

  @@map("tenant_settings")
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String // Full-time, Part-time, etc.
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
  
  @@map("job_openings")
}

model JobApplication {
  id                  String      @id @default(cuid())
  tenantId            String
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName         String
  jobTitle            String
  status              String
  dateApplied         DateTime
  notes               String[]
  jobDescription      String?
  location            String?
  salary              String?
  reminderDate        DateTime?
  sourceJobOpeningId  String?
  applicationUrl      String?
  resumeIdUsed        String?
  coverLetterText     String?
  interviews          Interview[]

  @@map("job_applications")
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]

  @@map("interviews")
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("resume_profiles")
}


model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("Requester", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("Alumni", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?

  @@map("appointments")
}

model Badge {
  id               String  @id @default(cuid())
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?

  @@map("badges")
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int

  @@map("gamification_rules")
}


model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  bookmarkedBy      String[]

  @@map("community_posts")
}

model CommunityComment {
  id        String        @id @default(cuid())
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: NoAction) // Avoid cascade delete issues
  userName  String
  userAvatar String?
  timestamp DateTime      @default(now())
  comment   String
  parentId  String?
  parent    CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction)
  replies   CommunityComment[] @relation("CommentReplies")

  @@map("community_comments")
}


model Announcement {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  title           String
  content         String
  startDate       DateTime
  endDate         DateTime?
  audience        String
  audienceTarget  String?
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String
  createdBy       User     @relation(fields: [createdByUserId], references: [id])

  @@map("announcements")
}

model Wallet {
  id           String             @id @default(cuid())
  userId       String             @unique
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                @default(0)
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // credit or debit

  @@map("wallet_transactions")
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]

  @@map("affiliates")
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)

  @@map("affiliate_clicks")
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  newUserId        String    @unique
  newUser          User      @relation("NewUserSignupRelation", fields: [newUserId], references: [id])
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])

  @@map("affiliate_signups")
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?

  @@map("daily_challenges")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)

  @@map("feature_requests")
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?  @default(false)
  mcqOptions      Json?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdByUserId String
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
  approved        Boolean?  @default(true)
  createdAt       DateTime  @default(now())
  bookmarkedBy    String[]

  @@map("interview_questions")
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  answers             Json
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?

  @@map("mock_interview_sessions")
}


model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?

  @@map("product_companies")
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("promo_codes")
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("promotional_content")
}

model Survey {
  id         String   @id @default(cuid())
  name       String   @unique
  title      String
  description String?
  questions  Json
  createdAt  DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model BlogGenerationSettings {
  id                      String @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  bookmarkedBy String[]
  comments     Json     @default("[]")
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model ReferralHistoryItem {
  id               String         @id @default(cuid())
  referrerUserId   String
  referrerUser     User           @relation(fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate     DateTime       @default(now())
  status           ReferralStatus
  rewardAmount     Float?
}


model Language {
  id           String @id @default(cuid())
  code         String @unique
  name         String
  translations Translation[]
}

model Translation {
  id            String   @id @default(cuid())
  languageId    String
  language      Language @relation(fields: [languageId], references: [id])
  key           String
  value         String
  qualityScore  Float?

  @@unique([languageId, key])
}

model ResumeScanHistoryItem {
  id                 String    @id @default(cuid())
  tenantId           String
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime  @default(now())
  matchScore         Int?
  bookmarked         Boolean?  @default(false)
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  description String
}
