// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String @id @unique
  name String
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  name            String
  password        String
  role            String  @default("user")
  profilePictureUrl String?
  sessionId       String?
  status          String?

  // Profile Information
  dateOfBirth      DateTime?
  gender           String?
  mobileNumber     String?
  currentAddress   String?
  graduationYear   String?
  degreeProgram    String?
  department       String?
  currentJobTitle  String?
  currentOrganization String?
  industry         String?
  workLocation     String?
  linkedInProfile  String?
  yearsOfExperience String?
  skills           String[]
  bio              String?
  careerInterests  String?
  interests        String[]

  // Engagement Fields
  areasOfSupport          String[]
  timeCommitment          String?
  preferredEngagementMode String?
  lookingForSupportType   String?
  helpNeededDescription   String?
  shareProfileConsent     Boolean? @default(true)
  featureInSpotlightConsent Boolean? @default(false)
  isDistinguished         Boolean? @default(false)

  // Gamification Fields
  xpPoints        Int?     @default(0)
  dailyStreak     Int?     @default(0)
  longestStreak   Int?     @default(0)
  totalActiveDays Int?     @default(0)
  lastLogin       DateTime?
  weeklyActivity  Int[] @default([0, 0, 0, 0, 0, 0, 0])
  earnedBadges    String[]
  streakFreezes   Int?     @default(1)
  referralCode    String?  @unique

  // Tenant Relationship
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  // App-specific data
  resumeText          String?
  interviewCredits    Int?     @default(5)
  userApiKey          String?
  challengeTopics     String[]
  challengeProgress   Json?

  // Relations
  jobApplications     JobApplication[]
  resumeProfiles      ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  communityPosts      CommunityPost[]
  communityComments   CommunityComment[]
  notifications       Notification[]
  activities          Activity[]
  appointmentsAsRequester Appointment[] @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[] @relation("AlumniAppointments")
  wallet              Wallet?
  referralHistory     ReferralHistory[] @relation("Referrer")
  referredBy          ReferralHistory?  @relation("ReferredUser", fields: [referredByReferralId], references: [id])
  referredByReferralId String? @unique
  affiliateProfile    Affiliate?
  affiliateSignups    AffiliateSignup[]
  promoCodeRedemptions UserPromoCodeRedemption[]
  mockInterviewSessions MockInterviewSession[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Dashboard Customization
  dashboardWidgets Json?
  completedChallengeIds String[] @default([])
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  
  // Relations
  users    User[]
  settings TenantSettings?
  jobOpenings JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  communityPosts CommunityPost[]
  appointments Appointment[]
  activities Activity[]
  promoCodes PromoCode[]
  surveys Survey[]
  surveyResponses SurveyResponse[]
  galleryEvents GalleryEvent[]
}

model TenantSettings {
  id                  String   @id @default(cuid())
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId            String   @unique
  allowPublicSignup   Boolean  @default(true)
  customLogoUrl       String?
  primaryColor        String?
  accentColor         String?
  features            Json?
}

model JobApplication {
  id                 String     @id @default(cuid())
  tenantId           String
  tenant             Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  
  interviews         Interview[]
}

model Interview {
  id               String          @id @default(cuid())
  jobApplication   JobApplication  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
}

model CommunityPost {
  id                String       @id @default(cuid())
  tenantId          String
  tenant            Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  timestamp         DateTime     @default(now())
  content           String?
  type              String       // 'text', 'poll', 'event', 'request'
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?      // for 'request' type: 'open', 'in progress', 'completed'
  moderationStatus  String
  flagCount         Int
  flagReasons       String[]     @default([])
  comments          CommunityComment[]
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
  likes             Int
  likedBy           String[]
  flaggedBy         String[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?
  
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?
  
  parent     CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?
  replies    CommunityComment[] @relation("CommentReplies")
}


model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  bookmarkedBy String[]
  comments     CommunityComment[]
}

model BlogGenerationSettings {
  id                      String @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model PlatformSettings {
  id                            String   @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean
  communityFeedEnabled          Boolean
  autoModeratePosts             Boolean
  jobBoardEnabled               Boolean
  maxJobPostingDays             Int
  gamificationEnabled           Boolean
  xpForLogin                    Int
  xpForNewPost                  Int
  resumeAnalyzerEnabled         Boolean
  aiResumeWriterEnabled         Boolean
  coverLetterGeneratorEnabled   Boolean
  mockInterviewEnabled          Boolean
  aiMockInterviewCost           Int?
  referralsEnabled              Boolean
  affiliateProgramEnabled       Boolean
  alumniConnectEnabled          Boolean
  defaultAppointmentCost        Int
  featureRequestsEnabled        Boolean
  allowTenantCustomBranding     Boolean
  allowTenantEmailCustomization Boolean
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String
  maxResumeUploadsPerUser       Int
  defaultTheme                  String
  enablePublicProfilePages      Boolean
  sessionTimeoutMinutes         Int
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
}


model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  description String
}

model Badge {
  id                 String  @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
}

model ReferralHistory {
  id               String   @id @default(cuid())
  referrerUserId   String
  referrerUser     User     @relation("Referrer", fields: [referrerUserId], references: [id], onDelete: Cascade)
  referredEmailOrName String
  referralDate     DateTime @default(now())
  status           String   // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount     Int?
  referredUser     User?    @relation("ReferredUser")
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  email           String
  status          String            // 'pending', 'approved', 'rejected'
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float             @default(0.0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clicks          AffiliateClick[]
  signups         AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUserId         String
  newUser           User      @relation(fields: [newUserId], references: [id], onDelete: Cascade)
  signupDate        DateTime  @default(now())
  commissionEarned  Float?
}

model FeatureRequest {
  id         String   @id @default(cuid())
  tenantId   String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  title      String
  description String
  status     String   // 'Pending', 'In Progress', 'Completed', 'Rejected'
  upvotes    Int?
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId       String
  userName     String
  tenantId     String
  responseDate DateTime @default(now())
  data         Json
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String   // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?
  status         String   // 'Draft', 'Published', 'Archived'
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenantId       String?
}

model SystemAlert {
  id         String   @id @default(cuid())
  type       String   // 'error', 'warning', 'info', 'success'
  title      String
  message    String
  timestamp  DateTime @default(now())
  linkTo     String?
  linkText   String?
  isRead     Boolean  @default(false)
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?
  location        String?
  approved        Boolean?
  createdByUserId String?
  attendeeUserIds String[]
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String  @db.Text
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}


model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id        String   @id @default(cuid())
  tenantId  String?  
  code      String   @unique
  description String
  rewardType String
  rewardValue Int
  expiresAt DateTime?
  usageLimit Int
  timesUsed Int @default(0)
  isActive  Boolean
  expiryDays Int?
  createdAt DateTime @default(now())
  redemptions UserPromoCodeRedemption[]
  tenant Tenant? @relation(fields: [tenantId], references: [id]) 
}

model UserPromoCodeRedemption {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime @default(now())

  @@unique([userId, promoCodeId])
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?
  mcqOptions     Json?
  baseScore      Int?
  correctAnswer  String?
  answerOrTip    String    @db.Text
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  createdBy      String?
  approved       Boolean?
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
}

model MockInterviewAnswer {
  id                    String      @id @default(cuid())
  mockInterviewSession  MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId             String
  questionId            String
  questionText          String
  userAnswer            String      @db.Text
  aiFeedback            String?     @db.Text
  aiScore               Int?
  strengths             String[]
  areasForImprovement   String[]
  suggestedImprovements String[]
}


model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic               String
  description         String?
  jobDescription      String?               @db.Text
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}
model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String?
  createdAt DateTime @default(now())
  type      String?
  content   String
  link      String
  isRead    Boolean? @default(false)
  // Add other fields as needed
}