// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String @id @unique
  name String
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  email                     String                 @unique
  name                      String
  password                  String?
  role                      String
  status                    String?
  lastLogin                 DateTime?
  dateOfBirth               DateTime?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?                @unique
  earnedBadges              String[]
  affiliateCode             String?                @unique
  interviewCredits          Int?
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  sessionId                 String?
  streakFreezes             Int?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  wallet                    Wallet?
  activities                Activity[]
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  featureRequests           FeatureRequest[]
  jobOpenings               JobOpening[]
  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  scanHistories             ResumeScanHistory[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  createdQuestions          InterviewQuestion[]
  mockInterviewSessions     MockInterviewSession[]
  productCompanies          ProductCompany[]
}

model Tenant {
  id              String           @id @default(cuid())
  name            String
  domain          String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           User[]
  settings        TenantSettings[]
  jobOpenings     JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles  ResumeProfile[]
  scanHistories   ResumeScanHistory[]
  communityPosts  CommunityPost[]
  surveys         Survey[]
  surveyResponses SurveyResponse[]
  appointments    Appointment[]
  galleryEvents   GalleryEvent[]
}

model TenantSettings {
  id                            String    @id @default(cuid())
  tenantId                      String    @unique
  tenant                        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup             Boolean   @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  // emailTemplates relation can be added here if needed
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json? // Store as JSON: { amount: number, expiresAt: string, source: string }[]
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json? // Store as JSON: { description: string, action: string, target: number }[]
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String // 'error', 'warning', 'info', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String // 'text', 'poll', 'event', 'request'
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  votedBy          String[]
  registeredBy     String[]
  comments         CommunityComment[] @relation("PostComments")
  bookmarkedBy     String[]
  likes            Int?
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("Replies")
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Float?
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Float?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String // 'Pending', 'In Progress', 'Completed', 'Rejected'
  upvotes     Int      @default(0)
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean? @default(false)
  createdByUserId String?
  attendeeUserIds String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String // 'Full-time', 'Part-time', etc.
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Float?
  bookmarked          Boolean?
}

model Survey {
  id          String           @id @default(cuid())
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  name        String           @unique
  description String?
  steps       Json // Array of SurveyStep
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  userId       String
  userName     String
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}

model PlatformSettings {
  id                            String   @id @default("singleton")
  platformName                  String
  maintenanceMode               Boolean
  communityFeedEnabled          Boolean
  autoModeratePosts             Boolean
  jobBoardEnabled               Boolean
  maxJobPostingDays             Int
  gamificationEnabled           Boolean
  xpForLogin                    Int
  xpForNewPost                  Int
  resumeAnalyzerEnabled         Boolean
  aiResumeWriterEnabled         Boolean
  coverLetterGeneratorEnabled   Boolean
  mockInterviewEnabled          Boolean
  referralsEnabled              Boolean
  affiliateProgramEnabled       Boolean
  alumniConnectEnabled          Boolean
  defaultAppointmentCost        Int
  featureRequestsEnabled        Boolean
  allowTenantCustomBranding     Boolean
  allowTenantEmailCustomization Boolean
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String
  maxResumeUploadsPerUser       Int
  defaultTheme                  String
  enablePublicProfilePages      Boolean
  sessionTimeoutMinutes         Int
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean?
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  Role_Specific
  Analytical
  HR
  Situational
  Problem_Solving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}

model InterviewQuestion {
  id            String                      @id @default(cuid())
  category      InterviewQuestionCategory
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    InterviewQuestionDifficulty?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String
  user          User                        @relation(fields: [createdBy], references: [id])
  approved      Boolean?
  createdAt     DateTime                    @default(now())
  bookmarkedBy  String[]
}
