
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid()) @db.VarChar(255)
  tenantId                  String    @db.VarChar(255)
  name                      String
  email                     String    @unique
  role                      String    @default("user")
  status                    String?   @default("active")
  lastLogin                 DateTime? @default(now())
  dateOfBirth               DateTime?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    Json?
  areasOfSupport            Json?
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?  @default(true)
  featureInSpotlightConsent Boolean?  @default(false)
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 Json?
  offersHelpWith            Json?
  appointmentCoinCost       Int?
  xpPoints                  Int?      @default(0)
  dailyStreak               Int?      @default(0)
  longestStreak             Int?      @default(0)
  totalActiveDays           Int?      @default(0)
  weeklyActivity            Json?
  referralCode              String?   @unique
  earnedBadges              Json?
  affiliateCode             String?   @unique
  interviewCredits          Int?      @default(5)
  createdAt                 DateTime  @default(now())
  isDistinguished           Boolean?  @default(false)
  userApiKey                String?
  challengeTopics           Json?
  shortBio                  String?
  university                String?
  sessionId                 String?   @unique(sort: Desc, nulls: NotLast) @db.VarChar(255)
  tenant                    Tenant    @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  users     User[]

  // Relation to TenantSettings
  settings TenantSettings?
}

model TenantSettings {
  id                            String  @id @default(cuid())
  tenantId                      String  @unique
  allowPublicSignup             Boolean @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  emailTemplates                Json?
  // Foreign key relation
  tenant                        Tenant  @relation(fields: [tenantId], references: [id])
}

model JobApplication {
  id                   String      @id @default(cuid())
  tenantId             String
  userId               String
  companyName          String
  jobTitle             String
  status               String
  dateApplied          DateTime
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Json?
  notes                Json?
}

model CommunityPost {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  userName           String
  userAvatar         String?
  timestamp          DateTime @default(now())
  content            String?
  type               String
  tags               Json?
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  assignedTo         String?
  status             String?
  moderationStatus   String
  flagCount          Int
  comments           Json?
  bookmarkedBy       Json?
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  timestamp   DateTime @default(now())
  description String
  userId      String?
}

model Badge {
  id               String  @id @default(cuid())
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}
