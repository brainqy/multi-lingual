
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                 @unique
  password                  String?
  role                      String // "admin", "manager", "user"
  status                    String?
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  sessionId                 String?
  currentJobTitle           String?
  company                   String? // Added missing company field
  skills                    String[]
  bio                       String?
  profilePictureUrl         String?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  earnedBadges              String[]
  interviewCredits          Int?
  isDistinguished           Boolean?
  shortBio                  String?
  university                String?
  streakFreezes             Int?
  referralCode              String?                @unique
  challengeTopics           String[]
  challengeProgress         Json?
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  userApiKey                String?
  careerInterests           String?
  interests                 String[]
  wallet                    Wallet?
  activities                Activity[]
  mockInterviewSessions     MockInterviewSession[]
  createdQuestions          InterviewQuestion[]
  jobOpenings               JobOpening[]
  jobApplications           JobApplication[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  resumeProfiles            ResumeProfile[]
  resumeScanHistories       ResumeScanHistory[]
  affiliateProfile          Affiliate?
  createdCompanies          ProductCompany[]
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  domain           String?
  createdAt        DateTime          @default(now())
  users            User[]
  jobOpenings      JobOpening[]
  jobApplications  JobApplication[]
  resumeProfiles   ResumeProfile[]
  scanHistories    ResumeScanHistory[]
  communityPosts   CommunityPost[]
  surveys          Survey[]
  surveyResponses  SurveyResponse[]
  appointments     Appointment[]
  galleryEvents    GalleryEvent[]
  announcements    Announcement[]
  settings         TenantSettings?
}

model TenantSettings {
  id                        String  @id @default(cuid())
  tenantId                  String  @unique
  tenant                    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup         Boolean @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  user          User?   @relation(fields: [userId], references: [id])
  userId        String?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json? // Store as JSON for flexibility: { amount: number, expires: date }[]
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String // "Pending", "Confirmed", "Cancelled", "Completed"
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    DateTime?
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  createdBy      String
  user           User      @relation(fields: [createdBy], references: [id])
  approved       Boolean?
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
  baseScore      Int?
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Int?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  votedBy          String[]
  registeredBy     String[]
  comments         CommunityComment[] @relation("CommunityPostComments")
}

model CommunityComment {
  id          String       @id @default(cuid())
  postId      String?
  post        CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost?    @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime     @default(now())
  comment     String
  parentId    String?
  parent      CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[] @relation("Replies")
}


model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                   String   @id @default(cuid())
  tenantId             String
  tenant               Tenant   @relation(fields: [tenantId], references: [id])
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  resumeId             String
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime @default(now())
  matchScore           Int?
  bookmarked           Boolean?
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  createdAt   DateTime         @default(now())
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  name            String
  email           String
  status          String // "pending", "approved", "rejected"
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clicks          AffiliateClick[]
  signups         AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model ResumeTemplate {
  id               String  @id @default(cuid())
  name             String
  description      String
  previewImageUrl  String
  category         String
  dataAiHint       String?
  content          String
  headerColor      String?
  bodyColor        String?
  headerFontSize   String?
  textAlign        String?
  layout           String?
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model PlatformSettings {
  id                            String  @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean @default(false)
  communityFeedEnabled          Boolean @default(true)
  autoModeratePosts             Boolean @default(true)
  jobBoardEnabled               Boolean @default(true)
  maxJobPostingDays             Int     @default(30)
  gamificationEnabled           Boolean @default(true)
  xpForLogin                    Int     @default(10)
  xpForNewPost                  Int     @default(20)
  resumeAnalyzerEnabled         Boolean @default(true)
  aiResumeWriterEnabled         Boolean @default(true)
  coverLetterGeneratorEnabled   Boolean @default(true)
  mockInterviewEnabled          Boolean @default(true)
  referralsEnabled              Boolean @default(true)
  affiliateProgramEnabled       Boolean @default(true)
  alumniConnectEnabled          Boolean @default(true)
  defaultAppointmentCost        Int     @default(10)
  featureRequestsEnabled        Boolean @default(true)
  allowTenantCustomBranding     Boolean @default(true)
  allowTenantEmailCustomization Boolean @default(false)
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String  @default("alumni_only")
  maxResumeUploadsPerUser       Int     @default(5)
  defaultTheme                  String  @default("light")
  enablePublicProfilePages      Boolean @default(false)
  sessionTimeoutMinutes         Int     @default(60)
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean? @default(true)
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?
  status         String // 'Draft', 'Published', 'Archived'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id           String    @id @default(cuid())
  code         String    @unique
  description  String
  rewardType   String
  rewardValue  Int
  expiresAt    DateTime?
  usageLimit   Int
  timesUsed    Int       @default(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
}
