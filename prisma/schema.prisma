// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Language {
  code String @id
  name String
}

model Tenant {
  id                      String                    @id @default(cuid())
  name                    String
  domain                  String?                   @unique
  createdAt               DateTime                  @default(now())
  users                   User[]
  settings                TenantSettings?
  jobOpenings             JobOpening[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  jobApplications         JobApplication[]
  communityPosts          CommunityPost[]
  appointments            Appointment[]
  activities              Activity[]
  galleryEvents           GalleryEvent[]
  announcements           Announcement[]
  promoCodes              PromoCode[]
  surveys                 Survey[]
  surveyResponses         SurveyResponse[]
  featureRequests         FeatureRequest[]
  blogPosts               BlogPost[]
  mockInterviewSessions   MockInterviewSession[]
  interviewQuestions      InterviewQuestion[]
  userPromoCodeRedemptions UserPromoCodeRedemption[]
  emailTemplates          EmailTemplate[]
}

model TenantSettings {
  id                  String       @id @default(cuid())
  tenantId            String       @unique
  allowPublicSignup   Boolean      @default(true)
  customLogoUrl       String?
  primaryColor        String?
  accentColor         String?
  features            Json?
  emailTemplates      Json?
  enableSso           Boolean      @default(false)
  ssoProvider         String?
  ssoClientId         String?
  ssoClientSecret     String?
  tenant              Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model User {
  id                               String                    @id @default(cuid())
  tenantId                         String
  name                             String
  email                            String                    @unique
  password                         String
  role                             String                    @default("user")
  status                           String                    @default("active")
  lastLogin                        DateTime?
  createdAt                        DateTime                  @default(now())
  updatedAt                        DateTime                  @updatedAt
  sessionId                        String?
  dateOfBirth                      String?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           Json?
  areasOfSupport                   Json?
  timeCommitment                   String?
  preferredEngagementMode          String?
  otherComments                    String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?
  featureInSpotlightConsent        Boolean?
  profilePictureUrl                String?
  resumeText                       String?
  careerInterests                  String?
  bio                              String?
  interests                        Json?
  userApiKey                       String?
  xpPoints                         Int?                      @default(0)
  dailyStreak                      Int?                      @default(0)
  longestStreak                    Int?                      @default(0)
  totalActiveDays                  Int?                      @default(0)
  weeklyActivity                   Json?
  referralCode                     String?                   @unique
  earnedBadges                     Json?
  interviewCredits                 Int?                      @default(5)
  isDistinguished                  Boolean?                  @default(false)
  challengeTopics                  Json?
  challengeProgress                Json?
  completedChallengeIds            Json?
  completedFlipTaskIds             Json?
  currentFlipChallenge             Json?
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json?
  streakFreezes                    Int?                      @default(1)
  emailNotificationsEnabled        Boolean?                  @default(true)
  appNotificationsEnabled          Boolean?                  @default(true)
  gamificationNotificationsEnabled Boolean?                  @default(true)
  referralNotificationsEnabled     Boolean?                  @default(true)
  dashboardWidgets                 Json?
  tenant                           Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  resumeProfiles                   ResumeProfile[]
  resumeScanHistories              ResumeScanHistory[]
  jobApplications                  JobApplication[]
  postedJobOpenings                JobOpening[]
  communityPosts                   CommunityPost[]
  communityComments                CommunityComment[]
  requesterAppointments            Appointment[]             @relation("RequesterAppointments")
  alumniAppointments               Appointment[]             @relation("AlumniAppointments")
  activities                       Activity[]
  createdGalleryEvents             GalleryEvent[]
  attendedGalleryEvents            GalleryEvent[]            @relation("EventAttendees")
  createdAnnouncements             Announcement[]
  promoCodeRedemptions             UserPromoCodeRedemption[]
  referralHistory                  ReferralHistory[]
  affiliateProfile                 Affiliate?
  createdMockInterviewSessions     MockInterviewSession[]
  createdInterviewQuestions        InterviewQuestion[]
  notifications                    Notification[]
  sentNominations                  Nomination[]              @relation("Nominator")
  receivedNominations              Nomination[]              @relation("Nominee")
  votes                            Vote[]
  awardWins                        Award[]
}

model ResumeProfile {
  id           String                @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String                @db.Text
  lastAnalyzed DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant       Tenant                @relation(fields: [tenantId], references: [id])
  scanHistory  ResumeScanHistory[]
  deletedAt    DateTime?
}

model ResumeScanHistory {
  id                 String        @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String        @db.Text
  jobDescriptionText String        @db.Text
  scanDate           DateTime      @default(now())
  matchScore         Int?
  bookmarked         Boolean?      @default(false)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant             Tenant        @relation(fields: [tenantId], references: [id])
  resumeProfile      ResumeProfile @relation(fields: [resumeId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String   @db.Text
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  postedBy         User     @relation(fields: [postedByAlumniId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              Json?
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?     @db.Text
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  interviews         Interview[]
}

model Interview {
  id                 String         @id @default(cuid())
  jobApplicationId   String
  date               DateTime
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              Json?
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model CommunityPost {
  id                String              @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime            @default(now())
  content           String?             @db.Text
  type              String
  tags              Json?
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  flagReasons       String[]
  likes             Int?                @default(0)
  likedBy           String[]
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
  flaggedBy         String[]
  isPinned          Boolean?            @default(false)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant              @relation(fields: [tenantId], references: [id])
  comments          CommunityComment[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  blogPostId String?
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String         @db.Text
  parentId   String?
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  timestamp   DateTime @default(now())
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       Json?
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?  @default(false)
  location        String?
  approved        Boolean?  @default(false)
  createdByUserId String
  attendeeUserIds String[]
  deletedAt       DateTime?
  creator         User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  attendees       User[]    @relation("EventAttendees")
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String    @db.Text
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
  deletedAt      DateTime?
  creator        User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
}

model PromoCode {
  id          String    @id @default(cuid())
  tenantId    String?
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  redemptions UserPromoCodeRedemption[]
  tenant      Tenant?   @relation(fields: [tenantId], references: [id])
}

model UserPromoCodeRedemption {
  id          String    @id @default(cuid())
  userId      String
  promoCodeId String
  redeemedAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  tenantId    String

  @@unique([userId, promoCodeId])
}

model Survey {
  id          String           @id @default(cuid())
  tenantId    String
  name        String           @unique
  description String?
  steps       Json
  createdAt   DateTime         @default(now())
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String   @db.Text
  status      String
  upvotes     Int?     @default(0)
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String             @db.Text
  excerpt      String
  tags         Json
  bookmarkedBy String[]
  comments     CommunityComment[]
  tenant       Tenant             @relation(fields: [tenantId], references: [id])
}

model MockInterviewSession {
  id                  String               @id @default(cuid())
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime             @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  Json?
  recordingReferences Json?
  tenantId            String
  tenant              Tenant               @relation(fields: [tenantId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String    @db.Text
  isMCQ           Boolean?  @default(false)
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String    @db.Text
  tags            Json?
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String
  approved        Boolean?  @default(true)
  createdAt       DateTime  @default(now())
  bookmarkedBy    String[]
  tenantId        String
  creator         User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
}

model PlatformSettings {
  id                             String   @id @default(cuid())
  platformName                   String
  maintenanceMode                Boolean
  communityFeedEnabled           Boolean
  autoModeratePosts              Boolean
  jobBoardEnabled                Boolean
  maxJobPostingDays              Int
  gamificationEnabled            Boolean
  xpForLogin                     Int
  xpForNewPost                   Int
  resumeAnalyzerEnabled          Boolean
  aiResumeWriterEnabled          Boolean
  coverLetterGeneratorEnabled    Boolean
  mockInterviewEnabled           Boolean
  referralsEnabled               Boolean
  affiliateProgramEnabled        Boolean
  alumniConnectEnabled           Boolean
  defaultAppointmentCost         Int
  featureRequestsEnabled         Boolean
  allowTenantCustomBranding      Boolean
  allowTenantEmailCustomization  Boolean
  allowUserApiKey                Boolean? @default(true)
  defaultProfileVisibility       String
  maxResumeUploadsPerUser        Int
  defaultTheme                   String
  enablePublicProfilePages       Boolean
  sessionTimeoutMinutes          Int
  maxEventRegistrationsPerUser   Int?
  globalAnnouncement             String?
  pointsForAffiliateSignup       Int?
  walletEnabled                  Boolean? @default(true)
  aiMockInterviewCost            Int      @default(25)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  currency    String   @default("coins") // 'coins' or 'xp'
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model ReferralHistory {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referredUserId      String?
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String
  rewardAmount        Int?
  referrer            User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  email            String
  status           String
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  commissionTierId String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissionTier   CommissionTier?   @relation(fields: [commissionTierId], references: [id])
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  newUserId          String    @unique
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String      @unique
  milestoneRequirement Int // Number of signups to reach this tier
  commissionRate       Float // e.g., 0.15 for 15%
  affiliates           Affiliate[]
}

model ResumeTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String    @db.Text
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
  deletedAt       DateTime?
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String      @id @default(cuid())
  title               String
  description         String
  categoryId          String
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String
  winnerId            String?
  winner              User?       @relation(fields: [winnerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominations         Nomination[]
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  nomineeId     String
  nominatorId   String
  justification String
  createdAt     DateTime @default(now())
  award         Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nominee       User     @relation("Nominee", fields: [nomineeId], references: [id], onDelete: Cascade)
  nominator     User     @relation("Nominator", fields: [nominatorId], references: [id], onDelete: Cascade)
  votes         Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  voterId      String
  createdAt    DateTime   @default(now())
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voter        User       @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([nominationId, voterId])
}

model EmailTemplate {
  id        String            @id @default(cuid())
  tenantId  String
  type      EmailTemplateType
  subject   String
  body      String            @db.Text
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  tenant    Tenant            @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, type])
}

enum EmailTemplateType {
  WELCOME
  APPOINTMENT_CONFIRMATION
  PASSWORD_RESET
}
