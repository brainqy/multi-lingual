// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model Translation {
  id           String   @id @default(cuid())
  key          String
  languageCode String
  value        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  page         String   @default("common")

  @@unique([key, languageCode, page])
}

model User {
  id                           String                 @id @default(cuid())
  tenantId                     String
  tenant                       Tenant                 @relation(fields: [tenantId], references: [id])
  name                         String
  email                        String                 @unique
  password                     String?
  role                         String                 @default("user") // admin, manager, user
  status                       String?                @default("active") // active, inactive, pending, suspended
  lastLogin                    DateTime?
  createdAt                    DateTime               @default(now())
  sessionId                    String?
  dateOfBirth                  DateTime?
  gender                       String?
  mobileNumber                 String?
  currentAddress               String?
  graduationYear               String?
  degreeProgram                String?
  department                   String?
  currentJobTitle              String?
  currentOrganization          String?
  industry                     String?
  workLocation                 String?
  linkedInProfile              String?
  yearsOfExperience            String?
  skills                       String[]
  areasOfSupport               String[]
  timeCommitment               String?
  preferredEngagementMode      String?
  otherComments                String?
  lookingForSupportType        String?
  helpNeededDescription        String?
  shareProfileConsent          Boolean?
  featureInSpotlightConsent    Boolean?
  profilePictureUrl            String?
  resumeText                   String?
  careerInterests              String?
  bio                          String?
  interests                    String[]
  userApiKey                   String?
  offersHelpWith               String[]
  appointmentCoinCost          Int?
  xpPoints                     Int?
  dailyStreak                  Int?
  longestStreak                Int?
  totalActiveDays              Int?
  weeklyActivity               Boolean[]
  referralCode                 String?                @unique
  earnedBadges                 String[]
  affiliateCode                String?                @unique
  pastInterviewSessions        String[]
  interviewCredits             Int?
  isDistinguished              Boolean?
  challengeTopics              String[]
  challengeProgress            Json?
  streakFreezes                Int?
  wallet                       Wallet?
  activities                   Activity[]
  mockInterviewSessions        MockInterviewSession[]
  resumeProfiles               ResumeProfile[]
  jobApplications              JobApplication[]
  resumeScanHistories          ResumeScanHistory[]
  createdAppointments          Appointment[]          @relation("RequesterAppointments")
  alumniAppointments           Appointment[]          @relation("AlumniAppointments")
  jobOpenings                  JobOpening[]
  affiliateProfile             Affiliate?
  communityPosts               CommunityPost[]
  communityComments            CommunityComment[]
  blogPosts                    BlogPost[]
  featureRequests              GalleryEvent[]
  galleryEvents                FeatureRequest[]
  surveys                      Survey[]
  surveyResponses              SurveyResponse[]
  createdAnnouncements         Announcement[]
  promoCodeRedemptions         PromoCode[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  settings  TenantSettings?
  users     User[]
  jobOpenings JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  appointments Appointment[]
  communityPosts CommunityPost[]
  surveys Survey[]
  surveyResponses SurveyResponse[]
  announcements Announcement[]
  activities Activity[]
}

model TenantSettings {
  id                            String   @id @default(cuid())
  tenantId                      String   @unique
  tenant                        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup             Boolean  @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  emailTemplates                Json?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String                @id @default(cuid())
  tenantId     String
  tenant       Tenant                @relation(fields: [tenantId], references: [id])
  userId       String
  user         User                  @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  scanHistory  ResumeScanHistory[]
}

model ResumeScanHistory {
  id                 String        @id @default(cuid())
  tenantId           String
  tenant             Tenant        @relation(fields: [tenantId], references: [id])
  userId             String
  user               User          @relation(fields: [userId], references: [id])
  resumeId           String
  resumeProfile      ResumeProfile @relation(fields: [resumeId], references: [id])
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime      @default(now())
  matchScore         Int?
  bookmarked         Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}

model MockInterviewSession {
  id                  String                 @id @default(cuid())
  userId              String
  user                User                   @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime               @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Float?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  user         User               @relation(fields: [userId], references: [id])
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[] @relation("CommunityPostComments")
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
}

model GalleryEvent {
  id                String   @id @default(cuid())
  tenantId          String
  user              User     @relation(fields: [createdByUserId], references: [id])
  title             String
  date              DateTime
  imageUrls         String[]
  description       String?
  dataAiHint        String?
  isPlatformGlobal  Boolean?
  location          String?
  approved          Boolean? @default(false)
  createdByUserId   String
  attendeeUserIds   String[]
}

model Survey {
  id        String           @id @default(cuid())
  tenantId  String
  user      User             @relation(fields: [userId], references: [id])
  userId    String?
  name      String           @unique
  description String?
  steps     Json
  createdAt DateTime         @default(now())
  responses SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

model Announcement {
  id             String   @id @default(cuid())
  tenantId       String?
  tenant         Tenant?  @relation(fields: [tenantId], references: [id])
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  creator        User     @relation(fields: [createdBy], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  redeemedBy  User[]
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String    @unique
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model Badge {
  id                 String  @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String?
  approved        Boolean? @default(false)
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
}
