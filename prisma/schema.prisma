// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                @id @default(cuid())
  name                           String
  email                          String                @unique
  password                       String?
  role                           String                @default("user")
  status                         String                @default("pending") // The user's status, e.g., active, pending
  tenantId                       String
  tenant                         Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lastLogin                      DateTime?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  dateOfBirth                    String?
  gender                         String?
  mobileNumber                   String?
  currentAddress                 String?
  graduationYear                 String?
  degreeProgram                  String?
  department                     String?
  company                        String?
  currentOrganization            String?
  industry                       String?
  workLocation                   String?
  linkedInProfile                String?
  yearsOfExperience              String?
  skills                         Json?
  areasOfSupport                 Json?
  timeCommitment                 String?
  preferredEngagementMode        String?
  otherComments                  String?
  lookingForSupportType          String?
  helpNeededDescription          String?
  shareProfileConsent            Boolean?
  featureInSpotlightConsent      Boolean?
  interests                      Json?
  offersHelpWith                 Json?
  careerInterests                String?
  userApiKey                     String?
  challengeTopics                Json?
  challengeProgress              Json?
  referralCode                   String?               @unique
  profilePictureUrl              String?
  xpPoints                       Int?                  @default(0)
  dailyStreak                    Int?                  @default(0)
  longestStreak                  Int?                  @default(0)
  totalActiveDays                Int?                  @default(0)
  weeklyActivity                 Json?
  earnedBadges                   Json?
  interviewCredits               Int?                  @default(5)
  isDistinguished                Boolean?              @default(false)
  sessionId                      String?               @unique
  affiliateProfile               Affiliate?
  referralHistory                ReferralHistoryItem[]
  wallet                         Wallet?
  appointmentsAsRequester        Appointment[]         @relation("Requester")
  appointmentsAsAlumni           Appointment[]         @relation("Alumni")
  jobApplications                JobApplication[]
  resumeProfiles                 ResumeProfile[]
  resumeScanHistory              ResumeScanHistoryItem[]
  featureRequests                FeatureRequest[]
  communityPosts                 CommunityPost[]
  comments                       CommunityComment[]
  createdAnnouncements           Announcement[]
  activities                     Activity[]
  createdInterviewQuestions      InterviewQuestion[]
  affiliateSignups               AffiliateSignup[]       @relation("ReferringUser")
  referredBySignup               AffiliateSignup?        @relation("NewUserSignup")
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                      String   @id @default(cuid())
  tenantId                String   @unique
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup       Boolean  @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
  emailTemplates          Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model JobApplication {
  id                 String      @id @default(cuid())
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId           String
  companyName        String
  jobTitle           String
  status             String      @default("Saved")
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId     String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistoryItem {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId            String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
  resumeTextSnapshot  String
  jobDescriptionText  String
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("Requester", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("Alumni", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String   @default("Pending")
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model ReferralHistoryItem {
  id                 String   @id @default(cuid())
  referrerUserId     String
  referrerUser       User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
  referredEmailOrName String
  referralDate       DateTime @default(now())
  status             String
  rewardAmount       Int?
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  email           String
  status          String            @default("pending")
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float             @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clicks          AffiliateClick[]
  signups         AffiliateSignup[] @relation("AffiliateSignups")
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation("AffiliateSignups", fields: [affiliateId], references: [id], onDelete: Cascade)
  referringUserId    String
  referringUser      User      @relation("ReferringUser", fields: [referringUserId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int                @default(0)
  comments          CommunityComment[]
  bookmarkedBy      String[]
}

model CommunityComment {
  id         String        @id @default(cuid())
  postId     String
  post       CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  timestamp  DateTime      @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String   @default("Pending")
  upvotes     Int      @default(0)
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByUserId  String
  createdBy      User      @relation(fields: [createdByUserId], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  description String
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?  @default(false)
  mcqOptions      Json?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdByUserId String
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
  approved        Boolean?  @default(false)
  createdAt       DateTime  @default(now())
  bookmarkedBy    String[]
  baseScore       Int?
}

model MockInterviewSession {
  id                 String              @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json
  answers            MockInterviewAnswer[]
  overallFeedback    Json?
  overallScore       Int?
  status             String
  createdAt          DateTime            @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                    String             @id @default(cuid())
  sessionId             String
  session               MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId            String
  questionText          String
  userAnswer            String
  aiFeedback            String?
  aiScore               Int?
  strengths             Json?
  areasForImprovement   Json?
  suggestedImprovements Json?
  isRecording           Boolean?
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     Json?
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String
  lastGenerated           DateTime?
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model Word {
  id        String        @id @default(cuid())
  text      String
  language  Language      @relation(fields: [languageId], references: [id])
  languageId String
  translations Translation[] @relation("OriginalWord")
}

model Translation {
  id              String @id @default(cuid())
  originalWord    Word   @relation("OriginalWord", fields: [originalWordId], references: [id])
  originalWordId  String
  translatedWord  String
  language        Language @relation(fields: [languageId], references: [id])
  languageId      String
  qualityScore    Float?
}

    