
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  name                   String
  password               String?
  role                   UserRole  @default(user)
  profilePictureUrl      String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  tenantId               String
  tenant                 Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionId              String?
  lastLogin              DateTime?
  dailyStreak            Int?      @default(0)
  longestStreak          Int?      @default(0)
  lastStreakCheck        DateTime?
  xpPoints               Int?      @default(0)
  earnedBadges           String[]
  challengeTopics        String[]
  completedChallengeIds  String[]
  currentFlipChallenge   Json?
  flipChallengeAssignedAt DateTime?
  flipChallengeProgressStart Json?
  challengeProgress      Json?
  dateOfBirth            String?
  gender                 String?
  mobileNumber           String?
  currentAddress         String?
  graduationYear         String?
  degreeProgram          String?
  department             String?
  currentJobTitle        String?
  currentOrganization    String?
  industry               String?
  workLocation           String?
  linkedInProfile        String?
  yearsOfExperience      String?
  skills                 String[]
  areasOfSupport         String[]
  timeCommitment         String?
  preferredEngagementMode String?
  otherComments          String?
  lookingForSupportType  String?
  helpNeededDescription  String?
  shareProfileConsent    Boolean?  @default(true)
  featureInSpotlightConsent Boolean? @default(false)
  resumeText             String?
  careerInterests        String?
  bio                    String?
  userApiKey             String?
  interests              String[]
  isDistinguished        Boolean?  @default(false)
  appointmentCoinCost    Int?
  referralCode           String?   @unique
  streakFreezes          Int?      @default(0)
  emailNotificationsEnabled Boolean? @default(true)
  appNotificationsEnabled  Boolean? @default(true)
  gamificationNotificationsEnabled Boolean? @default(true)
  referralNotificationsEnabled Boolean? @default(true)
  dashboardWidgets       Json?
  status                 UserStatus? @default(active)

  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  notifications           Notification[]
  activities              Activity[]
  appointmentsAsRequester Appointment[]         @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[]         @relation("AlumniAppointments")
  referralHistory         ReferralHistory[]
  affiliate               Affiliate?
  affiliateSignups        AffiliateSignup[]
  nominationsAsNominator  Nomination[]          @relation("Nominator")
  nominationsAsNominee    Nomination[]          @relation("Nominee")
  votes                   Vote[]
  awardWinner             Award[]
  galleryEventsCreated    GalleryEvent[]
  surveyResponses         SurveyResponse[]
  promoCodeRedemptions    UserPromoCodeRedemption[]
}

enum UserRole {
  user
  manager
  admin
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  PENDING_DELETION
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
  jobOpenings JobOpening[]
  jobApplications JobApplication[]
  appointments Appointment[]
  announcements Announcement[]
  galleryEvents GalleryEvent[]
  communityPosts CommunityPost[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  promoCodes PromoCode[]
  referralHistory ReferralHistory[]
  surveys Survey[]
  surveyResponses SurveyResponse[]
  activities Activity[]
}

model TenantSettings {
  id               String  @id @default(cuid())
  tenantId         String  @unique
  tenant           Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup Boolean @default(true)
  customLogoUrl    String?
  primaryColor     String?
  accentColor      String?
  features         Json?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String?
  targetRole   UserRole?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  content           String?
  type              String             @default("text")
  imageUrl          String?
  tags              String[]
  moderationStatus  String             @default("visible")
  flagCount         Int?
  flagReasons       String[]
  flaggedBy         String[]
  likes             Int?               @default(0)
  likedBy           String[]
  isPinned          Boolean?           @default(false)
  timestamp         DateTime           @default(now())
  comments          CommunityComment[]
  pollOptions       Json?
  votedBy           String[]
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  registeredBy      String[]
  assignedTo        String?
  status            String?
}

model CommunityComment {
  id          String         @id @default(cuid())
  postId      String?
  post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  comment     String
  timestamp   DateTime       @default(now())
  parentId    String?
  parent      CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[] @relation("CommentReplies")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  timestamp   DateTime @default(now())
}

model JobApplication {
  id                 String       @id @default(cuid())
  userId             String
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId           String
  tenant             Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  applicationUrl     String?
  salary             String?
  resumeIdUsed       String?
  coverLetterText    String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  interviews         Interview[]
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  notes            String?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String
  notes           String?
  withUser        String
  costInCoins     Int
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
}

model ResumeProfile {
  id            String              @id @default(cuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId      String
  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  resumeText    String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  lastAnalyzed  DateTime?
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  scanDate            DateTime @default(now())
  matchScore          Int?
  resumeTextSnapshot  String
  jobDescriptionText  String
  bookmarked          Boolean? @default(false)
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  applicationLink  String?
  postedByAlumniId String?
  alumniName       String?
}

// Gamification Models
model Badge {
  id                  String  @id @default(cuid())
  name                String  @unique
  description         String
  icon                String
  xpReward            Int?
  triggerCondition    String?
  streakFreezeReward  Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

// Wallet and Transaction Models
model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  type        String // 'credit' or 'debit'
  currency    String // 'coins' or 'xp'
  date        DateTime @default(now())
}

// Referral and Affiliate Models
model ReferralHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  referrerUserId      String
  referrerUser        User     @relation(fields: [referrerUserId], references: [id])
  referredEmailOrName String
  status              String
  rewardAmount        Int?
  referralDate        DateTime @default(now())
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id])
  name             String
  email            String
  status           String
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
  commissionTierId String
  commissionTier   CommissionTier    @relation(fields: [commissionTierId], references: [id])
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  userAgent         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String    @unique
  newUser          User      @relation(fields: [newUserId], references: [id])
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String      @unique
  milestoneRequirement Int // Number of signups needed to reach this tier
  commissionRate       Float // e.g., 0.15 for 15%
  affiliates           Affiliate[]
}

// Awards and Recognition Models
model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String
  winnerId            String?      @unique
  winner              User?        @relation(fields: [winnerId], references: [id])
  nominations         Nomination[]
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Nomination {
  id          String   @id @default(cuid())
  awardId     String
  award       Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId   String
  nominee     User     @relation("Nominee", fields: [nomineeId], references: [id])
  nominatorId String
  nominator   User     @relation("Nominator", fields: [nominatorId], references: [id])
  justification String
  createdAt   DateTime @default(now())
  votes       Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId      String
  voter        User       @relation(fields: [voterId], references: [id])

  @@unique([nominationId, voterId])
}

// Gallery Model
model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  createdByUserId String
  createdByUser   User     @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
  approved        Boolean? @default(false)
  isPlatformGlobal Boolean? @default(false)
  deletedAt       DateTime?
}

// Promo Code Model
model PromoCode {
  id           String                    @id @default(cuid())
  tenantId     String
  tenant       Tenant                    @relation(fields: [tenantId], references: [id])
  code         String                    @unique
  description  String
  rewardType   String
  rewardValue  Int
  expiresAt    DateTime?
  usageLimit   Int                       @default(0) // 0 for unlimited
  timesUsed    Int                       @default(0)
  isActive     Boolean                   @default(true)
  createdAt    DateTime                  @default(now())
  redemptions  UserPromoCodeRedemption[]
  deletedAt    DateTime?
}

model UserPromoCodeRedemption {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  redeemedAt  DateTime @default(now())

  @@unique([userId, promoCodeId])
}

// Survey Models
model Survey {
  id           String           @id @default(cuid())
  name         String           @unique
  description  String
  tenantId     String
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  createdAt    DateTime         @default(now())
  steps        Json
  responses    SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyName   String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

// Generic Models for Admin
model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id           String   @id @default(cuid())
  title        String
  description  String
  category     String
  difficulty   String
  xpReward     Int?
  type         String
  solution     String?
  tasks        Json?
  createdAt    DateTime @default(now())
}
model Announcement {
  id             String    @id @default(cuid())
  tenantId       String
  tenant         Tenant    @relation(fields: [tenantId], references: [id])
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // e.g., 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?   // e.g., tenantId or role name
  status         String    // e.g., 'Draft', 'Published', 'Archived'
  createdBy      String
  createdByUser  User      @relation(fields: [createdBy], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}

// For Mock Interviews and Interview Prep
model MockInterviewSession {
  id                   String     @id @default(cuid())
  userId               String
  user                 User       @relation(fields: [userId], references: [id])
  tenantId             String?
  topic                String
  description          String?
  jobDescription       String?
  status               String // 'pending', 'in-progress', 'completed', 'cancelled'
  createdAt            DateTime   @default(now())
  questions            Json?
  answers              Json?
  overallFeedback      Json?
  overallScore         Int?
  timerPerQuestion     Int?
  difficulty           String?
  questionCategories   String[]
  recordingReferences  Json?
  interviewerScores    Json?
  finalScore           Json?
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  questionText   String
  category       String
  difficulty     String?
  isMCQ          Boolean?  @default(false)
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  approved       Boolean?  @default(true)
  createdBy      String?
  createdAt      String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  bookmarkedBy   String[]
  baseScore      Int?
}

model ResumeTemplate {
  id               String    @id @default(cuid())
  name             String
  description      String
  previewImageUrl  String
  category         String
  dataAiHint       String?
  content          String
  headerColor      String?
  bodyColor        String?
  headerFontSize   String?
  textAlign        String?
  deletedAt        DateTime?
}

// For i18n
model Language {
  code String @id
  name String
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String   @unique
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmailTemplate {
  id        String            @id @default(cuid())
  tenantId  String
  type      EmailTemplateType
  subject   String
  body      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([tenantId, type])
}

enum EmailTemplateType {
  WELCOME
  TENANT_WELCOME
  APPOINTMENT_CONFIRMATION
  PASSWORD_RESET
}
