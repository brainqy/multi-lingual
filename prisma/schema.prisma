// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                 @unique
  password                  String?
  role                      String
  status                    String?
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  sessionId                 String?
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?
  earnedBadges              String[]
  affiliateCode             String?
  pastInterviewSessions     String[]
  interviewCredits          Int?
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  streakFreezes             Int?
  wallet                    Wallet?
  activities                Activity[]
  mockInterviewSessions     MockInterviewSession[]
  resumeProfiles            ResumeProfile[]
  scanHistories             ResumeScanHistoryItem[]
  jobOpenings               JobOpening[]
  jobApplications           JobApplication[]
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  affiliateProfile          Affiliate?
  createdQuestions          InterviewQuestion[]
  announcements             Announcement[]
  galleryEvents             GalleryEvent[]

  // Corrected relations for ReferralHistoryItem
  referralsMade     ReferralHistoryItem[] @relation("ReferrerHistory")
  referralsReceived ReferralHistoryItem[] @relation("ReferredHistory")

  @@index([tenantId])
}

model Tenant {
  id                String              @id @default(cuid())
  name              String
  domain            String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  settings          TenantSettings?
  jobOpenings       JobOpening[]
  jobApplications   JobApplication[]
  communityPosts    CommunityPost[]
  announcements     Announcement[]
  galleryEvents     GalleryEvent[]
  activities        Activity[]
  resumeProfiles    ResumeProfile[]
  scanHistories     ResumeScanHistoryItem[]
  surveys           Survey[]
  surveyResponses   SurveyResponse[]
  appointments      Appointment[]
  productCompanies  ProductCompany[]
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model ProductCompany {
  id              String   @id @default(cuid())
  name            String
  location        String
  websiteUrl      String
  domain          String
  hrName          String?
  hrEmail         String?
  contactNumber   String?
  logoUrl         String?
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  userId          String? // Assuming a user might be a contact for a company
  user            User?    @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json? // Using Json for flexible structure
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([walletId])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([tenantId])
  @@index([postedByAlumniId])
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([jobApplicationId])
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?

  @@index([userId])
}

model MockInterviewAnswer {
  id                      String               @id @default(cuid())
  sessionId               String
  session                 MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId              String
  questionText            String
  userAnswer              String
  aiFeedback              String?
  aiScore                 Int?
  strengths               String[]
  areasForImprovement     String[]
  suggestedImprovements   String[]
  isRecording             Boolean?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt

  @@index([sessionId])
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  comments         CommunityComment[] @relation("CommunityPostComments")
  bookmarkedBy     String[]
  votedBy          String[]
  registeredBy     String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([tenantId])
  @@index([userId])
}

model CommunityComment {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime     @default(now())
  comment    String
  postId     String?
  post       CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?    @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([userId])
  @@index([postId])
  @@index([blogPostId])
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  name            String
  email           String
  status          String
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float             @default(0)
  clicks          AffiliateClick[]
  signups         AffiliateSignup[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([affiliateId])
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([affiliateId])
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReferralHistoryItem {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referrer            User     @relation("ReferrerHistory", fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String
  rewardAmount        Int?
  referredUserId      String?
  referred            User?    @relation("ReferredHistory", fields: [referredUserId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([referrerUserId])
  @@index([referredUserId])
}

model Badge {
  id                 String  @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlatformSettings {
  id                             String   @id @default(cuid())
  platformName                   String
  maintenanceMode                Boolean
  communityFeedEnabled           Boolean
  autoModeratePosts              Boolean
  jobBoardEnabled                Boolean
  maxJobPostingDays              Int
  gamificationEnabled            Boolean
  xpForLogin                     Int
  xpForNewPost                   Int
  resumeAnalyzerEnabled          Boolean
  aiResumeWriterEnabled          Boolean
  coverLetterGeneratorEnabled    Boolean
  mockInterviewEnabled           Boolean
  referralsEnabled               Boolean
  affiliateProgramEnabled        Boolean
  alumniConnectEnabled           Boolean
  defaultAppointmentCost         Int
  featureRequestsEnabled         Boolean
  allowTenantCustomBranding      Boolean
  allowTenantEmailCustomization  Boolean
  allowUserApiKey                Boolean?
  defaultProfileVisibility       String
  maxResumeUploadsPerUser        Int
  defaultTheme                   String
  enablePublicProfilePages       Boolean
  sessionTimeoutMinutes          Int
  maxEventRegistrationsPerUser   Int?
  globalAnnouncement             String?
  pointsForAffiliateSignup       Int?
  walletEnabled                  Boolean?
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  responses   SurveyResponse[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([tenantId])
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([surveyId])
  @@index([tenantId])
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model ResumeTemplate {
  id                String  @id @default(cuid())
  name              String
  description       String
  previewImageUrl   String
  category          String
  dataAiHint        String?
  content           String
  headerColor       String?
  bodyColor         String?
  headerFontSize    String?
  textAlign         String?
  layout            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdBy      String
  user           User      @relation(fields: [createdBy], references: [id])
  tenantId       String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([createdBy])
  @@index([tenantId])
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?
  location        String?
  approved        Boolean?
  createdByUserId String?
  createdByUser   User?    @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId])
  @@index([createdByUserId])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId])
  @@index([requesterUserId])
  @@index([alumniUserId])
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  RoleSpecific
  Analytical
  HR
  Situational
  ProblemSolving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

model InterviewQuestion {
  id            String                      @id @default(cuid())
  category      InterviewQuestionCategory
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    InterviewQuestionDifficulty?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  user          User?                       @relation(fields: [createdBy], references: [id])
  approved      Boolean?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  bookmarkedBy  String[]

  @@index([createdBy])
}

    