// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String                  @id @default(cuid())
  tenantId                         String
  tenant                           Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name                             String
  email                            String                  @unique
  password                         String?
  role                             String                  @default("user") // e.g., 'user', 'manager', 'admin'
  status                           String                  @default("active") // e.g., 'active', 'inactive', 'pending'
  lastLogin                        DateTime?               @default(now())
  createdAt                        DateTime                @default(now())
  updatedAt                        DateTime                @updatedAt
  sessionId                        String?
  // Personal Info
  dateOfBirth                      String?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  // Academic Info
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  university                       String?
  // Professional Info
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  // Skills & Interests
  skills                           Json                    @default("[]")
  careerInterests                  String?
  bio                              String?
  interests                        Json                    @default("[]")
  // Engagement
  areasOfSupport                   Json                    @default("[]")
  timeCommitment                   String?
  preferredEngagementMode          String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  // Consents
  shareProfileConsent              Boolean?                @default(true)
  featureInSpotlightConsent        Boolean?                @default(false)
  // App-specific data
  profilePictureUrl                String?
  resumeText                       String?
  userApiKey                       String?
  // Gamification
  xpPoints                         Int?                    @default(0)
  dailyStreak                      Int?                    @default(0)
  longestStreak                    Int?                    @default(0)
  weeklyActivity                   Json?                   @default("[0,0,0,0,0,0,0]")
  referralCode                     String?                 @unique
  earnedBadges                     Json?                   @default("[]")
  interviewCredits                 Int?                    @default(5)
  isDistinguished                  Boolean?                @default(false)
  streakFreezes                    Int?                    @default(0)
  challengeTopics                  Json?                   @default("[]")
  challengeProgress                Json?
  completedChallengeIds            Json?                   @default("[]")
  completedFlipTaskIds             Json?                   @default("[]")
  currentFlipChallenge             Json?
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json?
  // Notification Preferences
  emailNotificationsEnabled        Boolean?                @default(true)
  appNotificationsEnabled          Boolean?                @default(true)
  gamificationNotificationsEnabled Boolean?                @default(true)
  referralNotificationsEnabled     Boolean?                @default(true)
  // Dashboard Customization
  dashboardWidgets                 Json?
  // Relations
  jobApplications                  JobApplication[]
  resumeProfiles                   ResumeProfile[]
  resumeScanHistories              ResumeScanHistory[]
  mockInterviewSessions            MockInterviewSession[]
  communityPosts                   CommunityPost[]
  communityComments                CommunityComment[]
  notifications                    Notification[]
  activities                       Activity[]
  requesterAppointments            Appointment[]           @relation("RequesterAppointments")
  alumniAppointments               Appointment[]           @relation("AlumniAppointments")
  referralHistory                  ReferralHistory[]
  affiliateProfile                 Affiliate?
  nominations                      Nomination[]            @relation("Nominee")
  nominationsMade                  Nomination[]            @relation("Nominator")
  votes                            Vote[]
  createdAwards                    Award[]
  createdGalleryEvents             GalleryEvent[]
  wallet                           Wallet?
  promoCodeRedemptions             UserPromoCodeRedemption[]

  @@index([tenantId])
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    User[]
  settings TenantSettings?
}

model TenantSettings {
  id                        String   @id @default(cuid())
  tenantId                  String   @unique
  tenant                    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup         Boolean  @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
  // Other tenant-specific settings can go here
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String // e.g., 'Full-time', 'Internship'
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              Json?       @default("[]")
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  interviews         Interview[]
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  notes            String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model ResumeScanHistory {
  id                  String    @id @default(cuid())
  tenantId            String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime  @default(now())
  matchScore          Int?
  bookmarked          Boolean?  @default(false)
}

model MockInterviewSession {
  id                   String        @id @default(cuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic                String
  description          String?
  jobDescription       String?
  questions            Json?
  answers              Json?
  overallFeedback      Json?
  overallScore         Int?
  status               String // e.g., 'pending', 'in-progress', 'completed'
  createdAt            DateTime      @default(now())
  timerPerQuestion     Int?
  difficulty           String?
  questionCategories   Json?         @default("[]")
  recordingReferences  Json?         @default("[]")
  finalScore           Json?
  interviewerScores    Json?
}

model CommunityPost {
  id                 String             @id @default(cuid())
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName           String
  userAvatar         String?
  timestamp          DateTime           @default(now())
  content            String?
  type               String // 'text', 'poll', 'event', 'request'
  tags               String[]
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?               @default(0)
  capacity           Int?               @default(0)
  assignedTo         String?
  status             String? // for requests: 'open', 'in progress', 'completed'
  moderationStatus   String // 'visible', 'flagged', 'removed'
  flagCount          Int                @default(0)
  flagReasons        Json?              @default("[]")
  likes              Int?               @default(0)
  isPinned           Boolean?           @default(false)
  comments           CommunityComment[]
  bookmarkedBy       String[]
  votedBy            String[]
  registeredBy       String[]
  likedBy            String[]
  flaggedBy          String[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  description String
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String // 'error', 'warning', 'info', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model PromotionalContent {
  id            String   @id @default(cuid())
  isActive      Boolean
  title         String
  description   String
  imageUrl      String
  imageAlt      String
  imageHint     String?
  buttonText    String
  buttonLink    String
  gradientFrom  String?
  gradientVia   String?
  gradientTo    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Badge {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?     @default(0)
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                 @default(0)
  flashCoins   Json?               @default("[]")
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  currency    String // 'coins' or 'xp'
}

model PromoCode {
  id          String   @id @default(cuid())
  tenantId    String?
  code        String   @unique
  description String
  rewardType  String // 'coins', 'xp', 'premium_days', etc.
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int      @default(0) // 0 for unlimited
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  redemptions UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode  @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime   @default(now())

  @@id([userId, promoCodeId])
}

model ReferralHistory {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referrer            User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
  referredUserId      String   @unique // Ensure one user can only be referred once
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount        Int?
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean?  @default(true)
  createdByUserId String
  createdByUser   User      @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
  deletedAt       DateTime?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean? @default(false)
  mcqOptions      Json?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?   @default(0)
  ratingsCount    Int?     @default(0)
  userComments    Json?
  userRatings     Json?
  createdBy       String?
  approved        Boolean? @default(true)
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
  baseScore       Int?
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  steps       Json
  tenantId    String?
  createdAt   DateTime @default(now())

  responses SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String // 'Draft', 'Nominating', 'Voting', 'Completed'
  winnerId            String?
  winner              User?        @relation(fields: [winnerId], references: [id])
  createdByUserId     String?
  createdByUser       User?        @relation("createdAwards", fields: [createdByUserId], references: [id])
  nominations         Nomination[]
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  award         Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId     String
  nominee       User     @relation("Nominee", fields: [nomineeId], references: [id])
  nominatorId   String
  nominator     User     @relation("Nominator", fields: [nominatorId], references: [id])
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId      String
  voter        User       @relation(fields: [voterId], references: [id])
  createdAt    DateTime   @default(now())
}

model EmailTemplate {
  id        String   @id @default(cuid())
  tenantId  String
  type      String // 'WELCOME', 'APPOINTMENT_CONFIRMATION', 'PASSWORD_RESET'
  subject   String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, type])
}

model Language {
  code String @id
  name String @unique
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String      @unique
  milestoneRequirement Int // e.g., number of signups needed to reach this tier
  commissionRate       Float // e.g., 0.10 for 10%
  affiliates           Affiliate[]
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  email            String
  status           String // 'pending', 'approved', 'rejected'
  affiliateCode    String            @unique
  commissionRate   Float
  commissionTierId String
  commissionTier   CommissionTier    @relation(fields: [commissionTierId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUserId          String
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model DailyChallenge {
  id          String   @id
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
}

