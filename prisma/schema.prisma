// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                 @id @default(cuid())
  tenantId                      String
  name                          String
  email                         String                 @unique
  password                      String?
  role                          String                 @default("user") // ADMIN, MANAGER, USER
  status                        String                 @default("active")
  lastLogin                     DateTime?
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  profilePictureUrl             String?
  bio                           String?
  shortBio                      String?
  university                    String?
  currentJobTitle               String?
  company                       String?
  skills                        Json?
  xpPoints                      Int?                   @default(0)
  dailyStreak                   Int?                   @default(0)
  longestStreak                 Int?                   @default(0)
  totalActiveDays               Int?                   @default(0)
  weeklyActivity                Json?
  earnedBadges                  Json?
  interviewCredits              Int?                   @default(5)
  isDistinguished               Boolean?               @default(false)
  referralCode                  String?                @unique
  dateOfBirth                   String?
  gender                        String?
  mobileNumber                  String?
  currentAddress                String?
  graduationYear                String?
  degreeProgram                 String?
  department                    String?
  currentOrganization           String?
  industry                      String?
  workLocation                  String?
  linkedInProfile               String?
  yearsOfExperience             String?
  careerInterests               String?
  resumeText                    String?
  userApiKey                    String?
  shareProfileConsent           Boolean?
  featureInSpotlightConsent     Boolean?
  areasOfSupport                String[]
  timeCommitment                String?
  preferredEngagementMode       String?
  otherComments                 String?
  lookingForSupportType         String?
  helpNeededDescription         String?
  interests                     String[]
  offersHelpWith                String[]
  challengeTopics               String[]
  challengeProgress             Json?
  sessionId                     String?
  referredByAffiliateSignupId   String?
  referredBySignup              AffiliateSignup?       @relation("NewUserSignup", fields: [referredByAffiliateSignupId], references: [id])
  wallet                        Wallet?
  affiliateProfile              Affiliate?
  referralHistory               ReferralHistoryItem[]
  appointmentsAsRequester       Appointment[]          @relation("RequesterAppointments")
  appointmentsAsAlumni          Appointment[]          @relation("AlumniAppointments")
  jobApplications               JobApplication[]
  resumeProfiles                ResumeProfile[]
  resumeScanHistory             ResumeScanHistoryItem[]
  featureRequests               FeatureRequest[]
  communityPosts                CommunityPost[]
  comments                      CommunityComment[]
  createdAnnouncements          Announcement[]
  activities                    Activity[]
  createdInterviewQuestions     InterviewQuestion[]
  affiliateSignups              AffiliateSignup[]      @relation("ReferringUser")

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                      String   @id @default(cuid())
  tenantId                String   @unique
  allowPublicSignup       Boolean  @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  tenant                  Tenant   @relation(fields: [tenantId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                   String      @id @default(cuid())
  tenantId             String
  userId               String
  companyName          String
  jobTitle             String
  status               String // Saved, Applied, Interviewing, Offer, Rejected
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Interview[]
  user                 User        @relation(fields: [userId], references: [id])
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  notes            String[]
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
  requester       User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumni          User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime
  content           String?
  type              String // text, poll, event, request
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String? // open, in progress, completed
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  user              User               @relation(fields: [userId], references: [id])
}

model CommunityComment {
  id         String        @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime
  comment    String
  parentId   String?
  post       CommunityPost @relation(fields: [postId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
}

model Wallet {
  id           String   @id @default(cuid())
  userId       String   @unique
  coins        Int
  flashCoins   Json?
  transactions Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // All Users, Specific Tenant, Specific Role
  audienceTarget String?
  status         String // Draft, Published, Archived
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  tenantId       String?
}

model Badge {
  id               String  @id @default(cuid())
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model ReferralHistoryItem {
  id                 String         @id @default(cuid())
  referrerUserId     String
  referredEmailOrName String
  referralDate       DateTime
  status             ReferralStatus
  rewardAmount       Int?
  referrer           User           @relation(fields: [referrerUserId], references: [id])
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  name           String
  email          String
  status         String // pending, approved, rejected
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id])
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String    @unique
  signupDate       DateTime
  commissionEarned Float?
  newUser          User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model Language {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  translations Translation[]
}

model Translation {
  id           String   @id @default(cuid())
  languageId   String
  language     Language @relation(fields: [languageId], references: [id])
  key          String
  value        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([languageId, key])
}

model ResumeScanHistoryItem {
  id                  String    @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime  @default(now())
  matchScore          Int?
  bookmarked          Boolean?  @default(false)
  user                User      @relation(fields: [userId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  timestamp   DateTime @default(now())
  description String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}
