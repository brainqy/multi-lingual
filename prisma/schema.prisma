// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid()) @db.VarChar(255)
  tenantId                  String?   @db.VarChar(255) // Made optional to fix foreign key constraint on initial setup
  name                      String
  email                     String    @unique
  role                      String
  status                    String?
  lastLogin                 DateTime? @db.Timestamp(6)
  dateOfBirth               DateTime? @db.Date
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?
  earnedBadges              String[]
  affiliateCode             String?
  pastInterviewSessions     String[]
  interviewCredits          Int?
  createdAt                 DateTime  @default(now()) @db.Timestamp(6)
  isDistinguished           Boolean?
  userApiKey                String?
  challengeTopics           String[]
  shortBio                  String?
  university                String?
  sessionId                 String?   @unique @db.VarChar(255)

  tenant Tenant? @relation(fields: [tenantId], references: [id])

  @@map("User")
}

model Tenant {
  id        String @id @default(cuid()) @db.VarChar(255)
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
  users     User[]

  settings TenantSettings?

  @@map("Tenant")
}

model TenantSettings {
  id                           String  @id @default(cuid()) @db.VarChar(255)
  tenantId                     String  @unique @db.VarChar(255)
  allowPublicSignup            Boolean @default(true)
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  communityFeedEnabled         Boolean @default(true)
  jobBoardEnabled              Boolean @default(true)
  gamificationEnabled          Boolean @default(true)
  walletEnabled                Boolean @default(true)
  eventRegistrationEnabled     Boolean @default(true)
  welcomeEmailTemplate         String?

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("TenantSettings")
}


model JobApplication {
  id                 String       @id @default(cuid()) @db.VarChar(255)
  tenantId           String       @db.VarChar(255)
  userId             String       @db.VarChar(255)
  companyName        String
  jobTitle           String
  status             String
  dateApplied        String
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]

  @@map("JobApplication")
}

model Interview {
  id                 String   @id @default(cuid()) @db.VarChar(255)
  jobApplicationId   String   @db.VarChar(255)
  date               String
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              String[]
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id])

  @@map("Interview")
}

model CommunityPost {
  id                String             @id @default(cuid()) @db.VarChar(255)
  tenantId          String             @db.VarChar(255)
  userId            String             @db.VarChar(255)
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now()) @db.Timestamp(6)
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json[]
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  bookmarkedBy      String[]

  @@map("CommunityPost")
}

model CommunityComment {
  id         String        @id @default(cuid()) @db.VarChar(255)
  postId     String        @db.VarChar(255)
  userId     String        @db.VarChar(255)
  userName   String
  userAvatar String?
  timestamp  DateTime      @default(now()) @db.Timestamp(6)
  comment    String
  parentId   String?       @db.VarChar(255)
  post       CommunityPost @relation(fields: [postId], references: [id])

  @@map("CommunityComment")
}

model ResumeScanHistory {
  id                   String   @id @default(cuid()) @db.VarChar(255)
  tenantId             String   @db.VarChar(255)
  userId               String   @db.VarChar(255)
  resumeId             String   @db.VarChar(255)
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime @default(now()) @db.Timestamp(6)
  matchScore           Int?
  bookmarked           Boolean?

  @@map("ResumeScanHistory")
}

model Appointment {
  id              String   @id @default(cuid()) @db.VarChar(255)
  tenantId        String   @db.VarChar(255)
  requesterUserId String   @db.VarChar(255)
  alumniUserId    String   @db.VarChar(255)
  title           String
  dateTime        DateTime @db.Timestamp(6)
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?

  @@map("Appointment")
}

model Activity {
  id          String   @id @default(cuid()) @db.VarChar(255)
  tenantId    String   @db.VarChar(255)
  userId      String   @db.VarChar(255)
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  description String

  @@map("Activity")
}

model Badge {
  id               String  @id @default(cuid()) @db.VarChar(255)
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?

  @@map("Badge")
}
