// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                 @id @default(cuid())
  tenantId                    String
  tenant                      Tenant                 @relation(fields: [tenantId], references: [id])
  name                        String
  email                       String                 @unique
  password                    String?
  role                        String                 @default("user") // 'user', 'manager', 'admin'
  status                      String                 @default("active") // 'active', 'inactive', 'suspended', 'pending'
  lastLogin                   DateTime?
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  sessionId                   String?
  // User Profile fields
  dateOfBirth                 String?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  company                     String?
  currentJobTitle             String?
  currentOrganization         String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  skills                      String[]
  careerInterests             String?
  resumeText                  String?
  userApiKey                  String?
  bio                         String?
  profilePictureUrl           String?
  shareProfileConsent         Boolean?               @default(true)
  featureInSpotlightConsent   Boolean?               @default(false)
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  interests                   String[]
  offersHelpWith              String[]
  challengeTopics             String[]
  challengeProgress           Json?                  @db.Json
  isDistinguished             Boolean?               @default(false)
  shortBio                    String?
  university                  String?
  // Gamification fields
  xpPoints                    Int?                   @default(0)
  dailyStreak                 Int?                   @default(0)
  longestStreak               Int?                   @default(0)
  totalActiveDays             Int?                   @default(0)
  weeklyActivity              Boolean[]
  earnedBadges                String[]
  interviewCredits            Int?                   @default(5)
  streakFreezes               Int?                   @default(1)
  // Referral/Affiliate fields
  referralCode                String?                @unique
  // Relations
  wallet                      Wallet?
  referredBySignup            AffiliateSignup?
  affiliateProfile            Affiliate?
  referralHistory             ReferralHistoryItem[]
  appointmentsAsRequester     Appointment[]          @relation("RequesterAppointments")
  appointmentsAsAlumni        Appointment[]          @relation("AlumniAppointments")
  jobApplications             JobApplication[]
  resumeProfiles              ResumeProfile[]
  resumeScanHistory           ResumeScanHistory[]
  featureRequests             FeatureRequest[]
  communityPosts              CommunityPost[]
  comments                    CommunityComment[]
  createdAnnouncements        Announcement[]
  activities                  Activity[]
  createdInterviewQuestions   InterviewQuestion[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                        String   @id @default(cuid())
  tenantId                  String   @unique
  tenant                    Tenant   @relation(fields: [tenantId], references: [id])
  allowPublicSignup         Boolean  @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?    @db.Json
  emailTemplates            Json?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                 String         @id @default(cuid())
  jobApplicationId   String
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id])
  date               DateTime
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              String[]
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime
  type              String
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?              @db.Json
  eventTitle       String?
  eventDate        String?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int                @default(0)
  comments         CommunityComment[]
  bookmarkedBy     String[]
}

model CommunityComment {
  id         String        @id @default(cuid())
  postId     String
  post       CommunityPost @relation(fields: [postId], references: [id])
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime      @default(now())
  comment    String
  parentId   String?
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  bookmarkedBy String[]
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}


model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  withUser        String // Denormalized name for easier display
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
}

model ReferralHistoryItem {
  id                 String  @id @default(cuid())
  referrerUserId     String
  referrerUser       User    @relation(fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate       DateTime
  status             String
  rewardAmount       Int?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  signups        AffiliateSignup[]
  clicks         AffiliateClick[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String    @unique
  newUser          User      @relation(fields: [newUserId], references: [id])
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Survey {
  id        String           @id @default(cuid())
  name      String           @unique
  structure Json
  createdAt DateTime         @default(now())
  responses SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation(fields: [createdById], references: [id])
  createdById    String
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  description String
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean? @default(false)
  mcqOptions      Json?    @db.Json
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  baseScore       Int?
  userRatings     Json?    @db.Json
  userComments    Json?    @db.Json
  createdById     String
  createdBy       User     @relation(fields: [createdById], references: [id])
  approved        Boolean? @default(false)
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
}

model MockInterviewSession {
  id                 String               @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json?
  answers            MockInterviewAnswer[]
  overallFeedback    Json?
  overallScore       Int?
  status             String
  createdAt          DateTime             @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                    String               @id @default(cuid())
  sessionId             String
  session               MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId            String
  questionText          String
  userAnswer            String
  aiFeedback            String?
  aiScore               Int?
  strengths             String[]
  areasForImprovement   String[]
  suggestedImprovements String[]
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime? @unique
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model Language {
  code          String        @id @unique
  name          String
  words         Word[]
  translations  Translation[]
}

model Word {
  id              String        @id @default(cuid())
  tenantId        String
  languageId      String
  originalText    String
  language        Language      @relation(fields: [languageId], references: [code])
  translations    Translation[] @relation("OriginalWord")
  qualityScores   Json?         @db.Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Translation {
  id             String   @id @default(cuid())
  originalWordId String
  originalWord   Word     @relation("OriginalWord", fields: [originalWordId], references: [id])
  languageId     String
  language       Language @relation(fields: [languageId], references: [code])
  translatedText String
  qualityScore   Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?     @default(0)
}
