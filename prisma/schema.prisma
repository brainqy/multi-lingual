// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  tenantId                  String
  role                      String
  name                      String
  email                     String    @unique
  status                    String?
  lastLogin                 DateTime? @updatedAt
  dateOfBirth               DateTime? @db.Date
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?
  earnedBadges              String[]
  affiliateCode             String?
  pastInterviewSessions     String[]
  interviewCredits          Int?
  createdAt                 DateTime  @default(now())
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  sessionId                 String?
  jobApplications           JobApplication[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?
  settings  TenantSettings?
  createdAt DateTime        @default(now())
}

model TenantSettings {
  id                String  @id @default(cuid())
  tenant            Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String  @unique
  allowPublicSignup Boolean @default(true)
  customLogoUrl     String?
  primaryColor      String?
  accentColor       String?
  features          Json?
  emailTemplates    Json?
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id               String         @id @default(cuid())
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerMobile String?
  interviewerEmail  String?
  notes            String[]
}


model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
}

model Announcement {
  id             String   @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
}

model Appointment {
  id              String    @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}
