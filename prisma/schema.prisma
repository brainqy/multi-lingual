// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String
}

model User {
  id                        String                   @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                   @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                   @unique
  password                  String?
  role                      String
  status                    String?
  lastLogin                 DateTime?
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            Json?
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?                  @unique
  earnedBadges              String[]
  affiliateCode             String?                  @unique
  interviewCredits          Int?
  createdAt                 DateTime                 @default(now())
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  sessionId                 String?
  streakFreezes             Int?
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  jobApplications           JobApplication[]
  jobOpenings               JobOpening[]
  resumeProfiles            ResumeProfile[]
  resumeScans               ResumeScanHistory[]
  createdQuizzes            MockInterviewSession[]
  requesterAppointments     Appointment[]            @relation("RequesterAppointments")
  alumniAppointments        Appointment[]            @relation("AlumniAppointments")
  wallet                    Wallet?
  activities                Activity[]
  createdQuestions          InterviewQuestion[]
  mockInterviewSessions     MockInterviewSession[]
  productCompanies          ProductCompany[]
}

model Tenant {
  id              String            @id @default(cuid())
  name            String
  domain          String?           @unique
  settings        TenantSettings?
  createdAt       DateTime          @default(now())
  users           User[]
  jobOpenings     JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles  ResumeProfile[]
  resumeScans     ResumeScanHistory[]
  communityPosts  CommunityPost[]
  surveys         Survey[]
  surveyResponses SurveyResponse[]
  appointments    Appointment[]
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  welcomeEmail                String?
  newAdminNotificationEmail   String?
  monthlyDigestEmail          String?
  fromEmail                   String?
  supportEmail                String?
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    String?
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  Role_Specific
  Analytical
  HR
  Situational
  Problem_Solving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

model InterviewQuestion {
  id              String                      @id @default(cuid())
  category        InterviewQuestionCategory
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      InterviewQuestionDifficulty?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String?
  user            User?                       @relation(fields: [createdBy], references: [id])
  approved        Boolean?
  createdAt       DateTime?
  bookmarkedBy    String[]
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Int?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model CommunityPost {
  id                String               @id @default(cuid())
  tenantId          String
  tenant            Tenant               @relation(fields: [tenantId], references: [id])
  userId            String
  user              User                 @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime             @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]   @relation("CommunityPostComments")
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
  
  // A comment can belong to either a CommunityPost or a BlogPost
  postId      String?
  post        CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  
  blogPostId  String?
  blogPost    BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
}

model Survey {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  steps           Json
  tenantId        String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  createdAt       DateTime         @default(now())
  responses       SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

model PromotionalContent {
  id            String   @id @default(cuid())
  isActive      Boolean
  title         String
  description   String
  imageUrl      String
  imageAlt      String
  imageHint     String?
  buttonText    String
  buttonLink    String
  gradientFrom  String?
  gradientTo    String?
  gradientVia   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean
  createdAt   DateTime @default(now())
}
