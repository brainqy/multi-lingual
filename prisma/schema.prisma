// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id    String @id @default(cuid())
  code  String @unique
  name  String
  words Word[]
}

model Word {
  id          String        @id @default(cuid())
  language    Language      @relation(fields: [languageId], references: [id])
  languageId  String
  text        String
  translation Translation[] @relation("OriginalWord")

  @@unique([languageId, text])
}

model Translation {
  id                String        @id @default(cuid())
  originalWord      Word          @relation("OriginalWord", fields: [originalWordId], references: [id])
  originalWordId    String
  translatedWord    String
  translatedLanguageCode String
  qualityScore      Float?
  suggestions       Suggestion[]
  user              User          @relation(fields: [userId], references: [id])
  userId            String
}

model Suggestion {
  id            String      @id @default(cuid())
  translation   Translation @relation(fields: [translationId], references: [id])
  translationId String
  suggestedText String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String?
  role                String
  status              String    @default("active") // This line was missing
  tenantId            String?
  tenant              Tenant?   @relation(fields: [tenantId], references: [id])
  lastLogin           DateTime? @updatedAt
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  profilePictureUrl   String?
  dateOfBirth         String?
  gender              String?
  mobileNumber        String?
  currentAddress      String?
  graduationYear      String?
  degreeProgram       String?
  department          String?
  company             String?
  currentOrganization String?
  industry            String?
  workLocation        String?
  linkedInProfile     String?
  yearsOfExperience   String?
  bio                 String?
  shortBio            String?
  university          String?
  careerInterests     String?
  userApiKey          String?
  referralCode        String?   @unique
  sessionId           String?   @unique

  skills                      String[]
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  interests                   String[]
  offersHelpWith              String[]
  challengeTopics             String[]
  challengeProgress           Json?
  earnedBadges                String[]
  xpPoints                    Int?
  dailyStreak                 Int?
  longestStreak               Int?
  totalActiveDays             Int?
  weeklyActivity              Boolean[]
  interviewCredits            Int?
  isDistinguished             Boolean?

  affiliateProfile        Affiliate?
  referralHistory         ReferralHistoryItem[]
  wallet                  Wallet?
  appointmentsAsRequester Appointment[]         @relation("RequesterUser")
  appointmentsAsAlumni    Appointment[]         @relation("AlumniUser")
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistory       ResumeScanHistoryItem[]
  featureRequests         FeatureRequest[]
  communityPosts          CommunityPost[]
  comments                CommunityComment[]
  createdAnnouncements    Announcement[]
  activities              Activity[]
  createdInterviewQuestions InterviewQuestion[]

  affiliateSignups                 AffiliateSignup[]       @relation("ReferringUser")
  referredBySignup                 AffiliateSignup?        @relation("NewUserSignup")
}


model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?   @unique
  createdAt DateTime  @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                      String    @id @default(cuid())
  tenant                  Tenant    @relation(fields: [tenantId], references: [id])
  tenantId                String    @unique
  allowPublicSignup       Boolean   @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
  emailTemplates          Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model JobApplication {
  id                   String      @id @default(cuid())
  tenantId             String?
  userId               String
  user                 User        @relation(fields: [userId], references: [id])
  companyName          String
  jobTitle             String
  status               String
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Interview[]
}

model Interview {
  id               String          @id @default(cuid())
  jobApplication   JobApplication  @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String?
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime
  type              String
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String?
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  tenantId           String?
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String?
  requesterUserId String
  requesterUser   User     @relation("RequesterUser", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniUser", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String?
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  bookmarkedBy      String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String
  post       CommunityPost  @relation(fields: [postId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime
  comment    String
  parentId   String?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation(fields: [createdById], references: [id])
  createdById    String
}

model MockInterviewSession {
  id                 String                @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  answers            Json[]
  overallFeedback    Json?
  overallScore       Int?
  status             String
  createdAt          DateTime
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json[]
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     String
  approved        Boolean?
  createdAt       DateTime  @default(now())
  bookmarkedBy    String[]
  baseScore       Int?
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime
  linkTo    String?
  linkText  String?
  isRead    Boolean?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    String
  date        DateTime
  description String
  amount      Int
  type        String
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  referringUser      User      @relation("ReferringUser", fields: [affiliateId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}


model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean
  createdAt   DateTime @default(now())
}

model Survey {
  id        String   @id @default(cuid())
  name      String   @unique
  description String?
  questions Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  userId       String
  responseDate DateTime @default(now())
  data         Json
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}
