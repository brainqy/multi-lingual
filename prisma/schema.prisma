// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String
}

model TenantSettings {
  id                            String    @id @default(cuid())
  tenant                        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                      String    @unique
  allowPublicSignup             Boolean   @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  emailTemplates                Json?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
}

model PlatformSettings {
  id                              String   @id @default(cuid())
  platformName                    String
  maintenanceMode                 Boolean  @default(false)
  communityFeedEnabled            Boolean  @default(true)
  autoModeratePosts               Boolean  @default(true)
  jobBoardEnabled                 Boolean  @default(true)
  maxJobPostingDays               Int      @default(30)
  gamificationEnabled             Boolean  @default(true)
  xpForLogin                      Int      @default(10)
  xpForNewPost                    Int      @default(20)
  resumeAnalyzerEnabled           Boolean  @default(true)
  aiResumeWriterEnabled           Boolean  @default(true)
  coverLetterGeneratorEnabled     Boolean  @default(true)
  mockInterviewEnabled            Boolean  @default(true)
  referralsEnabled                Boolean  @default(true)
  affiliateProgramEnabled         Boolean  @default(true)
  alumniConnectEnabled            Boolean  @default(true)
  defaultAppointmentCost          Int      @default(10)
  featureRequestsEnabled          Boolean  @default(true)
  allowTenantCustomBranding       Boolean  @default(true)
  allowTenantEmailCustomization   Boolean  @default(false)
  allowUserApiKey                 Boolean? @default(true)
  defaultProfileVisibility        String   @default("alumni_only") // 'public', 'alumni_only', 'private'
  maxResumeUploadsPerUser         Int      @default(5)
  defaultTheme                    String   @default("light") // 'light', 'dark'
  enablePublicProfilePages        Boolean  @default(false)
  sessionTimeoutMinutes           Int      @default(60)
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean? @default(true)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}


model User {
  id                      String                 @id @default(cuid())
  tenant                  Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                String
  name                    String
  email                   String                 @unique
  password                String?
  role                    String                 @default("user") // "user", "manager", "admin"
  status                  String                 @default("active") // "active", "inactive", "pending", "suspended"
  lastLogin               DateTime?
  dateOfBirth             DateTime?
  gender                  String?
  mobileNumber            String?
  currentAddress          String?
  graduationYear          String?
  degreeProgram           String?
  department              String?
  currentJobTitle         String?
  currentOrganization     String?
  industry                String?
  workLocation            String?
  linkedInProfile         String?
  yearsOfExperience       String?
  skills                  String[]
  areasOfSupport          String[]
  timeCommitment          String?
  preferredEngagementMode String?
  otherComments           String?
  lookingForSupportType   String?
  helpNeededDescription   String?
  shareProfileConsent     Boolean?               @default(true)
  featureInSpotlightConsent Boolean?               @default(false)
  profilePictureUrl       String?
  resumeText              String?
  careerInterests         String?
  bio                     String?
  interests               String[]
  userApiKey              String?
  xpPoints                Int?                   @default(0)
  dailyStreak             Int?                   @default(0)
  longestStreak           Int?                   @default(0)
  totalActiveDays         Int?                   @default(0)
  weeklyActivity          Boolean[]
  referralCode            String?                @unique
  earnedBadges            String[]
  affiliateCode           String?                @unique
  pastInterviewSessions   String[]
  interviewCredits        Int?                   @default(5)
  isDistinguished         Boolean?               @default(false)
  challengeTopics         String[]
  challengeProgress       Json?
  sessionId               String?
  streakFreezes           Int?                   @default(1)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  
  // Relations
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  requesterAppointments   Appointment[]          @relation("RequesterAppointments")
  alumniAppointments      Appointment[]          @relation("AlumniAppointments")
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScans             ResumeScanHistory[]
  featureRequests         FeatureRequest[]
  affiliateProfile        Affiliate?
  wallet                  Wallet?
  activities              Activity[]
  createdQuestions        InterviewQuestion[]
  mockInterviewSessions   MockInterviewSession[]
  postedJobOpenings       JobOpening[]
  createdPromotions       PromotionalContent[]
  createdGalleryEvents    GalleryEvent[]
  createdAnnouncements    Announcement[]
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  domain           String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  users            User[]
  jobOpenings      JobOpening[]
  resumeProfiles   ResumeProfile[]
  resumeScans      ResumeScanHistory[]
  featureRequests  FeatureRequest[]
  communityPosts   CommunityPost[]
  surveys          Survey[]
  surveyResponses  SurveyResponse[]
  appointments     Appointment[]
  
  settings         TenantSettings?
}

model Appointment {
  id              String      @id @default(cuid())
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  tenantId        String
  requesterUser   User        @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  requesterUserId String
  alumniUser      User        @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Badge {
  id                  String  @id @default(cuid())
  name                String
  description         String
  icon                String
  xpReward            Int?
  triggerCondition    String?
  streakFreezeReward  Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model JobOpening {
  id                String   @id @default(cuid())
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String // Full-time, Part-time, etc.
  postedByAlumni    User     @relation(fields: [postedByAlumniId], references: [id])
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model JobApplication {
  id                 String       @id @default(cuid())
  user               User         @relation(fields: [userId], references: [id])
  userId             String
  tenantId           String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId  String
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String            @id @default(cuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  tenant       Tenant            @relation(fields: [tenantId], references: [id])
  tenantId     String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  resumeScans  ResumeScanHistory[]
}

model ResumeScanHistory {
  id                  String        @id @default(cuid())
  user                User          @relation(fields: [userId], references: [id])
  userId              String
  tenant              Tenant        @relation(fields: [tenantId], references: [id])
  tenantId            String
  resume              ResumeProfile @relation(fields: [resumeId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime      @default(now())
  matchScore          Int?
  bookmarked          Boolean?      @default(false)
}

model FeatureRequest {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String // Pending, In Progress, etc.
  upvotes     Int      @default(0)
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  tenantId    String?
}

model SurveyResponse {
  id           String   @id @default(cuid())
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyId     String
  userId       String
  userName     String
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId     String?
  responseDate DateTime @default(now())
  data         Json
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  user          User?   @relation(fields: [userId], references: [id])
  userId        String?
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                     String               @id @default(cuid())
  sessionId              String
  session                MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId             String
  questionText           String
  userAnswer             String
  aiFeedback             String?
  aiScore                Int?
  strengths              String[]
  areasForImprovement    String[]
  suggestedImprovements  String[]
  isRecording            Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  tenantId          String
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
}

model CommunityComment {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime     @default(now())
  comment     String
  
  post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?

  blogPost    BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  String?

  parent      CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction)
  parentId    String?
  replies     CommunityComment[] @relation("CommentReplies")

  @@index([postId])
  @@index([blogPostId])
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  tenantId       String?
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean? @default(true)
  createdBy       User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  attendeeUserIds String[]
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
}

model ResumeTemplate {
  id                String  @id @default(cuid())
  name              String
  description       String
  previewImageUrl   String
  category          String
  dataAiHint        String?
  content           String
  headerColor       String?
  bodyColor         String?
  headerFontSize    String?
  textAlign         String?
  layout            String?
}

model SystemAlert {
    id          String   @id @default(cuid())
    type        String // 'error', 'warning', 'info', 'success'
    title       String
    message     String
    timestamp   DateTime @default(now())
    linkTo      String?
    linkText    String?
    isRead      Boolean  @default(false)
}

model DailyChallenge {
    id          String @id @default(cuid())
    type        String // 'standard' or 'flip'
    date        DateTime?
    title       String
    description String
    difficulty  String?
    category    String?
    solution    String?
    xpReward    Int?
    tasks       Json?
}

model Affiliate {
    id              String @id @default(cuid())
    userId          String @unique
    user            User @relation(fields: [userId], references: [id])
    name            String
    email           String
    status          String // 'pending', 'approved', 'rejected'
    affiliateCode   String @unique
    commissionRate  Float
    totalEarned     Float @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    clicks          AffiliateClick[]
    signups         AffiliateSignup[]
}

model AffiliateClick {
    id                String @id @default(cuid())
    affiliateId       String
    affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
    timestamp         DateTime @default(now())
    ipAddress         String?
    convertedToSignup Boolean @default(false)
}

model AffiliateSignup {
    id               String @id @default(cuid())
    affiliateId      String
    affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
    newUserId        String
    signupDate       DateTime @default(now())
    commissionEarned Float?
}
