// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                 @unique
  password                  String?
  role                      String                 @default("user") // e.g., 'user', 'manager', 'admin'
  status                    String?                @default("active") // e.g., 'active', 'inactive', 'pending'
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  dateOfBirth               DateTime?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  company                   String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  offersHelpWith            String[]
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?                @unique
  earnedBadges              String[]
  affiliateCode             String?                @unique
  pastInterviewSessions     String[]
  interviewCredits          Int?
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  sessionId                 String?

  wallet                    Wallet?
  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  scanHistories             ResumeScanHistoryItem[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  createdQuestions          InterviewQuestion[]
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  blogPosts                 BlogPost[]
  activities                Activity[]
  affiliateProfile          Affiliate?
  referralHistory           ReferralHistoryItem[]
  announcements             Announcement[]
  createdGalleryEvents      GalleryEvent[]
  jobOpenings               JobOpening[]
  affiliateSignups          AffiliateSignup[]
  mockInterviewSessions     MockInterviewSession[]
  productCompanies          ProductCompany[]
}

model Tenant {
  id                String                 @id @default(cuid())
  name              String
  domain            String?                @unique
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  users             User[]
  jobApplications   JobApplication[]
  resumeProfiles    ResumeProfile[]
  scanHistories     ResumeScanHistoryItem[]
  communityPosts    CommunityPost[]
  announcements     Announcement[]
  surveys           Survey[]
  surveyResponses   SurveyResponse[]
  appointments      Appointment[]
  galleryEvents     GalleryEvent[]
  jobOpenings       JobOpening[]
  activities        Activity[]
  productCompanies  ProductCompany[]
  settings          TenantSettings?
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String // e.g., 'Saved', 'Applied', 'Interviewing'
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Float?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
  createdAt            DateTime             @default(now())
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  user         User               @relation(fields: [userId], references: [id])
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation("BlogPostComments")
  bookmarkedBy String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  votedBy           String[]
  registeredBy      String[]
  comments          CommunityComment[] @relation("CommunityPostComments")
  bookmarkedBy      String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  blogPostId String?
  post       CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPost   BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?
  location        String?
  approved        Boolean?
  createdByUserId String
  creator         User     @relation(fields: [createdByUserId], references: [id])
  attendeeUserIds String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  poster           User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model Badge {
  id                 String  @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  streakFreezeReward Int?
  triggerCondition   String?
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Survey {
  id          String           @id @default(cuid())
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  name        String           @unique
  description String
  steps       Json
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ReferralHistoryItem {
  id                  String   @id @default(cuid())
  referrerUserId      String
 referrer User @relation("ReferrerReferralHistory", fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate        DateTime @default(now())
  status              String
  rewardAmount        Int?
 referred User? @relation("ReferredReferralHistory", fields: [referredUserId], references: [id])
  referredUserId      String?
}

model PlatformSettings {
  id                            String   @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean
  communityFeedEnabled          Boolean
  autoModeratePosts             Boolean
  jobBoardEnabled               Boolean
  maxJobPostingDays             Int
  gamificationEnabled           Boolean
  xpForLogin                    Int
  xpForNewPost                  Int
  resumeAnalyzerEnabled         Boolean
  aiResumeWriterEnabled         Boolean
  coverLetterGeneratorEnabled   Boolean
  mockInterviewEnabled          Boolean
  referralsEnabled              Boolean
  affiliateProgramEnabled       Boolean
  alumniConnectEnabled          Boolean
  defaultAppointmentCost        Int
  featureRequestsEnabled        Boolean
  allowTenantCustomBranding     Boolean
  allowTenantEmailCustomization Boolean
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String
  maxResumeUploadsPerUser       Int
  defaultTheme                  String
  enablePublicProfilePages      Boolean
  sessionTimeoutMinutes         Int
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // 'All Users', 'Specific Tenant', 'Specific Role'
  audienceTarget String?
  status         String // 'Draft', 'Published', 'Archived'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  creator        User      @relation(fields: [createdBy], references: [id])
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requester       User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumni          User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String?
  creator         User?     @relation(fields: [createdBy], references: [id])
  approved        Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookmarkedBy    String[]
}

    