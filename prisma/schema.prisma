// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                 @id @default(cuid())
  tenantId                     String?
  name                         String
  email                        String                 @unique
  password                     String?
  role                         String                 @default("user") // user, manager, admin
  status                       String                 @default("active") // active, inactive, pending, suspended, PENDING_DELETION
  lastLogin                    DateTime?
  createdAt                    DateTime               @default(now())
  sessionId                    String?
  profilePictureUrl            String?
  bio                          String?
  currentJobTitle              String?
  company                      String?
  shortBio                     String?
  university                   String?
  skills                       String[]
  interests                    String[]
  offersHelpWith               Json?
  appointmentCoinCost          Int?
  xpPoints                     Int?
  dailyStreak                  Int?
  longestStreak                Int?
  totalActiveDays              Int?
  weeklyActivity               Json?
  referralCode                 String?
  earnedBadges                 String[]
  affiliateCode                String?
  pastInterviewSessions        String[]
  interviewCredits             Int?
  isDistinguished              Boolean?
  challengeTopics              Json?
  challengeProgress            Json?
  streakFreezes                Int?
  dateOfBirth                  String?
  gender                       String?
  mobileNumber                 String?
  currentAddress               String?
  graduationYear               String?
  degreeProgram                String?
  department                   String?
  currentOrganization          String?
  industry                     String?
  workLocation                 String?
  linkedInProfile              String?
  yearsOfExperience            String?
  areasOfSupport               String[]
  timeCommitment               String?
  preferredEngagementMode      String?
  otherComments                String?
  lookingForSupportType        String?
  helpNeededDescription        String?
  shareProfileConsent          Boolean?
  featureInSpotlightConsent    Boolean?
  resumeText                   String?
  careerInterests              String?
  userApiKey                   String?
  jobApplications              JobApplication[]
  resumeProfiles               ResumeProfile[]
  resumeScanHistory            ResumeScanHistory[]
  createdPosts                 CommunityPost[]
  comments                     CommunityComment[]
  requesterAppointments        Appointment[]          @relation("RequesterAppointments")
  alumniAppointments           Appointment[]          @relation("AlumniAppointments")
  activities                   Activity[]
  affiliateProfile             Affiliate?
  affiliateSignups             AffiliateSignup[]
  referrals                    ReferralHistoryItem[]
  wallet                       Wallet?
  createdAnnouncements         Announcement[]
  featureRequests              FeatureRequest[]
  createdQuizzes               MockInterviewSession[]

  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?
  createdAt DateTime        @default(now())
  settings  TenantSettings?
  users     User[]
}

model TenantSettings {
  id                        String   @id @default(cuid())
  tenantId                  String   @unique
  allowPublicSignup         Boolean  @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
  emailTemplates            Json?
  tenant                    Tenant   @relation(fields: [tenantId], references: [id])
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  user               User        @relation(fields: [userId], references: [id])
  interviews         Interview[]
}

model Interview {
  id               String   @id @default(cuid())
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}


model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
  user                User     @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  bookmarkedBy      String[]
  user              User               @relation(fields: [userId], references: [id])
  comments          CommunityComment[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime
  comment    String
  parentId   String?
  post       CommunityPost  @relation(fields: [postId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
  parent     CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("Replies")
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    DateTime?
  requester       User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumni          User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  timestamp   DateTime @default(now())
  description String
  user        User?    @relation(fields: [userId], references: [id])
}

model Badge {
  id               String @id @default(cuid())
  name             String @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
  user         User                @relation(fields: [userId], references: [id])
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean
  createdAt   DateTime  @default(now())
}

model ReferralHistoryItem {
  id                 String   @id @default(cuid())
  referrerUserId     String
  referredEmailOrName String
  referralDate       DateTime
  status             String
  rewardAmount       Int?
  referrer           User     @relation(fields: [referrerUserId], references: [id])
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id])
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  user             User      @relation(fields: [newUserId], references: [id])
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
  creator        User      @relation(fields: [createdBy], references: [id])
}

model PromotionalContent {
  id           String    @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Survey {
  id        String           @id @default(cuid())
  name      String           @unique
  title     String
  questions Json
  createdAt DateTime         @default(now())
  responses SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  userId       String
  userName     String
  responseDate DateTime @default(now())
  data         Json
  survey       Survey   @relation(fields: [surveyId], references: [id])
}

model InterviewQuestion {
  id             String   @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  createdBy      String?
  approved       Boolean?
  createdAt      String?
  bookmarkedBy   String[]
  baseScore      Int?
}

model MockInterviewSession {
  id                 String             @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json
  answers            Json
  overallFeedback    Json?
  overallScore       Float?
  status             String
  createdAt          DateTime           @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
  user               User               @relation(fields: [userId], references: [id])
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model GalleryEvent {
  id                String    @id @default(cuid())
  tenantId          String
  title             String
  date              DateTime
  imageUrls         String[]
  description       String?
  dataAiHint        String?
  isPlatformGlobal  Boolean?  @default(false)
  location          String?
  approved          Boolean?  @default(true)
  createdByUserId   String?
  attendeeUserIds   String[]
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model BlogPost {
    id           String   @id @default(cuid())
    tenantId     String
    userId       String
    userName     String
    userAvatar   String
    title        String
    slug         String   @unique
    author       String
    date         DateTime
    imageUrl     String
    dataAiHint   String?
    content      String
    excerpt      String
    tags         String[]
    bookmarkedBy String[]
}

model BlogGenerationSettings {
    id                      String @id @default(cuid())
    generationIntervalHours Int
    topics                  String[]
    style                   String?
    lastGenerated           DateTime?
}

// Add any new models or relations below

model Language {
  code String @id
  name String
}

model Translation {
  id              String   @id @default(cuid())
  key             String   @unique
  english         String
  marathi         String
  hindi           String
}
