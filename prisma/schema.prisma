
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String    @id @default(cuid())
  tenantId                         String
  tenant                           Tenant    @relation(fields: [tenantId], references: [id])
  name                             String
  email                            String    @unique
  password                         String?
  role                             String    // ADMIN, MANAGER, USER
  status                           String?   // active, inactive, pending, suspended
  lastLogin                        DateTime? @updatedAt
  createdAt                        DateTime  @default(now())
  dateOfBirth                      String?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           String[]
  areasOfSupport                   String[]
  timeCommitment                   String?
  preferredEngagementMode          String?
  otherComments                    String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?
  featureInSpotlightConsent        Boolean?
  profilePictureUrl                String?
  resumeText                       String?
  careerInterests                  String?
  bio                              String?
  interests                        String[]
  userApiKey                       String?
  offersHelpWith                   String[]
  appointmentCoinCost              Int?
  xpPoints                         Int?
  dailyStreak                      Int?
  longestStreak                    Int?
  totalActiveDays                  Int?
  weeklyActivity                   Boolean[]
  referralCode                     String?
  earnedBadges                     String[]
  affiliateCode                    String?
  pastInterviewSessions            String[]
  interviewCredits                 Int?
  isDistinguished                  Boolean?
  challengeTopics                  String[]
  challengeProgress                Json?
  sessionId                        String?
  streakFreezes                    Int?
  createdPosts                     CommunityPost[]
  createdComments                  CommunityComment[]
  createdJobApplications           JobApplication[]   @relation("UserApplications")
  postedJobOpenings                JobOpening[]       @relation("AlumniJobOpenings")
  createdResumeProfiles            ResumeProfile[]
  createdResumeScanHistory         ResumeScanHistory[]
  createdAppointmentsAsRequester   Appointment[]      @relation("RequesterAppointments")
  createdAppointmentsAsAlumni      Appointment[]      @relation("AlumniAppointments")
  createdSurveys                   Survey[]
  createdSurveyResponses           SurveyResponse[]
  createdAffiliateProfile          Affiliate?
  createdGalleryEvents             GalleryEvent[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                           String     @id @default(cuid())
  tenantId                     String     @unique
  tenant                       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup            Boolean?
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  features                     Json?
  emailTemplates               Json?
}

model JobApplication {
  id                   String      @id @default(cuid())
  tenantId             String
  userId               String
  user                 User        @relation("UserApplications", fields: [userId], references: [id])
  companyName          String
  jobTitle             String
  status               String      // Saved, Applied, Interviewing, Offer, Rejected
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  salary               String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  applicationUrl       String?
  resumeIdUsed         String?
  coverLetterText      String?
  interviews           Interview[]
}

model Interview {
  id                 String         @id @default(cuid())
  jobApplicationId   String
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date               DateTime
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              String[]
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation("AlumniJobOpenings", fields: [postedByAlumniId], references: [id])
  applicationLink  String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String   // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String?
  reminderDate    DateTime?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // credit or debit
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String // text, poll, event, request
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String? // open, assigned, completed
  moderationStatus  String // visible, flagged, removed
  flagCount         Int
  comments          CommunityComment[] @relation("CommunityPostComments")
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  blogPostId String?
  post       CommunityPost? @relation("CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPost   BlogPost?      @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("Replies")
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String   // Pending, In Progress, Completed, Rejected
  upvotes     Int
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?
  location        String?
  approved        Boolean?
  createdByUserId String
  attendeeUserIds String[]
  user            User     @relation(fields: [createdByUserId], references: [id])
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Survey {
  id        String   @id @default(cuid())
  tenantId  String
  name      String   @unique
  description String?
  steps     Json
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // pending, approved, rejected
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float?
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}

model PlatformSettings {
  id                             String  @id @default(cuid())
  platformName                   String
  maintenanceMode                Boolean
  communityFeedEnabled           Boolean
  autoModeratePosts              Boolean
  jobBoardEnabled                Boolean
  maxJobPostingDays              Int
  gamificationEnabled            Boolean
  xpForLogin                     Int
  xpForNewPost                   Int
  resumeAnalyzerEnabled          Boolean
  aiResumeWriterEnabled          Boolean
  coverLetterGeneratorEnabled    Boolean
  mockInterviewEnabled           Boolean
  referralsEnabled               Boolean
  affiliateProgramEnabled        Boolean
  alumniConnectEnabled           Boolean
  defaultAppointmentCost         Int
  featureRequestsEnabled         Boolean
  allowTenantCustomBranding      Boolean
  allowTenantEmailCustomization  Boolean
  allowUserApiKey                Boolean?
  defaultProfileVisibility       String
  maxResumeUploadsPerUser        Int
  defaultTheme                   String
  enablePublicProfilePages       Boolean
  sessionTimeoutMinutes          Int
  maxEventRegistrationsPerUser   Int?
  globalAnnouncement             String?
  pointsForAffiliateSignup       Int?
  walletEnabled                  Boolean?
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String // All Users, Specific Tenant, Specific Role
  audienceTarget String?
  status         String // Draft, Published, Archived
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InterviewQuestion {
  id            String             @id @default(cuid())
  category      String
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    String?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String?
  approved      Boolean?
  createdAt     DateTime           @default(now())
  bookmarkedBy  String[]
}

model MockInterviewSession {
  id                  String               @id @default(cuid())
  userId              String
  user                User                 @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Float?
  status              String // pending, in-progress, completed
  createdAt           DateTime             @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Float?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // standard, flip
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model SystemAlert {
    id String @id @default(cuid())
    type String // error, warning, info, success
    title String
    message String
    timestamp DateTime @default(now())
    linkTo String?
    linkText String?
    isRead Boolean @default(false)
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation(name: "BlogPostComments")
  bookmarkedBy String[]
}

model ProductCompany {
    id String @id @default(cuid())
    name String
    location String
    websiteUrl String
    domain String
    hrName String?
    hrEmail String?
    contactNumber String?
    logoUrl String?
}
