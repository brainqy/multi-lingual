// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  tenantId                      String
  name                          String
  email                         String    @unique
  role                          String
  status                        String?
  lastLogin                     DateTime?
  dateOfBirth                   DateTime? @db.Date
  gender                        String?
  mobileNumber                  String?
  currentAddress                String?
  graduationYear                String?
  degreeProgram                 String?
  department                    String?
  currentJobTitle               String?
  currentOrganization           String?
  industry                      String?
  workLocation                  String?
  linkedInProfile               String?
  yearsOfExperience             String?
  skills                        Json?
  areasOfSupport                Json?
  timeCommitment                String?
  preferredEngagementMode       String?
  otherComments                 String?
  lookingForSupportType         String?
  helpNeededDescription         String?
  shareProfileConsent           Boolean?
  featureInSpotlightConsent     Boolean?
  profilePictureUrl             String?
  resumeText                    String?
  careerInterests               String?
  bio                           String?
  interests                     Json?
  offersHelpWith                Json?
  appointmentCoinCost           Int?
  xpPoints                      Int?
  dailyStreak                   Int?
  longestStreak                 Int?
  totalActiveDays               Int?
  weeklyActivity                Json?
  referralCode                  String?
  earnedBadges                  Json?
  affiliateCode                 String?
  pastInterviewSessions         Json?
  interviewCredits              Int?
  createdAt                     DateTime  @default(now())
  isDistinguished               Boolean?
  userApiKey                    String?
  challengeTopics               Json?
  challengeProgress             Json?
  password                      String?
  sessionId                     String?
  jobApplications               JobApplication[]
  postedJobOpenings             JobOpening[] @relation("PostedBy")
  createdInterviewQuestions     InterviewQuestion[] @relation("CreatedBy")
  requesterAppointments         Appointment[] @relation("Requester")
  alumniAppointments            Appointment[] @relation("Alumni")
  resumeProfiles                ResumeProfile[]
  resumeScanHistories           ResumeScanHistory[]
  communityPosts                CommunityPost[]
  communityComments             CommunityComment[]
  activities                    Activity[]
  walletTransactions            WalletTransaction[]
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?
  createdAt DateTime  @default(now())
  settings  TenantSettings?
}

model TenantSettings {
  id                  String    @id @default(cuid())
  tenantId            String    @unique
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup   Boolean   @default(true)
  customLogoUrl       String?
  primaryColor        String?
  accentColor         String?
  features            Json?
  emailTemplates      Json?
}

model JobApplication {
  id                  String    @id @default(cuid())
  tenantId            String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName         String
  jobTitle            String
  status              String
  dateApplied         DateTime
  notes               String[]
  jobDescription      String?
  location            String?
  salary              String?
  reminderDate        DateTime?
  sourceJobOpeningId  String?
  applicationUrl      String?
  resumeIdUsed        String?
  coverLetterText     String?
  interviews          Interview[]
}

model Interview {
  id                String          @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model CommunityPost {
  id                String              @id @default(cuid())
  tenantId          String
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  timestamp         DateTime            @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  comments          CommunityComment[]
  bookmarkedBy      String[]
}

model CommunityComment {
  id          String        @id @default(cuid())
  postId      String
  post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  timestamp   DateTime      @default(now())
  comment     String
  parentId    String?
}

model Badge {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String
  icon              String
  xpReward          Int?
  triggerCondition  String?
}

model GamificationRule {
  actionId    String  @id
  description String
  xpPoints    Int
}

model Announcement {
  id              String    @id @default(cuid())
  title           String
  content         String
  startDate       DateTime
  endDate         DateTime?
  audience        String
  audienceTarget  String?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String
  tenantId        String?
}

model Appointment {
  id              String    @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User      @relation("Requester", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User      @relation("Alumni", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
}

model ResumeProfile {
  id            String    @id @default(cuid())
  tenantId      String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  resumeText    String
  lastAnalyzed  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ResumeScanHistory {
  id                  String    @id @default(cuid())
  tenantId            String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime  @default(now())
  matchScore          Int?
  bookmarked          Boolean?
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String
  creator         User      @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  approved        Boolean?
  createdAt       DateTime  @default(now())
  bookmarkedBy    String[]
}

model JobOpening {
  id                String    @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime  @default(now())
  type              String
  postedByAlumniId  String
  postedBy          User      @relation("PostedBy", fields: [postedByAlumniId], references: [id], onDelete: Cascade)
  alumniName        String
  applicationLink   String?
}

// Added models for remaining mock data
model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  timestamp   DateTime @default(now())
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletTransaction {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
}
