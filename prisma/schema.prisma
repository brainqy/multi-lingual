// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Language {
  code String @id @unique
  name String
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  settings  TenantSettings?
  jobOpenings JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles ResumeProfile[]
  resumeScanHistories ResumeScanHistory[]
  communityPosts CommunityPost[]
  featureRequests FeatureRequest[]
  galleryEvents GalleryEvent[]
  appointmentsAsRequester Appointment[] @relation("RequesterAppointments")
  appointmentsAsAlumni Appointment[] @relation("AlumniAppointments")
  surveys Survey[]
  surveyResponses SurveyResponse[]
  announcements Announcement[]
  emailTemplates EmailTemplate[]
  activities Activity[]
  promoCodes PromoCode[]
}

model TenantSettings {
  id                      String   @id @default(cuid())
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                String   @unique
  allowPublicSignup       Boolean  @default(true)
  customLogoUrl           String?
  primaryColor            String?
  accentColor             String?
  features                Json?
  emailTemplates          Json?
}

model User {
  id                          String    @id @default(cuid())
  tenant                      Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId                    String?
  name                        String
  email                       String    @unique
  password                    String?
  role                        String    @default("user") // admin, manager, user
  status                      String    @default("active") // active, inactive, suspended, pending, PENDING_DELETION
  lastLogin                   DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  sessionId                   String?   @unique
  
  // Profile Fields
  dateOfBirth                 String?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  currentJobTitle             String?
  currentOrganization         String?
  company                     String?
  university                  String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  skills                      String[]
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  profilePictureUrl           String?
  resumeText                  String?
  careerInterests             String?
  bio                         String?
  interests                   String[]
  userApiKey                  String?

  // Gamification Fields
  xpPoints                    Int?      @default(0)
  dailyStreak                 Int?      @default(0)
  longestStreak               Int?      @default(0)
  totalActiveDays             Int?      @default(0)
  weeklyActivity              Int[]
  earnedBadges                String[]
  isDistinguished             Boolean?  @default(false)
  streakFreezes               Int?      @default(0)
  referralCode                String?   @unique
  challengeTopics             String[]
  completedChallengeIds       String[]
  completedFlipTaskIds        String[]
  currentFlipChallenge        Json?
  flipChallengeAssignedAt     String?
  flipChallengeProgressStart  Json?

  // Notification Preferences
  emailNotificationsEnabled   Boolean?  @default(true)
  appNotificationsEnabled     Boolean?  @default(true)
  gamificationNotificationsEnabled Boolean? @default(true)
  referralNotificationsEnabled   Boolean? @default(true)
  
  // Dashboard Customization
  dashboardWidgets            Json?

  // Relations
  jobOpenings                 JobOpening[]
  jobApplications             JobApplication[]
  resumeProfiles              ResumeProfile[]
  resumeScanHistories         ResumeScanHistory[]
  communityPosts              CommunityPost[]
  communityComments           CommunityComment[]
  featureRequests             FeatureRequest[]
  galleryEventsCreated        GalleryEvent[]
  galleryEventsAttended       GalleryEvent[] @relation(fields: [galleryEventIds], references: [id])
  galleryEventIds             String[]
  appointmentsAsRequester     Appointment[] @relation("RequesterAppointments")
  appointmentsAsAlumni        Appointment[] @relation("AlumniAppointments")
  surveyResponses             SurveyResponse[]
  announcementsCreated        Announcement[]
  wallet                      Wallet?
  referralHistory             ReferralHistory[] @relation("UserReferrals")
  referredByHistory           ReferralHistory? @relation("ReferredUser")
  affiliateProfile            Affiliate?
  affiliateSignups            AffiliateSignup[]
  notifications               Notification[]
  nominationsMade             Nomination[] @relation("NominatorUser")
  nominationsReceived         Nomination[] @relation("NomineeUser")
  votes                       Vote[] @relation("VoterUser")
  awardWins                   Award[] @relation("WinnerUser")
  promoCodeRedemptions        UserPromoCodeRedemption[]
  activities                  Activity[]
}

model Wallet {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique
  coins        Int       @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Float
  type        String // 'credit' or 'debit'
  currency    String   @default("coins") // 'coins' or 'xp'
}

model JobOpening {
  id                String   @id @default(cuid())
  tenant            Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId          String?
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String
  postedByAlumni    User     @relation(fields: [postedByAlumniId], references: [id])
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenant             Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId           String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String   @id @default(cuid())
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId  String
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id            String   @id @default(cuid())
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId      String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  name          String
  resumeText    String
  lastAnalyzed  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenant              Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId            String?
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}

model CommunityPost {
  id                 String   @id @default(cuid())
  tenant             Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId           String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  userName           String
  userAvatar         String?
  timestamp          DateTime @default(now())
  content            String?
  type               String // text, poll, event, request
  tags               String[]
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?     @default(0)
  capacity           Int?     @default(0)
  assignedTo         String?
  status             String?  // open, in progress, completed
  moderationStatus   String   // visible, flagged, removed
  flagCount          Int      @default(0)
  flagReasons        String[]
  likes              Int?     @default(0)
  likedBy            String[]
  comments           CommunityComment[]
  bookmarkedBy       String[]
  votedBy            String[]
  registeredBy       String[]
  flaggedBy          String[]
  isPinned           Boolean? @default(false)
}

model CommunityComment {
  id          String   @id @default(cuid())
  post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  blogPost    BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  comment     String
  parent      CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?
  replies     CommunityComment[] @relation("CommentReplies")
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model FeatureRequest {
  id           String   @id @default(cuid())
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId     String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  userName     String
  userAvatar   String?
  timestamp    DateTime @default(now())
  title        String
  description  String
  status       String
  upvotes      Int?     @default(0)
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId        String?
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean? @default(false)
  createdBy       User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  attendees       User[]   @relation(fields: [attendeeUserIds], references: [id])
  attendeeUserIds String[]
  deletedAt       DateTime?
}

model Appointment {
  id              String   @id @default(cuid())
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId        String?
  requester       User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  requesterUserId String
  alumni          User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  alumniUserId    String
  withUser        String
  title           String
  dateTime        DateTime
  status          String // Pending, Confirmed, Cancelled, Completed
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    String?
  isAssignedByAdmin Boolean? @default(false)
}

model PlatformSettings {
  id                             String   @id @default(cuid())
  platformName                   String
  maintenanceMode                Boolean  @default(false)
  communityFeedEnabled           Boolean  @default(true)
  autoModeratePosts              Boolean  @default(true)
  jobBoardEnabled                Boolean  @default(true)
  maxJobPostingDays              Int      @default(30)
  gamificationEnabled            Boolean  @default(true)
  xpForLogin                     Int      @default(10)
  xpForNewPost                   Int      @default(20)
  resumeAnalyzerEnabled          Boolean  @default(true)
  aiResumeWriterEnabled          Boolean  @default(true)
  coverLetterGeneratorEnabled    Boolean  @default(true)
  mockInterviewEnabled           Boolean  @default(true)
  aiMockInterviewCost            Int      @default(25)
  referralsEnabled               Boolean  @default(true)
  affiliateProgramEnabled        Boolean  @default(true)
  alumniConnectEnabled           Boolean  @default(true)
  defaultAppointmentCost         Int      @default(10)
  featureRequestsEnabled         Boolean  @default(true)
  allowTenantCustomBranding      Boolean  @default(true)
  allowTenantEmailCustomization  Boolean  @default(false)
  allowUserApiKey                Boolean? @default(true)
  defaultProfileVisibility       String   @default("alumni_only")
  maxResumeUploadsPerUser        Int      @default(5)
  defaultTheme                   String   @default("light")
  enablePublicProfilePages       Boolean  @default(false)
  sessionTimeoutMinutes          Int      @default(60)
  maxEventRegistrationsPerUser   Int?     @default(3)
  globalAnnouncement             String?
  pointsForAffiliateSignup       Int?     @default(50)
  walletEnabled                  Boolean? @default(true)
}

model Survey {
  id          String   @id @default(cuid())
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId    String?
  name        String   @unique
  description String?
  steps       Json
  createdAt   DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId     String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  userName     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyId     String
  surveyName   String
  responseDate DateTime @default(now())
  data         Json
}

model Announcement {
  id              String   @id @default(cuid())
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId        String?
  title           String
  content         String
  startDate       DateTime
  endDate         DateTime?
  audience        String // All Users, Specific Tenant, Specific Role
  audienceTarget  String?
  status          String // Draft, Published, Archived
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  deletedAt       DateTime?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId    String?
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int      @default(0)
  isActive    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  redemptions UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  promoCode    PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  promoCodeId  String
  redeemedAt   DateTime  @default(now())

  @@id([userId, promoCodeId])
}

model Activity {
  id          String   @id @default(cuid())
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId    String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  timestamp   DateTime @default(now())
  description String
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  questions           Json
  answers             Json
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model InterviewQuestion {
  id             String   @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean? @default(false)
  mcqOptions     Json?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?   @default(0)
  ratingsCount   Int?     @default(0)
  userRatings    Json?
  userComments   Json?
  createdBy      String?
  approved       Boolean? @default(true)
  createdAt      DateTime @default(now())
  bookmarkedBy   String[]
  baseScore      Int?     @default(10)
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model ReferralHistory {
  id                  String   @id @default(cuid())
  referrer            User     @relation("UserReferrals", fields: [referrerUserId], references: [id])
  referrerUserId      String
  referredUser        User     @relation("ReferredUser", fields: [referredUserId], references: [id])
  referredUserId      String   @unique
  referredEmailOrName String
  referralDate        DateTime
  status              String
  rewardAmount        Float?
}

model Affiliate {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  name             String
  email            String
  status           String // pending, approved, rejected
  affiliateCode    String   @unique
  commissionTier   CommissionTier @relation(fields: [commissionTierId], references: [id])
  commissionTierId String
  totalEarned      Float?   @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
}

model CommissionTier {
  id                  String @id @default(cuid())
  name                String @unique
  milestoneRequirement Int   @unique // Number of signups required
  commissionRate      Float
  affiliates          Affiliate[]
}


model AffiliateClick {
  id                String   @id @default(cuid())
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId       String
  timestamp         DateTime @default(now())
  ipAddress         String?
  convertedToSignup Boolean  @default(false)
}

model AffiliateSignup {
  id                 String   @id @default(cuid())
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId        String
  newUser            User     @relation(fields: [newUserId], references: [id])
  newUserId          String   @unique
  signupDate         DateTime @default(now())
  commissionEarned   Float?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
}

model ProductCompany {
  id             String  @id @default(cuid())
  name           String
  location       String
  websiteUrl     String
  domain         String
  hrName         String?
  hrEmail        String?
  contactNumber  String?
  logoUrl        String?
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AwardCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String      @id @default(cuid())
  title               String
  description         String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  categoryId          String
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String // Draft, Nominating, Voting, Completed
  winner              User?    @relation("WinnerUser", fields: [winnerId], references: [id])
  winnerId            String?  @unique
  nominations         Nomination[]
}

model Nomination {
  id            String   @id @default(cuid())
  award         Award    @relation(fields: [awardId], references: [id])
  awardId       String
  nominee       User     @relation("NomineeUser", fields: [nomineeId], references: [id])
  nomineeId     String
  nominator     User     @relation("NominatorUser", fields: [nominatorId], references: [id])
  nominatorId   String
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]
}

model Vote {
  id            String     @id @default(cuid())
  nomination    Nomination @relation(fields: [nominationId], references: [id])
  nominationId  String
  voter         User       @relation("VoterUser", fields: [voterId], references: [id])
  voterId       String
  createdAt     DateTime   @default(now())
}

model EmailTemplate {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  type      String   // WELCOME, APPOINTMENT_REMINDER, etc.
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, type])
}
