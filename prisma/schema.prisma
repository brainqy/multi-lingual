// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String      @id @default(cuid())
  name                             String
  email                            String      @unique
  password                         String?
  role                             UserRole    @default(user)
  profilePictureUrl                String?
  tenantId                         String
  sessionId                        String?
  lastLogin                        DateTime?
  createdAt                        DateTime    @default(now())
  status                           UserStatus?
  dailyStreak                      Int?        @default(0)
  longestStreak                    Int?        @default(0)
  lastStreakCheck                  DateTime?
  xpPoints                         Int?        @default(0)
  earnedBadges                     String[]
  challengeTopics                  Json?
  challengeProgress                Json?
  completedChallengeIds            String[]
  currentFlipChallenge             Json?
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json?
  dateOfBirth                      DateTime?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           String[]
  areasOfSupport                   String[]
  timeCommitment                   String?
  preferredEngagementMode          String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?
  featureInSpotlightConsent        Boolean?
  resumeText                       String?
  careerInterests                  String?
  bio                              String?
  userApiKey                       String?
  interests                        String[]
  isDistinguished                  Boolean?
  appointmentCoinCost              Int?
  referralCode                     String?     @unique
  streakFreezes                    Int?        @default(0)
  emailNotificationsEnabled        Boolean?
  appNotificationsEnabled          Boolean?
  gamificationNotificationsEnabled Boolean?
  referralNotificationsEnabled     Boolean?
  dashboardWidgets                 Json?
  weeklyActivity                   Int[]

  tenant                  Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  notifications           Notification[]
  appointmentsAsRequester Appointment[]             @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[]             @relation("AlumniAppointments")
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  createdGalleryEvents    GalleryEvent[]
  attendedGalleryEvents   GalleryEvent[]            @relation("EventAttendees")
  surveysResponded        SurveyResponse[]
  createdMockInterviews   MockInterviewSession[]
  wallet                  Wallet?
  promoCodeRedemptions    UserPromoCodeRedemption[]
  referrals               ReferralHistory[]
  affiliateProfile        Affiliate?
  nominationsMade         Nomination[]              @relation("Nominator")
  nominationsReceived     Nomination[]              @relation("Nominee")
  votesCast               Vote[]
}

enum UserRole {
  user
  manager
  admin
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  PENDING_DELETION
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())

  users      User[]
  settings   TenantSettings?
  promoCodes PromoCode[]
}

model TenantSettings {
  id                        String  @id @default(cuid())
  tenantId                  String  @unique
  allowPublicSignup         Boolean @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
  emailTemplates            EmailTemplate[]

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id        String            @id @default(cuid())
  tenantId  String
  type      EmailTemplateType
  subject   String
  body      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  tenant TenantSettings @relation(fields: [tenantId], references: [tenantId])

  @@unique([tenantId, type])
}

enum EmailTemplateType {
  WELCOME
  TENANT_WELCOME
  APPOINTMENT_CONFIRMATION
  PASSWORD_RESET
  PRACTICE_INTERVIEW_INVITE
}

model JobApplication {
  id                 String      @id @default(cuid())
  userId             String
  tenantId           String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  applicationUrl     String?
  salary             String?
  resumeIdUsed       String?
  coverLetterText    String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  interviews         Interview[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  notes            String?

  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model ResumeProfile {
  id           String    @id @default(cuid())
  userId       String
  tenantId     String
  name         String
  resumeText   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastAnalyzed DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  scanDate            DateTime @default(now())
  matchScore          Int?
  resumeTextSnapshot  String
  jobDescriptionText  String
  bookmarked          Boolean? @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id                String    @id @default(cuid())
  tenantId          String
  requesterUserId   String
  alumniUserId      String
  title             String
  dateTime          DateTime
  status            String
  notes             String?
  withUser          String
  costInCoins       Int
  reminderDate      DateTime?
  isAssignedByAdmin Boolean?

  requesterUser User @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUser    User @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  content           String?
  type              String
  imageUrl          String?
  tags              String[]
  moderationStatus  String
  flagCount         Int?
  flagReasons       String[]
  flaggedBy         String[]
  likes             Int?
  likedBy           String[]
  isPinned          Boolean?
  timestamp         DateTime           @default(now())
  comments          CommunityComment[]
  pollOptions       Json?
  votedBy           String[]
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  registeredBy      String[]
  assignedTo        String?
  status            String?
  bookmarkedBy      String[]
  deletedAt         DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String?
  blogPostId String?
  userId     String
  userName   String
  userAvatar String?
  comment    String
  timestamp  DateTime @default(now())
  parentId   String?

  post        CommunityPost?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPost    BlogPost?            @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      CommunityComment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[]   @relation("CommentReplies")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  description String
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model DailyChallenge {
  id           String   @id @default(cuid())
  title        String
  description  String
  category     String
  difficulty   String
  xpReward     Int?
  type         String
  solution     String?
  tasks        Json?
  createdAt    DateTime @default(now())
}

model PlatformSettings {
  id                                String  @id @default(cuid())
  platformName                      String
  maintenanceMode                   Boolean
  communityFeedEnabled              Boolean
  autoModeratePosts                 Boolean
  jobBoardEnabled                   Boolean
  maxJobPostingDays                 Int
  gamificationEnabled               Boolean
  xpForLogin                        Int
  xpForNewPost                      Int
  resumeAnalyzerEnabled             Boolean
  aiResumeWriterEnabled             Boolean
  coverLetterGeneratorEnabled       Boolean
  mockInterviewEnabled              Boolean
  aiMockInterviewCost               Int
  aiResumeAnalysisCost              Int?
  aiAlumniConnectionRecCost         Int?
  referralsEnabled                  Boolean
  affiliateProgramEnabled           Boolean
  alumniConnectEnabled              Boolean
  defaultAppointmentCost            Int
  featureRequestsEnabled            Boolean
  allowTenantCustomBranding         Boolean
  allowTenantEmailCustomization     Boolean
  allowUserApiKey                   Boolean?
  defaultProfileVisibility          String
  maxResumeUploadsPerUser           Int?
  defaultTheme                      String?
  enablePublicProfilePages          Boolean?
  sessionTimeoutMinutes             Int?
  maxEventRegistrationsPerUser      Int?
  globalAnnouncement                String?
  pointsForAffiliateSignup          Int?
  walletEnabled                     Boolean
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  targetTenantId String?
  targetRole   UserRole?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  createdByUserId String
  attendeeUserIds String[]
  approved        Boolean?
  isPlatformGlobal Boolean?
  deletedAt       DateTime?

  creator   User   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")
}

model LiveInterviewSession {
  id                    String   @id @default(cuid())
  tenantId              String
  title                 String
  participants          Json
  scheduledTime         DateTime
  status                String
  preSelectedQuestions  Json?
  recordingReferences   Json?
  interviewerScores     Json?
  finalScore            Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  tenantId            String
  topic               String
  description         String?
  jobDescription      String?
  status              String
  createdAt           DateTime @default(now())
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Float?
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
  interviewerScores   Json?
  finalScore          Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id            String   @id @default(cuid())
  questionText  String
  category      String
  difficulty    String?
  isMCQ         Boolean?
  mcqOptions    Json?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  approved      Boolean?
  createdBy     String?
  createdAt     DateTime @default(now())
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  bookmarkedBy  String[]
  baseScore     Int?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  description String
  amount      Float
  type        String
  currency    String
  date        DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model PromoCode {
  id          String                    @id @default(cuid())
  tenantId    String
  code        String                    @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int                       @default(0)
  isActive    Boolean
  createdAt   DateTime                  @default(now())
  deletedAt   DateTime?
  redemptions UserPromoCodeRedemption[]

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model UserPromoCodeRedemption {
  userId      String
  promoCodeId String
  redeemedAt  DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  @@id([userId, promoCodeId])
}

model ReferralHistory {
  id                   String   @id @default(cuid())
  referrerUserId       String
  referredEmailOrName  String
  status               String
  rewardAmount         Int?
  referralDate         DateTime @default(now())
  tenantId             String?

  referrer User @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  email            String
  status           String
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  commissionTierId String
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]

  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissionTier   CommissionTier @relation(fields: [commissionTierId], references: [id])
}

model AffiliateClick {
  id                String   @id @default(cuid())
  affiliateId       String
  timestamp         DateTime @default(now())
  convertedToSignup Boolean

  affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
}

model AffiliateSignup {
  id                 String   @id @default(cuid())
  affiliateId        String
  newUserId          String   @unique
  signupDate         DateTime @default(now())
  commissionEarned   Float?

  affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUser   User      @relation(fields: [newUserId], references: [id])
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String      @unique
  milestoneRequirement Int
  commissionRate       Float
  affiliates           Affiliate[]
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String
  winnerId            String?      @unique
  nominations         Nomination[]

  category AwardCategory @relation(fields: [categoryId], references: [id])
  winner   User?         @relation(fields: [winnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  nomineeId     String
  nominatorId   String
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]

  award     Award @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nominee   User  @relation("Nominee", fields: [nomineeId], references: [id], onDelete: Cascade)
  nominator User  @relation("Nominator", fields: [nominatorId], references: [id], onDelete: Cascade)
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  voterId      String
  createdAt    DateTime   @default(now())
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voter        User       @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([nominationId, voterId])
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  tenantId    String
  createdAt   DateTime         @default(now())
  steps       Json
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model ResumeTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  deletedAt       DateTime?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String   @unique
  location      String
  websiteUrl    String
  domain        String
  logoUrl       String?
  hrName        String?
  hrEmail       String?
  contactNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
