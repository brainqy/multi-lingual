// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String             @id @default(cuid())
  name                             String
  email                            String             @unique
  password                         String?
  role                             UserRole           @default(user)
  profilePictureUrl                String?
  tenantId                         String
  tenant                           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt                        DateTime           @default(now())
  updatedAt                        DateTime           @updatedAt
  sessionId                        String?            @unique
  lastLogin                        DateTime?
  dailyStreak                      Int?               @default(0)
  longestStreak                    Int?               @default(0)
  lastStreakCheck                  DateTime?
  xpPoints                         Int?               @default(0)
  earnedBadges                     String[]
  challengeTopics                  Json?
  challengeProgress                Json?
  completedChallengeIds            String[]
  currentFlipChallenge             Json?
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json?
  dateOfBirth                      DateTime?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           String[]
  areasOfSupport                   String[]
  timeCommitment                   String?
  preferredEngagementMode          String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?           @default(true)
  featureInSpotlightConsent        Boolean?           @default(false)
  resumeText                       String?
  careerInterests                  String?
  bio                              String?
  userApiKey                       String?
  interests                        String[]
  isDistinguished                  Boolean?           @default(false)
  appointmentCoinCost              Int?
  referralCode                     String?            @unique
  streakFreezes                    Int?               @default(0)
  emailNotificationsEnabled        Boolean?           @default(true)
  appNotificationsEnabled          Boolean?           @default(true)
  gamificationNotificationsEnabled Boolean?           @default(true)
  referralNotificationsEnabled     Boolean?           @default(true)
  dashboardWidgets                 Json?
  status                           UserStatus?        @default(active)
  resumeProfiles                   ResumeProfile[]
  resumeScanHistories              ResumeScanHistory[]
  jobApplications                  JobApplication[]
  requesterAppointments            Appointment[]      @relation("RequesterAppointments")
  alumniAppointments               Appointment[]      @relation("AlumniAppointments")
  notifications                    Notification[]
  activities                       Activity[]
  communityPosts                   CommunityPost[]
  communityComments                CommunityComment[]
  affiliateProfile                 Affiliate?
  nominationsAsNominee             Nomination[]       @relation("Nominee")
  nominationsAsNominator           Nomination[]       @relation("Nominator")
  votes                            Vote[]
  surveyResponses                  SurveyResponse[]
  galleryEventsCreated             GalleryEvent[]
  galleryEventsAttended            GalleryEvent[]     @relation("Attendees")
  wallet                           Wallet?
  promoCodeRedemptions             UserPromoCodeRedemption[]
  referralHistory                  ReferralHistory[]
  mockInterviewSessions            MockInterviewSession[]
  interviewQuestionsCreated        InterviewQuestion[]
  
  @@index([tenantId])
}

enum UserRole {
  user
  admin
  manager
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  PENDING_DELETION
}

model Tenant {
  id        String           @id @default(cuid())
  name      String
  domain    String?          @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
}

model PlatformSettings {
  id                              String    @id @default(cuid())
  platformName                    String
  maintenanceMode                 Boolean   @default(false)
  communityFeedEnabled            Boolean   @default(true)
  autoModeratePosts               Boolean   @default(true)
  jobBoardEnabled                 Boolean   @default(true)
  maxJobPostingDays               Int       @default(30)
  gamificationEnabled             Boolean   @default(true)
  xpForLogin                      Int       @default(10)
  xpForNewPost                    Int       @default(20)
  resumeAnalyzerEnabled           Boolean   @default(true)
  aiResumeWriterEnabled           Boolean   @default(true)
  coverLetterGeneratorEnabled     Boolean   @default(true)
  mockInterviewEnabled            Boolean   @default(true)
  aiMockInterviewCost             Int       @default(25)
  aiResumeAnalysisCost            Int?      @default(10)
  aiAlumniConnectionRecCost       Int?      @default(5)
  referralsEnabled                Boolean   @default(true)
  affiliateProgramEnabled         Boolean   @default(true)
  alumniConnectEnabled            Boolean   @default(true)
  defaultAppointmentCost          Int       @default(10)
  featureRequestsEnabled          Boolean   @default(true)
  allowTenantCustomBranding       Boolean   @default(true)
  allowTenantEmailCustomization   Boolean   @default(false)
  allowUserApiKey                 Boolean   @default(true)
  defaultProfileVisibility        String    @default("alumni_only")
  maxResumeUploadsPerUser         Int       @default(5)
  defaultTheme                    String    @default("light")
  enablePublicProfilePages        Boolean   @default(false)
  sessionTimeoutMinutes           Int       @default(60)
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean   @default(true)
}

model ResumeProfile {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId     String
  name         String
  resumeText   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastAnalyzed DateTime?
  @@index([userId])
}

model ResumeScanHistory {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId           String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  scanDate           DateTime  @default(now())
  matchScore         Int?
  resumeTextSnapshot String
  jobDescriptionText String
  bookmarked         Boolean?  @default(false)
  @@index([userId])
}

model JobApplication {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId           String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  applicationUrl     String?
  salary             String?
  resumeIdUsed       String?
  coverLetterText    String?
  reminderDate       String?
  sourceJobOpeningId String?
  interviews         Interview[]
  @@index([userId])
}

model Interview {
  id               String          @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  notes            String?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String
  notes           String?
  withUser        String
  costInCoins     Int
  reminderDate    String?
  isAssignedByAdmin Boolean? @default(false)

  @@index([requesterUserId])
  @@index([alumniUserId])
}

model CommunityPost {
  id                 String             @id @default(cuid())
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName           String
  userAvatar         String?
  content            String?
  type               String
  imageUrl           String?
  tags               String[]
  moderationStatus   String
  flagCount          Int?
  flagReasons        String[]
  flaggedBy          String[]
  likes              Int?
  likedBy            String[]
  isPinned           Boolean?
  timestamp          DateTime           @default(now())
  comments           CommunityComment[]
  pollOptions        Json?
  votedBy            String[]
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  registeredBy       String[]
  assignedTo         String?
  status             String?
  bookmarkedBy       String[]

  @@index([tenantId])
  @@index([userId])
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  comment    String
  timestamp  DateTime       @default(now())
  parentId   String?
  parent     CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("Replies")

  @@index([postId])
  @@index([blogPostId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  @@index([userId])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  tenantId    String?
  description String
  timestamp   DateTime @default(now())
  @@index([userId])
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Language {
  code String @id @unique
  name String @unique
}

model Announcement {
  id              String    @id @default(cuid())
  title           String
  content         String
  startDate       DateTime
  endDate         DateTime?
  status          String
  createdByUserId String
  user            User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tenantId        String?
  targetTenantId  String?
  targetRole      String?
  deletedAt       DateTime?

  @@index([createdByUserId])
}

model PromotionalContent {
  id             String    @id @default(cuid())
  isActive       Boolean   @default(false)
  title          String
  description    String
  imageUrl       String
  imageAlt       String
  imageHint      String?
  buttonText     String
  buttonLink     String
  gradientFrom   String?
  gradientVia    String?
  gradientTo     String?
  targetTenantId String?
  targetRole     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  createdByUserId String
  user            User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  attendeeUserIds String[]
  attendees       User[]   @relation("Attendees")
  approved        Boolean? @default(false)
  isPlatformGlobal Boolean? @default(false)
  deletedAt       DateTime?

  @@index([createdByUserId])
  @@index([tenantId])
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  type        String // 'credit' or 'debit'
  currency    String // 'coins' or 'xp'
  date        DateTime @default(now())
  @@index([walletId])
}

model PromoCode {
  id        String   @id @default(cuid())
  tenantId  String?
  code      String   @unique
  description String
  rewardType String
  rewardValue Int
  expiresAt DateTime?
  usageLimit Int
  timesUsed Int @default(0)
  isActive  Boolean
  createdAt DateTime @default(now())
  deletedAt DateTime?
  redeemedBy UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime  @default(now())

  @@id([userId, promoCodeId])
}

model ReferralHistory {
  id                 String   @id @default(cuid())
  referrerUserId     String
  referrerUser       User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
  referredEmailOrName String
  status             String
  rewardAmount       Int?
  referralDate       DateTime @default(now())
  tenantId           String?
  
  @@index([referrerUserId])
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId            String?
  topic               String
  description         String?
  jobDescription      String?
  status              String
  createdAt           DateTime @default(now())
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Int?
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
  interviewerScores   Json?
  finalScore          Json?

  @@index([userId])
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  questionText    String
  category        String
  difficulty      String?
  isMCQ           Boolean?  @default(false)
  mcqOptions      Json?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  approved        Boolean?  @default(true)
  createdBy       String?
  user            User?     @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  createdAt       DateTime? @default(now())
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  bookmarkedBy    String[]
  baseScore       Int?
}

model Affiliate {
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  name String
  email String
  status String @default("pending") // e.g., pending, approved, rejected
  affiliateCode String @unique
  commissionRate Float
  totalEarned Float @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commissionTierId String
  commissionTier CommissionTier @relation(fields: [commissionTierId], references: [id])
  clicks AffiliateClick[]
  signups AffiliateSignup[]
}

model AffiliateClick {
  id String @id @default(cuid())
  affiliateId String
  affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  convertedToSignup Boolean @default(false)
  @@index([affiliateId])
}

model AffiliateSignup {
  id String @id @default(cuid())
  affiliateId String
  affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUserId String @unique
  signupDate DateTime @default(now())
  commissionEarned Float?
  @@index([affiliateId])
}

model CommissionTier {
  id String @id @default(cuid())
  name String @unique
  milestoneRequirement Int // e.g., number of signups needed to reach this tier
  commissionRate Float // e.g., 0.15 for 15%
  affiliates Affiliate[]
}

model AwardCategory {
  id String @id @default(cuid())
  name String @unique
  description String?
  awards Award[]
}

model Award {
  id String @id @default(cuid())
  title String
  description String
  categoryId String
  category AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate DateTime
  votingStartDate DateTime
  votingEndDate DateTime
  status String // Draft, Nominating, Voting, Completed
  winnerId String? @unique
  winner User? @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  nominations Nomination[]
}

model Nomination {
  id String @id @default(cuid())
  awardId String
  award Award @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId String
  nominee User @relation("Nominee", fields: [nomineeId], references: [id], onDelete: Cascade)
  nominatorId String
  nominator User @relation("Nominator", fields: [nominatorId], references: [id], onDelete: Cascade)
  justification String
  createdAt DateTime @default(now())
  votes Vote[]
  @@index([awardId])
  @@index([nomineeId])
}

model Vote {
  id String @id @default(cuid())
  nominationId String
  nomination Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId String
  voter User @relation(fields: [voterId], references: [id], onDelete: Cascade)
  @@unique([nominationId, voterId])
  @@index([voterId])
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  tenantId    String
  createdAt   DateTime @default(now())
  steps       Json
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyName   String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
  @@index([userId])
  @@index([surveyId])
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model ResumeTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String   // Can be JSON or Handlebars template
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?  // 'left', 'center', 'right'
  deletedAt       DateTime?
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String   @unique
  location      String
  websiteUrl    String
  domain        String
  logoUrl       String?
  hrName        String?
  hrEmail       String?
  contactNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum EmailTemplateType {
  WELCOME
  TENANT_WELCOME
  APPOINTMENT_CONFIRMATION
  PASSWORD_RESET
}

model EmailTemplate {
  id        String            @id @default(cuid())
  tenantId  String
  type      EmailTemplateType
  subject   String
  body      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([tenantId, type])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  title       String
  description String
  status      String   // e.g., 'Pending', 'In Progress', 'Completed', 'Rejected'
  timestamp   DateTime @default(now())
  upvotes     Int      @default(0)

  @@index([userId])
}
