// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  name                      String
  email                     String                 @unique
  password                  String?
  role                      UserRole
  status                    UserStatus?
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  sessionId                 String?
  currentJobTitle           String?
  currentOrganization       String?
  company                   String?
  skills                    String[]
  bio                       String?
  profilePictureUrl         String?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  earnedBadges              String[]
  interviewCredits          Int?
  isDistinguished           Boolean?
  shortBio                  String?
  university                String?
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  careerInterests           String?
  interests                 String[]
  userApiKey                String?
  challengeTopics           String[]
  challengeProgress         Json?
  referralCode              String?                @unique
  streakFreezes             Int?
  wallet                    Wallet?
  activities                Activity[]
  mockInterviewSessions     MockInterviewSession[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  jobOpenings               JobOpening[]
  jobApplications           JobApplication[]
  referralsMade             ReferralHistoryItem[]  @relation("ReferredBy")
  referralsReceived         ReferralHistoryItem[]  @relation("ReferredUser")
  affiliateProfile          Affiliate?
  affiliateSignups          AffiliateSignup[]
  resumeProfiles            ResumeProfile[]
  scanHistories             ResumeScanHistoryItem[]
  surveys                   Survey[]
  surveyResponses           SurveyResponse[]
  createdQuestions          InterviewQuestion[]
  productCompanies          ProductCompany[]
  announcements             Announcement[]
  referralHistory           ReferralHistoryItem[]
}

model Tenant {
  id                String                 @id @default(cuid())
  name              String
  domain            String?                @unique
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  settings          TenantSettings?
  users             User[]
  jobOpenings       JobOpening[]
  jobApplications   JobApplication[]
  resumeProfiles    ResumeProfile[]
  scanHistories     ResumeScanHistoryItem[]
  communityPosts    CommunityPost[]
  announcements     Announcement[]
  surveys           Survey[]
  surveyResponses   SurveyResponse[]
  appointments      Appointment[]
  activities        Activity[]
  productCompanies  ProductCompany[]
  referralHistory   ReferralHistoryItem[]
  communityComments CommunityComment[]
}

model TenantSettings {
  id                            String   @id @default(cuid())
  tenantId                      String   @unique
  tenant                        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup             Boolean  @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  welcomeEmailTemplate          String?
  appointmentReminderTemplate   String?
  communityDigestTemplate       String?
  jobAlertTemplate              String?
  newsletterTemplate            String?
  eventInvitationTemplate       String?
  eventReminderTemplate         String?
  referralInviteTemplate        String?
  affiliateWelcomeTemplate      String?
  passwordResetTemplate         String?
  accountVerificationTemplate   String?
  invoiceReceiptTemplate        String?
  courseCompletionTemplate      String?
  feedbackRequestTemplate       String?
  newFollowerTemplate           String?
  newMessageTemplate            String?
  reportGeneratedTemplate       String?
  badgeUnlockedTemplate         String?
  dailyChallengeTemplate        String?
  promotionalOfferTemplate      String?
  accountSuspensionTemplate     String?
  accountDeletionTemplate       String?
  dataExportReadyTemplate       String?
  supportTicketUpdateTemplate   String?
  webinarReminderTemplate       String?
  subscriptionRenewalTemplate   String?
  paymentFailedTemplate         String?
  cardExpiringTemplate          String?
  userInvitationTemplate        String?
  projectInvitationTemplate     String?
  teamInvitationTemplate        String?
  monthlyRecapTemplate          String?
  weeklyRecapTemplate           String?
  dailyRecapTemplate            String?
  postCommentNotification       String?
  postLikeNotification          String?
  newPostInGroupNotification    String?
  eventUpdateNotification       String?
  newJobOpeningNotification     String?
  applicationStatusNotification String?
  mentionNotification           String?
  directMessageNotification     String?
  friendRequestNotification     String?
}

model ProductCompany {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  description String
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model InterviewQuestion {
  id              String                    @id @default(cuid())
  category        InterviewQuestionCategory
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      InterviewQuestionDifficulty?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String
  user            User                      @relation(fields: [createdBy], references: [id])
  approved        Boolean?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  bookmarkedBy    String[]
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                      String               @id @default(cuid())
  sessionId               String
  session                 MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId              String
  questionText            String
  userAnswer              String
  aiFeedback              String?
  aiScore                 Int?
  strengths               String[]
  areasForImprovement     String[]
  suggestedImprovements   String[]
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation(name: "BlogPostComments")
  bookmarkedBy String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Announcement {
  id             String               @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       AnnouncementAudience
  audienceTarget String?
  status         AnnouncementStatus
  createdBy      String
  user           User                 @relation(fields: [createdBy], references: [id])
  tenantId       String?
  tenant         Tenant?              @relation(fields: [tenantId], references: [id])
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ResumeScanHistoryItem {
  id                   String        @id @default(cuid())
  tenantId             String
  tenant               Tenant        @relation(fields: [tenantId], references: [id])
  userId               String
  user                 User          @relation(fields: [userId], references: [id])
  resumeId             String
  resumeProfile        ResumeProfile @relation(fields: [resumeId], references: [id])
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime      @default(now())
  matchScore           Int?
  bookmarked           Boolean?
}

enum UserRole {
  admin
  manager
  user
}

enum UserStatus {
  active
  inactive
  pending
  suspended
  PENDING_DELETION
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  RoleSpecific
  Analytical
  HR
  Situational
  ProblemSolving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

enum AnnouncementStatus {
  Draft
  Published
  Archived
}

enum AnnouncementAudience {
  AllUsers
  SpecificTenant
  SpecificRole
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  comments         CommunityComment[] @relation(name: "CommunityPostComments")
  bookmarkedBy     String[]
  votedBy          String[]
  registeredBy     String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model CommunityComment {
  id          String       @id @default(cuid())
  postId      String?
  post        CommunityPost? @relation(name: "CommunityPostComments", fields: [postId], references: [id])
  blogPostId  String?
  blogPost    BlogPost?    @relation(name: "BlogPostComments", fields: [blogPostId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime     @default(now())
  comment     String
  parentId    String?
  parent      CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[] @relation("CommentReplies")
  tenantId    String?
  tenant      Tenant?      @relation(fields: [tenantId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  user             User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  interviewerEmail  String?
  interviewerMobile String?
  notes             String[]
}

model ResumeProfile {
  id           String                  @id @default(cuid())
  tenantId     String
  tenant       Tenant                  @relation(fields: [tenantId], references: [id])
  userId       String
  user         User                    @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  scanHistory  ResumeScanHistoryItem[]
}

model Survey {
  id          String           @id @default(cuid())
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  name        String           @unique
  description String
  steps       Json
  responses   SurveyResponse[]
  createdBy   String
  user        User             @relation(fields: [createdBy], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model SurveyResponse {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  responseDate DateTime @default(now())
  data         Json
}

model ReferralHistoryItem {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  referrerUserId  String
  referrerUser    User     @relation("ReferredBy", fields: [referrerUserId], references: [id])
  referredUserId  String?
  referredUser    User?    @relation("ReferredUser", fields: [referredUserId], references: [id])
  referredEmail   String
  referralDate    DateTime @default(now())
  status          String
  rewardAmount    Int?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  userAgent         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  user               User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
  commissionStatus   String    @default("pending")
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PlatformSettings {
  id                            String   @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean  @default(false)
  communityFeedEnabled          Boolean  @default(true)
  autoModeratePosts             Boolean  @default(true)
  jobBoardEnabled               Boolean  @default(true)
  maxJobPostingDays             Int      @default(30)
  gamificationEnabled           Boolean  @default(true)
  xpForLogin                    Int      @default(10)
  xpForNewPost                  Int      @default(20)
  resumeAnalyzerEnabled         Boolean  @default(true)
  aiResumeWriterEnabled         Boolean  @default(true)
  coverLetterGeneratorEnabled   Boolean  @default(true)
  mockInterviewEnabled          Boolean  @default(true)
  referralsEnabled              Boolean  @default(true)
  affiliateProgramEnabled       Boolean  @default(true)
  alumniConnectEnabled          Boolean  @default(true)
  defaultAppointmentCost        Int      @default(10)
  featureRequestsEnabled        Boolean  @default(true)
  allowTenantCustomBranding     Boolean  @default(true)
  allowTenantEmailCustomization Boolean  @default(false)
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String   @default("alumni_only")
  maxResumeUploadsPerUser       Int      @default(5)
  defaultTheme                  String   @default("light")
  enablePublicProfilePages      Boolean  @default(false)
  sessionTimeoutMinutes         Int      @default(60)
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean? @default(true)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model Badge {
  id                 String   @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int       @default(0)
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean? @default(true)
  createdByUserId String?
  attendeeUserIds String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ResumeTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String
  previewImageUrl  String
  category         String
  dataAiHint       String?
  content          String
  headerColor      String?
  bodyColor        String?
  headerFontSize   String?
  textAlign        String?
  layout           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
