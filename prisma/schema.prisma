// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(cuid())
  tenantId                  String?
  name                      String
  email                     String      @unique
  role                      String
  status                    String?
  lastLogin                 DateTime?
  dateOfBirth               DateTime?   @db.Date
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    Json?
  areasOfSupport            Json?
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 Json?
  offersHelpWith            Json?
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Json?
  referralCode              String?
  earnedBadges              Json?
  affiliateCode             String?
  pastInterviewSessions     Json?
  interviewCredits          Int?
  createdAt                 DateTime    @default(now())
  isDistinguished           Boolean?
  userApiKey                String?
  challengeTopics           Json?
  shortBio                  String?
  university                String?
  sessionId                 String?     @unique(sort: Desc)

  tenant               Tenant?            @relation(fields: [tenantId], references: [id])
  jobApplications      JobApplication[]
  resumeScanHistories  ResumeScanHistory[]
  communityPosts       CommunityPost[]
  comments             CommunityComment[]
  appointmentsAsRequester Appointment[] @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[] @relation("AlumniAppointments")
  activities           Activity[]
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                  String   @id @default(cuid())
  tenantId            String   @unique
  allowPublicSignup   Boolean  @default(true)
  customLogoUrl       String?
  primaryColor        String?
  accentColor         String?
  features            Json?
  emailTemplates      Json?
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id                  String      @id @default(cuid())
  userId              String
  tenantId            String?
  companyName         String
  jobTitle            String
  status              String
  dateApplied         DateTime    @db.Date
  notes               String[]
  jobDescription      String?
  location            String?
  salary              String?
  reminderDate        DateTime?   @db.Timestamp(6)
  sourceJobOpeningId  String?
  applicationUrl      String?
  resumeIdUsed        String?
  coverLetterText     String?
  
  user        User          @relation(fields: [userId], references: [id])
  interviews  Interview[]
}

model Interview {
  id                String          @id @default(cuid())
  jobApplicationId  String
  date              DateTime        @db.Timestamp(6)
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
  
  jobApplication    JobApplication  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  userId              String
  tenantId            String?
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?

  user User @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id                 String   @id @default(cuid())
  userId             String
  tenantId           String?
  userName           String
  userAvatar         String?
  timestamp          DateTime @default(now())
  content            String?
  type               String
  tags               String[]
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  assignedTo         String?
  status             String?
  moderationStatus   String
  flagCount          Int
  bookmarkedBy       String[]

  user     User               @relation(fields: [userId], references: [id])
  comments  CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id])
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String?
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime @db.Timestamp(6)
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime? @db.Timestamp(6)

  requester User @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumni    User @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String?
  timestamp   DateTime @default(now())
  description String

  user User @relation(fields: [userId], references: [id])
}

model Badge {
  id              String  @id @default(cuid())
  name            String
  description     String
  icon            String
  xpReward        Int?
  triggerCondition String?
}
