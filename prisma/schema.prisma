// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String                @id @default(cuid())
  name                             String
  email                            String                @unique
  password                         String?
  role                             UserRole              @default(user)
  profilePictureUrl                String?
  tenantId                         String                @default("platform")
  tenant                           Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionId                        String?
  lastLogin                        DateTime?
  createdAt                        DateTime              @default(now())
  status                           UserStatus?
  dailyStreak                      Int?                  @default(0)
  longestStreak                    Int?                  @default(0)
  lastStreakCheck                  DateTime?
  xpPoints                         Int?                  @default(0)
  earnedBadges                     String[]
  challengeTopics                  Json?
  challengeProgress                Json?
  completedChallengeIds            String[]
  currentFlipChallenge             Json?
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json?
  dateOfBirth                      DateTime?
  gender                           String?
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           String[]
  areasOfSupport                   String[]
  timeCommitment                   String?
  preferredEngagementMode          String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?
  featureInSpotlightConsent        Boolean?
  resumeText                       String?
  careerInterests                  String?
  bio                              String?
  userApiKey                       String?
  interests                        String[]
  isDistinguished                  Boolean?
  appointmentCoinCost              Int?
  referralCode                     String?               @unique
  streakFreezes                    Int?                  @default(0)
  emailNotificationsEnabled        Boolean?
  appNotificationsEnabled          Boolean?
  gamificationNotificationsEnabled Boolean?
  referralNotificationsEnabled     Boolean?
  dashboardWidgets                 Json?
  jobApplications                  JobApplication[]
  resumeProfiles                   ResumeProfile[]
  resumeScanHistories              ResumeScanHistory[]
  communityPosts                   CommunityPost[]
  communityComments                CommunityComment[]
  notifications                    Notification[]
  appointmentsAsRequester          Appointment[]         @relation("RequesterAppointments")
  appointmentsAsAlumni             Appointment[]         @relation("AlumniAppointments")
  galleryEventsCreated             GalleryEvent[]
  affiliateProfile                 Affiliate?
  affiliateSignups                 AffiliateSignup[]
  nominations                      Nomination[]          @relation("Nominee")
  nominationsBy                    Nomination[]          @relation("Nominator")
  votes                            Vote[]
  referralHistory                  ReferralHistory[]
  wallet                           Wallet?
  userPromoCodeRedemptions         UserPromoCodeRedemption[]
  mockInterviewSessions            MockInterviewSession[]
  interviewerScores                InterviewerScore[]

  // Soft delete fields
  deletedAt DateTime?
}

model Tenant {
  id          String           @id @default(cuid())
  name        String
  domain      String?          @unique
  createdAt   DateTime         @default(now())
  users       User[]
  settings    TenantSettings?
  promoCodes  PromoCode[]
  announcements Announcement[]
  jobOpenings JobOpening[]
  galleryEvents GalleryEvent[]
  referralHistory ReferralHistory[]
  emailTemplates EmailTemplate[]
  mockInterviewSessions MockInterviewSession[]
}

model TenantSettings {
  id                        String    @id @default(cuid())
  tenantId                  String    @unique
  tenant                    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup         Boolean   @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
}

model PlatformSettings {
  id                               String    @id @default("settings")
  platformName                     String
  maintenanceMode                  Boolean   @default(false)
  communityFeedEnabled             Boolean   @default(true)
  autoModeratePosts                Boolean   @default(true)
  jobBoardEnabled                  Boolean   @default(true)
  maxJobPostingDays                Int       @default(30)
  gamificationEnabled              Boolean   @default(true)
  xpForLogin                       Int       @default(10)
  xpForNewPost                     Int       @default(20)
  resumeAnalyzerEnabled            Boolean   @default(true)
  aiResumeWriterEnabled            Boolean   @default(true)
  coverLetterGeneratorEnabled      Boolean   @default(true)
  mockInterviewEnabled             Boolean   @default(true)
  aiMockInterviewCost              Int       @default(25)
  aiResumeAnalysisCost             Int?      @default(10)
  aiAlumniConnectionRecCost        Int?      @default(5)
  referralsEnabled                 Boolean   @default(true)
  affiliateProgramEnabled          Boolean   @default(true)
  alumniConnectEnabled             Boolean   @default(true)
  defaultAppointmentCost           Int       @default(10)
  featureRequestsEnabled           Boolean   @default(true)
  allowTenantCustomBranding        Boolean   @default(true)
  allowTenantEmailCustomization    Boolean   @default(false)
  allowUserApiKey                  Boolean?  @default(true)
  defaultProfileVisibility         String    @default("alumni_only")
  maxResumeUploadsPerUser          Int?      @default(5)
  defaultTheme                     String    @default("light")
  enablePublicProfilePages         Boolean?  @default(false)
  sessionTimeoutMinutes            Int?      @default(60)
  maxEventRegistrationsPerUser     Int?
  globalAnnouncement               String?
  pointsForAffiliateSignup         Int?
  walletEnabled                    Boolean?  @default(true)
}

model JobApplication {
  id                   String      @id @default(cuid())
  userId               String
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId             String
  companyName          String
  jobTitle             String
  status               String      @default("Saved")
  dateApplied          DateTime
  notes                String[]
  jobDescription       String?
  location             String?
  applicationUrl       String?
  salary               String?
  resumeIdUsed         String?
  coverLetterText      String?
  reminderDate         DateTime?
  sourceJobOpeningId   String?
  interviews           Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String
  interviewer       String
  notes             String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId     String
  name         String
  resumeText   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastAnalyzed DateTime?
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  scanDate           DateTime @default(now())
  matchScore         Int?
  resumeTextSnapshot String
  jobDescriptionText String
  bookmarked         Boolean? @default(false)
}

model CommunityPost {
  id                 String             @id @default(cuid())
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName           String
  userAvatar         String?
  content            String?
  type               String
  imageUrl           String?
  tags               String[]
  moderationStatus   String
  flagCount          Int?
  flagReasons        String[]
  flaggedBy          String[]
  likes              Int?
  likedBy            String[]
  isPinned           Boolean?           @default(false)
  timestamp          DateTime           @default(now())
  comments           CommunityComment[]
  pollOptions        Json?
  votedBy            String[]
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  registeredBy       String[]
  assignedTo         String?
  status             String?
  bookmarkedBy       String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName   String
  userAvatar String?
  comment    String
  timestamp  DateTime       @default(now())
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  type      String   // e.g., 'mention', 'event', 'system'
  content   String
  link      String?
  isRead    Boolean  @default(false)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String   // e.g., 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  notes           String?
  withUser        String
  costInCoins     Int
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
}

model Language {
  code String @id
  name String
}

model Tour {
  id        String   @id
  title     String
  steps     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String? @unique
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  applicationLink  String?
  postedByAlumniId String?
  alumniName       String?
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  createdByUserId String
  createdByUser   User     @relation(fields: [createdByUserId], references: [id], onDelete: Restrict)
  attendeeUserIds String[]
  approved        Boolean? @default(false)
  isPlatformGlobal Boolean? @default(false)

  // Soft delete
  deletedAt DateTime?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  description String
  amount      Int
  type        String   // 'credit' or 'debit'
  currency    String   // 'coins' or 'xp'
  date        DateTime @default(now())
}

model PromoCode {
  id          String                    @id @default(cuid())
  tenantId    String
  tenant      Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code        String                    @unique
  description String
  rewardType  String                    // e.g., 'coins', 'xp', 'premium_days', 'flash_coins', 'streak_freeze'
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int                       @default(0) // 0 for unlimited
  timesUsed   Int                       @default(0)
  isActive    Boolean                   @default(true)
  createdAt   DateTime                  @default(now())
  redemptions UserPromoCodeRedemption[]

  // Soft delete
  deletedAt DateTime?
}

model UserPromoCodeRedemption {
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode  @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime   @default(now())

  @@id([userId, promoCodeId])
}

model ReferralHistory {
  id                 String   @id @default(cuid())
  referrerUserId     String
  referrerUser       User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  referredEmailOrName String
  status             String // e.g., 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount       Int?
  referralDate       DateTime @default(now())
}


model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  email            String            @unique
  status           String            // e.g., 'pending', 'approved', 'rejected', 'suspended'
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
  commissionTierId String
  commissionTier   CommissionTier    @relation(fields: [commissionTierId], references: [id])
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUserId          String    @unique
  newUser            User      @relation(fields: [newUserId], references: [id], onDelete: Cascade)
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String      @unique
  milestoneRequirement Int         // e.g., number of signups to reach this tier
  commissionRate       Float       // e.g., 0.15 for 15%
  affiliates           Affiliate[]
}

model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String       // e.g., 'Draft', 'Nominating', 'Voting', 'Completed'
  winnerId            String?      @unique
  winner              User?        @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  nominations         Nomination[]
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  award         Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId     String
  nominee       User     @relation("Nominee", fields: [nomineeId], references: [id], onDelete: Cascade)
  nominatorId   String
  nominator     User     @relation("Nominator", fields: [nominatorId], references: [id], onDelete: Cascade)
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId      String
  voter        User       @relation(fields: [voterId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([nominationId, voterId]) // A user can only vote once per nomination, but this needs to be per award. Logic handled in action.
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  tenantId    String
  createdAt   DateTime         @default(now())
  steps       Json
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
}

model EmailTemplate {
  id        String            @id @default(cuid())
  tenantId  String
  tenant    Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type      EmailTemplateType
  subject   String
  body      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([tenantId, type])
}

model FeatureRequest {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  description  String
  status       String   // Pending, In Progress, Completed, Rejected
  timestamp    DateTime @default(now())
  upvotes      Int      @default(0)
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  logoUrl       String?
  hrName        String?
  hrEmail       String?
  contactNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MockInterviewSession {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId            String
  tenant              Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  topic               String
  description         String?
  jobDescription      String?
  status              String
  createdAt           DateTime           @default(now())
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
  finalScore          Json?
  liveInterviewData   Json?
  interviewerScores   InterviewerScore[]
}

model InterviewerScore {
  id                    String                @id @default(cuid())
  mockInterviewSessionId  String
  mockInterviewSession    MockInterviewSession  @relation(fields: [mockInterviewSessionId], references: [id], onDelete: Cascade)
  interviewerId           String
  interviewer             User                  @relation(fields: [interviewerId], references: [id], onDelete: Cascade)
  questionId            String
  correctnessPercentage Int
  notes                 String?
  timestamp             DateTime              @default(now())
}

model MockInterviewAnswer {
    id                  String      @id @default(cuid())
    mockInterviewSessionId  String
    mockInterviewSession    MockInterviewSession @relation(fields: [mockInterviewSessionId], references: [id], onDelete: Cascade)
    questionId              String
    questionText            String
    userAnswer              String
    aiFeedback              String?
    aiScore                 Int?
    strengths               String[]
    areasForImprovement     String[]
    suggestedImprovements   String[]
}

model InterviewQuestion {
  id            String    @id @default(cuid())
  questionText  String
  category      String
  difficulty    String?
  isMCQ         Boolean?  @default(false)
  mcqOptions    Json?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  approved      Boolean?  @default(true)
  createdBy     String?   // userId
  createdAt     String?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  bookmarkedBy  String[]
  baseScore     Int?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  difficulty  String
  xpReward    Int?
  type        String   // 'standard' or 'flip'
  solution    String?
  tasks       Json?
  createdAt   DateTime @default(now())
}

model Activity {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId    String
  description String
  timestamp   DateTime @default(now())
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  
  // Soft delete
  deletedAt DateTime?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

enum UserRole {
  user
  admin
  manager
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  PENDING_DELETION
}

enum EmailTemplateType {
  WELCOME
  TENANT_WELCOME
  APPOINTMENT_CONFIRMATION
  PASSWORD_RESET
  PRACTICE_INTERVIEW_INVITE
}
```