// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Bhasha Setu Specific Models

model Language {
  id    String @id @default(cuid())
  code  String @unique
  name  String
  words Word[]
}

model Word {
  id           String        @id @default(cuid())
  text         String
  languageId   String
  language     Language      @relation(fields: [languageId], references: [id])
  translations Translation[] @relation("originalWord")

  @@unique([text, languageId])
}

model Translation {
  id               String @id @default(cuid())
  originalWordId   String
  translatedWordId String
  qualityScore     Float?

  originalWord   Word @relation("originalWord", fields: [originalWordId], references: [id])
  translatedWord Word @relation(fields: [translatedWordId], references: [id], name: "translations")

  @@unique([originalWordId, translatedWordId])
}

// User and Tenant Management
model User {
  id                      String    @id @default(cuid())
  tenantId                String
  email                   String    @unique
  name                    String
  password                String?
  role                    String
  status                  String?
  lastLogin               DateTime?
  createdAt               DateTime  @default(now())
  dateOfBirth             String?
  gender                  String?
  mobileNumber            String?
  currentAddress          String?
  graduationYear          String?
  degreeProgram           String?
  department              String?
  currentJobTitle         String?
  currentOrganization     String?
  industry                String?
  workLocation            String?
  linkedInProfile         String?
  yearsOfExperience       String?
  skills                  String[]
  areasOfSupport          String[]
  timeCommitment          String?
  preferredEngagementMode String?
  otherComments           String?
  lookingForSupportType   String?
  helpNeededDescription   String?
  shareProfileConsent     Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl       String?
  resumeText              String?
  careerInterests         String?
  bio                     String?
  interests               String[]
  userApiKey              String?
  offersHelpWith          String[]
  appointmentCoinCost     Int?
  xpPoints                Int?
  dailyStreak             Int?
  longestStreak           Int?
  totalActiveDays         Int?
  weeklyActivity          Boolean[]
  referralCode            String?
  earnedBadges            String[]
  affiliateCode           String?
  pastInterviewSessions   String[]
  interviewCredits        Int?
  isDistinguished         Boolean?
  challengeTopics         String[]
  challengeProgress       Json?
  sessionId               String?
  streakFreezes           Int?

  tenant                  Tenant                   @relation(fields: [tenantId], references: [id])
  jobOpenings             JobOpening[]
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScans             ResumeScanHistory[]
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  requesterAppointments   Appointment[]            @relation("RequesterAppointments")
  alumniAppointments      Appointment[]            @relation("AlumniAppointments")
  activities              Activity[]
  wallet                  Wallet?
  mockInterviewSessions   MockInterviewSession[]
  affiliateProfile        Affiliate?
  createdCompanies        ProductCompany[]
}

model Tenant {
  id              String           @id @default(cuid())
  name            String
  domain          String?
  createdAt       DateTime         @default(now())
  settings        TenantSettings?
  users           User[]
  jobOpenings     JobOpening[]
  jobApplications JobApplication[]
  resumeProfiles  ResumeProfile[]
  resumeScans     ResumeScanHistory[]
  communityPosts  CommunityPost[]
  surveys         Survey[]
  surveyResponses SurveyResponse[]
  appointments    Appointment[]
  galleryEvents   GalleryEvent[]
  announcements   Announcement[]
}

model TenantSettings {
  id                           String  @id @default(cuid())
  tenantId                     String  @unique
  tenant                       Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup            Boolean @default(true)
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  features                     Json?
  welcomeEmailTemplate         String?
  appointmentReminderTemplate  String?
  newsletterTemplate           String?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  steps       Json
  createdAt   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

// Gamification and Monetization

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?    @default(0)
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String // 'coins', 'xp', 'premium_days', 'flash_coins', 'streak_freeze'
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int       @default(0)
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model ReferralHistory {
  id                  String   @id @default(cuid())
  referrerUserId      String
  referredEmailOrName String
  referralDate        DateTime
  status              String // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount        Int?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

// Career and Content Models

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?

  interviews Interview[]
}

model Interview {
  id                String   @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ProductCompany {
  id              String  @id @default(cuid())
  name            String
  location        String
  websiteUrl      String
  domain          String
  hrName          String?
  hrEmail         String?
  contactNumber   String?
  logoUrl         String?
  tenantId        String
  user            User?   @relation(fields: [userId], references: [id])
  userId          String?
}

model GalleryEvent {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  title             String
  date              DateTime
  imageUrls         String[]
  description       String?
  dataAiHint        String?
  isPlatformGlobal  Boolean? @default(false)
  location          String?
  approved          Boolean? @default(true)
  createdByUserId   String?
  attendeeUserIds   String[]
}

model ResumeTemplate {
  id               String  @id @default(cuid())
  name             String
  description      String
  previewImageUrl  String
  category         String
  dataAiHint       String?
  content          String
  headerColor      String?
  bodyColor        String?
  headerFontSize   String?
  textAlign        String?
  layout           String?
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}

model MockInterviewSession {
  id                  String                 @id @default(cuid())
  userId              String
  user                User                   @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             MockInterviewAnswer[]
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime               @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Int?
  strengths            Json?
  areasForImprovement  Json?
  suggestedImprovements Json?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation(name: "BlogPostComments")
  bookmarkedBy String[]
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  votedBy           String[]
  registeredBy      String[]
  bookmarkedBy      String[]
  likes             String[]
  comments          CommunityComment[] @relation(name: "CommunityPostComments")
}

model CommunityComment {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")

  postId     String?
  post       CommunityPost? @relation(name: "CommunityPostComments", fields: [postId], references: [id])
  blogPostId String?
  blogPost   BlogPost?      @relation(name: "BlogPostComments", fields: [blogPostId], references: [id])
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(false)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String?
  approved        Boolean?
  createdAt       String?
  bookmarkedBy    String[]
}

model PlatformSettings {
  id                              String  @id @default(cuid())
  platformName                    String
  maintenanceMode                 Boolean
  communityFeedEnabled            Boolean
  autoModeratePosts               Boolean
  jobBoardEnabled                 Boolean
  maxJobPostingDays               Int
  gamificationEnabled             Boolean
  xpForLogin                      Int
  xpForNewPost                    Int
  resumeAnalyzerEnabled           Boolean
  aiResumeWriterEnabled           Boolean
  coverLetterGeneratorEnabled     Boolean
  mockInterviewEnabled            Boolean
  referralsEnabled                Boolean
  affiliateProgramEnabled         Boolean
  alumniConnectEnabled            Boolean
  defaultAppointmentCost          Int
  featureRequestsEnabled          Boolean
  allowTenantCustomBranding       Boolean
  allowTenantEmailCustomization   Boolean
  allowUserApiKey                 Boolean?
  defaultProfileVisibility        String
  maxResumeUploadsPerUser         Int
  defaultTheme                    String
  enablePublicProfilePages        Boolean
  sessionTimeoutMinutes           Int
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean?
}
