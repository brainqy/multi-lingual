// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  tenantId                      String?
  name                          String
  email                         String    @unique
  password                      String?
  role                          String
  status                        String?
  lastLogin                     DateTime?
  dateOfBirth                   DateTime? @db.Date
  gender                        String?
  mobileNumber                  String?
  currentAddress                String?
  graduationYear                String?
  degreeProgram                 String?
  department                    String?
  currentJobTitle               String?
  currentOrganization           String?
  industry                      String?
  workLocation                  String?
  linkedInProfile               String?
  yearsOfExperience             String?
  skills                        Json?
  areasOfSupport                Json?
  timeCommitment                String?
  preferredEngagementMode       String?
  otherComments                 String?
  lookingForSupportType         String?
  helpNeededDescription         String?
  shareProfileConsent           Boolean?
  featureInSpotlightConsent     Boolean?
  profilePictureUrl             String?
  resumeText                    String?
  careerInterests               String?
  bio                           String?
  interests                     Json?
  offersHelpWith                Json?
  appointmentCoinCost           Int?
  xpPoints                      Int?
  dailyStreak                   Int?
  longestStreak                 Int?
  totalActiveDays               Int?
  weeklyActivity                Json?
  referralCode                  String?
  earnedBadges                  Json?
  affiliateCode                 String?
  pastInterviewSessions         Json?
  interviewCredits              Int?
  createdAt                     DateTime  @default(now())
  isDistinguished               Boolean?
  userApiKey                    String?
  challengeTopics               Json?
  challengeProgress             Json?
  sessionId                     String?
  jobOpenings                   JobOpening[]
  jobApplications               JobApplication[]
  resumeProfiles                ResumeProfile[]
  appointmentsRequested         Appointment[]           @relation("Requester")
  appointmentsWith              Appointment[]           @relation("Alumni")
  createdAnnouncements          Announcement[]
  createdInterviewQuestions     InterviewQuestion[]
  affiliateProfile              Affiliate?
  featureRequests               FeatureRequest[]

  tenant                        Tenant?                 @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                        String   @id @default(cuid())
  tenantId                  String   @unique
  allowPublicSignup         Boolean  @default(true)
  customLogoUrl             String?
  primaryColor              String?
  accentColor               String?
  features                  Json?
  emailTemplates            Json?
  tenant                    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?

  postedBy User @relation(fields: [postedByAlumniId], references: [id])
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime @db.Date
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime? @db.Timestamp()
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  
  user       User        @relation(fields: [userId], references: [id])
  interviews Interview[]
}

model Interview {
  id               String @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            String[]

  application JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}


model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed DateTime? @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?

  requester User @relation("Requester", fields: [requesterUserId], references: [id])
  alumni    User @relation("Alumni", fields: [alumniUserId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  timestamp   DateTime @default(now())
  description String
}

model Announcement {
  id             String   @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String

  creator User @relation(fields: [createdBy], references: [id])
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  approved        Boolean?
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
  createdBy       String

  creator User @relation(fields: [createdBy], references: [id])
}

model Affiliate {
  id             String    @id @default(cuid())
  userId         String    @unique
  name           String
  email          String
  status         String
  affiliateCode  String    @unique
  commissionRate Float
  totalEarned    Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user    User               @relation(fields: [userId], references: [id])
  clicks  AffiliateClick[]
  signups AffiliateSignup[]
}

model AffiliateClick {
  id                String   @id @default(cuid())
  affiliateId       String
  timestamp         DateTime @default(now())
  ipAddress         String?
  convertedToSignup Boolean

  affiliate Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id                 String   @id @default(cuid())
  affiliateId        String
  newUserId          String
  signupDate         DateTime @default(now())
  commissionEarned   Float?

  affiliate Affiliate @relation(fields: [affiliateId], references: [id])
}

model PromotionalContent {
  id            String   @id @default(cuid())
  isActive      Boolean
  title         String
  description   String
  imageUrl      String
  imageAlt      String
  imageHint     String?
  buttonText    String
  buttonLink    String
  gradientFrom  String?
  gradientTo    String?
  gradientVia   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CommunityPost {
  id                String    @id @default(cuid())
  tenantId          String
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime  @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         String?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  bookmarkedBy      String[]
  comments          CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String
  parentId   String?

  post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?

  user User @relation(fields: [userId], references: [id])
}

model BlogGenerationSettings {
  id                      String @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model BlogPost {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String
  userName      String
  userAvatar    String
  title         String
  slug          String   @unique
  author        String
  date          DateTime
  imageUrl      String
  dataAiHint    String?
  content       String
  excerpt       String
  tags          String[]
  bookmarkedBy  String[]
}

model Survey {
  id           String @id @default(cuid())
  name         String @unique
  description  String?
  steps        Json
  tenantId     String?
  createdAt    DateTime @default(now())
}

model SurveyResponse {
  id           String @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model PromoCode {
  id          String @id @default(cuid())
  code        String @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
}
