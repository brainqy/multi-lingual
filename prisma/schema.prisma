// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  tenantId  String
  name      String
  email     String    @unique
  password  String?
  role      String
  status    String?
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessionId String?   @unique

  // Personal & Professional Details
  dateOfBirth         String?
  gender              String?
  mobileNumber        String?
  currentAddress      String?
  graduationYear      String?
  degreeProgram       String?
  department          String?
  company             String?
  currentOrganization String?
  industry            String?
  workLocation        String?
  linkedInProfile     String?
  yearsOfExperience   String?
  bio                 String?
  shortBio            String?
  university          String?
  careerInterests     String?
  resumeText          String?
  profilePictureUrl   String?
  userApiKey          String?
  currentJobTitle     String?
  interviewCredits    Int?     @default(5)
  isDistinguished     Boolean? @default(false)

  // Consent Flags
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?

  // Array/List fields
  skills                  String[]
  areasOfSupport          String[]
  timeCommitment          String?
  preferredEngagementMode String?
  otherComments           String?
  lookingForSupportType   String?
  helpNeededDescription   String?
  interests               String[]
  offersHelpWith          String[]
  challengeTopics         String[]
  earnedBadges            String[]

  // Gamification & Wallet
  xpPoints          Int?
  dailyStreak       Int?
  longestStreak     Int?
  totalActiveDays   Int?
  weeklyActivity    Boolean[]
  challengeProgress Json?
  referralCode      String?   @unique

  // Relations
  tenant                    Tenant                  @relation(fields: [tenantId], references: [id])
  wallet                    Wallet?
  referredBySignup          AffiliateSignup?        @relation("NewUserSignup")
  affiliateProfile          Affiliate?
  referralHistory           ReferralHistoryItem[]
  appointmentsAsRequester   Appointment[]           @relation("AppointmentsAsRequester")
  appointmentsAsAlumni      Appointment[]           @relation("AppointmentsAsAlumni")
  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  resumeScanHistory         ResumeScanHistoryItem[]
  featureRequests           FeatureRequest[]
  communityPosts            CommunityPost[]
  comments                  CommunityComment[]
  createdAnnouncements      Announcement[]
  activities                Activity[]
  createdInterviewQuestions InterviewQuestion[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                String   @id @default(cuid())
  tenantId          String   @unique
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  allowPublicSignup Boolean  @default(true)
  customLogoUrl     String?
  primaryColor      String?
  accentColor       String?
  features          Json?
  emailTemplates    Json?
  updatedAt         DateTime @updatedAt
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String?
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
  date              DateTime
  type              String
  interviewer       String
  interviewerEmail  String?
  interviewerMobile String?
  notes             String[]
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String?
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  slug         String   @unique
  userId       String
  userName     String
  userAvatar   String?
  title        String
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String
  lastGenerated           DateTime?
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        DateTime?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  bookmarkedBy     String[]
  comments         CommunityComment[]
}

model CommunityComment {
  id         String        @id @default(cuid())
  postId     String
  post       CommunityPost @relation(fields: [postId], references: [id])
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime
  comment    String
  parentId   String?
}

model Appointment {
  id              String    @id @default(cuid())
  tenantId        String?
  requesterUserId String
  requesterUser   User      @relation("AppointmentsAsRequester", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User      @relation("AppointmentsAsAlumni", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
  withUser        String?
}

model Badge {
  id               String  @id @default(cuid())
  name             String  @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  date        DateTime
  description String
  amount      Int
  type        String
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean
  createdAt   DateTime  @default(now())
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  questions   Json
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  userId       String
  responseDate DateTime @default(now())
  answers      Json
}

model Announcement {
  id              String    @id @default(cuid())
  tenantId        String?
  title           String
  content         String
  startDate       DateTime
  endDate         DateTime?
  audience        String
  audienceTarget  String?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdByUserId String
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdByUserId String
  createdBy       User     @relation(fields: [createdByUserId], references: [id])
  approved        Boolean?
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  questions           Json
  answers             Json
  overallFeedback     Json?
  overallScore        Int?
  status              String
  createdAt           DateTime
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model LiveInterviewSession {
  id                   String    @id @default(cuid())
  tenantId             String?
  title                String
  participants         Json
  scheduledTime        DateTime
  actualStartTime      DateTime?
  actualEndTime        DateTime?
  status               String
  meetingLink          String?
  interviewTopics      String[]
  notes                String?
  preSelectedQuestions Json?
  recordingReferences  Json?
  interviewerScores    Json?
  finalScore           Json?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // pending, approved, rejected
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[] @relation("AffiliateSignups")
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String    @unique
  newUser          User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  affiliate        Affiliate @relation("AffiliateSignups", fields: [affiliateId], references: [id])
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model ReferralHistoryItem {
  id             String         @id @default(cuid())
  referrerUserId String
  referrerUser   User           @relation(fields: [referrerUserId], references: [id])
  referredEmail  String
  referralDate   DateTime       @default(now())
  status         ReferralStatus
  rewardAmount   Int?
}

model DailyChallenge {
  id          String    @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tenantId    String?
  timestamp   DateTime @default(now())
  description String
}

model ResumeScanHistoryItem {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  tenantId           String?
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?
}

model Language {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  translations Translation[]
}

model Translation {
  id         String   @id @default(cuid())
  languageId String
  language   Language @relation(fields: [languageId], references: [id])
  key        String
  value      String

  @@unique([languageId, key])
}
