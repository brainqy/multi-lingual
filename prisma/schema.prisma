// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Language {
  code String @id @unique
  name String
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  users     User[]
  createdAt DateTime        @default(now())
  settings  TenantSettings?
}

model TenantSettings {
  id                          String          @id @default(cuid())
  tenant                      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                    String          @unique
  allowPublicSignup           Boolean         @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  emailTemplates              Json?
}

model User {
  id                           String                @id @default(cuid())
  tenantId                     String
  tenant                       Tenant                @relation(fields: [tenantId], references: [id])
  name                         String
  email                        String                @unique
  password                     String?
  role                         String                @default("user") // admin, manager, user
  status                       String                @default("active") // active, inactive, pending, suspended, PENDING_DELETION
  lastLogin                    DateTime?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  sessionId                    String?
  profilePictureUrl            String?
  // Professional Info
  currentJobTitle              String?
  currentOrganization          String?
  industry                     String?
  workLocation                 String?
  linkedInProfile              String?
  yearsOfExperience            String?
  skills                       String[]
  bio                          String?
  resumeText                   String?
  careerInterests              String?
  interests                    String[]
  // Academic Info
  dateOfBirth                  String?
  gender                       String?
  mobileNumber                 String?
  currentAddress               String?
  graduationYear               String?
  degreeProgram                String?
  department                   String?
  university                   String?
  // Engagement
  areasOfSupport               String[]
  timeCommitment               String?
  preferredEngagementMode      String?
  otherComments                String?
  lookingForSupportType        String?
  helpNeededDescription        String?
  shareProfileConsent          Boolean?
  featureInSpotlightConsent    Boolean?
  isDistinguished              Boolean?
  // Gamification
  xpPoints                     Int?
  dailyStreak                  Int?
  longestStreak                Int?
  totalActiveDays              Int?
  weeklyActivity               Int[]
  earnedBadges                 String[]
  interviewCredits             Int?
  referralCode                 String?               @unique
  streakFreezes                Int?
  challengeTopics              String[]
  challengeProgress            Json?
  completedChallengeIds        String[]
  completedFlipTaskIds         String[]
  currentFlipChallenge         Json?
  flipChallengeAssignedAt      DateTime?
  flipChallengeProgressStart   Json?
  // Developer Settings
  userApiKey                   String?
  // Dashboard Customization
  dashboardWidgets             Json?
  // Relations
  jobApplications              JobApplication[]
  resumeProfiles               ResumeProfile[]
  resumeScanHistories          ResumeScanHistory[]
  communityPosts               CommunityPost[]
  communityComments            CommunityComment[]
  notifications                Notification[]
  appointmentsAsRequester      Appointment[]         @relation("RequesterAppointments")
  appointmentsAsAlumni         Appointment[]         @relation("AlumniAppointments")
  referralHistory              ReferralHistory[]     @relation("ReferrerHistory")
  referredByUser               ReferralHistory?      @relation(fields: [referredByUserId], references: [id])
  referredByUserId             String?               @unique
  affiliateProfile             Affiliate?
  affiliateSignups             AffiliateSignup[]
  wallets                      Wallet[]
  promoCodeRedemptions         UserPromoCodeRedemption[]
  // Awards
  nominationsMade              Nomination[]          @relation("Nominator")
  nominationsReceived          Nomination[]          @relation("Nominee")
  votesMade                    Vote[]                @relation("Voter")
  awardsWon                    Award[]               @relation("Winner")
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId  String
  date              DateTime
  type              String
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String
  jobDescriptionText String
  scanDate           DateTime @default(now())
  matchScore         Float?
  bookmarked         Boolean?
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  flagReasons       String[]
  comments          CommunityComment[]
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
  likedBy           String[]
  likes             Int?
  flaggedBy         String[]
  isPinned          Boolean?
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(fields: [postId], references: [id])
  blogPostId String?
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String    @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean?
  location        String?
  approved        Boolean?
  createdByUserId String?
  attendeeUserIds String[]
  deletedAt       DateTime?
}

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        DateTime?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
  createdAt   DateTime @default(now())
}

model GamificationRule {
  actionId    String @id @unique
  description String
  xpPoints    Int
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?
  isAssignedByAdmin Boolean? @default(false)
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  date        DateTime @default(now())
  description String
  amount      Float
  type        String
  currency    String   @default("coins")
}

model ReferralHistory {
  id                   String   @id @default(cuid())
  referrerUserId       String
  referrerUser         User     @relation("ReferrerHistory", fields: [referrerUserId], references: [id])
  referredEmailOrName  String
  referredUserId       String?  @unique
  referredUser         User?
  referralDate         DateTime @default(now())
  status               String
  rewardAmount         Int?
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id])
  name             String
  email            String
  status           String
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
}

model AffiliateClick {
  id                String   @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime @default(now())
  ipAddress         String?
  convertedToSignup Boolean  @default(false)
}

model AffiliateSignup {
  id                 String   @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String
  newUser            User     @relation(fields: [newUserId], references: [id])
  signupDate         DateTime @default(now())
  commissionEarned   Float?
}

model PlatformSettings {
  id                              String  @id @default(cuid())
  platformName                    String
  maintenanceMode                 Boolean
  communityFeedEnabled            Boolean
  autoModeratePosts               Boolean
  jobBoardEnabled                 Boolean
  maxJobPostingDays               Int
  gamificationEnabled             Boolean
  xpForLogin                      Int
  xpForNewPost                    Int
  resumeAnalyzerEnabled           Boolean
  aiResumeWriterEnabled           Boolean
  coverLetterGeneratorEnabled     Boolean
  mockInterviewEnabled            Boolean
  aiMockInterviewCost             Int?
  referralsEnabled                Boolean
  affiliateProgramEnabled         Boolean
  alumniConnectEnabled            Boolean
  defaultAppointmentCost          Int
  featureRequestsEnabled          Boolean
  allowTenantCustomBranding       Boolean
  allowTenantEmailCustomization   Boolean
  allowUserApiKey                 Boolean?
  defaultProfileVisibility        String
  maxResumeUploadsPerUser         Int
  defaultTheme                    String
  enablePublicProfilePages        Boolean
  sessionTimeoutMinutes           Int
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean?
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
  deletedAt      DateTime?
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String                    @id @default(cuid())
  tenantId    String?
  code        String                    @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int                       @default(0)
  timesUsed   Int                       @default(0)
  isActive    Boolean                   @default(true)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  redemptions UserPromoCodeRedemption[]
  deletedAt   DateTime?
}

model UserPromoCodeRedemption {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  redeemedAt  DateTime @default(now())

  @@unique([userId, promoCodeId])
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  tenantId    String?
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  responseDate DateTime @default(now())
  data         Json
  tenantId     String?
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String?
  approved        Boolean?  @default(false)
  createdAt       DateTime? @default(now())
  bookmarkedBy    String[]
}

model MockInterviewSession {
  id                  String             @id @default(cuid())
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime           @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String?
  timestamp   DateTime @default(now())
  description String
}

model ResumeTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
  deletedAt       DateTime?
}

model AwardCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  awards      Award[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Award {
  id                  String          @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory   @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String          // e.g., Draft, Nominating, Voting, Completed
  nominations         Nomination[]
  winnerId            String?
  winner              User?           @relation("Winner", fields: [winnerId], references: [id])
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Nomination {
  id               String   @id @default(cuid())
  awardId          String
  award            Award    @relation(fields: [awardId], references: [id])
  nominatorId      String
  nominator        User     @relation("Nominator", fields: [nominatorId], references: [id])
  nominatedUserId  String
  nominatedUser    User     @relation("Nominee", fields: [nominatedUserId], references: [id])
  justification    String
  isSelfNomination Boolean
  votes            Vote[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([awardId, nominatedUserId])
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id])
  voterId      String
  voter        User       @relation("Voter", fields: [voterId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([nominationId, voterId])
}
```