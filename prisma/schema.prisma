// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  tenantId                  String
  name                      String
  email                     String    @unique
  password                  String?
  role                      String    @default("user")
  status                    String    @default("active")
  lastLogin                 DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  sessionId                 String?
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  company                   String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  careerInterests           String?
  resumeText                String?
  userApiKey                String?
  bio                       String?
  shortBio                  String?
  university                String?
  profilePictureUrl         String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  areasOfSupport            String[]
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  interests                 String[]
  offersHelpWith            String[]
  challengeTopics           String[]
  challengeProgress         Json?
  referralCode              String?   @unique
  xpPoints                  Int?      @default(0)
  dailyStreak               Int?      @default(0)
  longestStreak             Int?      @default(0)
  totalActiveDays           Int?      @default(0)
  weeklyActivity            Boolean[]
  earnedBadges              String[]
  interviewCredits          Int?      @default(5)
  isDistinguished           Boolean?  @default(false)
  streakFreezes             Int?      @default(1)

  tenant                    Tenant                    @relation(fields: [tenantId], references: [id])
  wallet                    Wallet?
  referredBySignup          AffiliateSignup?          @relation("ReferredUserToSignup")
  affiliateProfile          Affiliate?
  referralHistory           ReferralHistoryItem[]
  appointmentsAsRequester   Appointment[]             @relation("RequesterAppointments")
  appointmentsAsAlumni      Appointment[]             @relation("AlumniAppointments")
  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  resumeScanHistory         ResumeScanHistoryItem[]
  featureRequests           FeatureRequest[]
  communityPosts            CommunityPost[]
  comments                  CommunityComment[]
  createdAnnouncements      Announcement[]
  activities                Activity[]
  createdInterviewQuestions InterviewQuestion[]
}

model Tenant {
  id        String          @id @default(cuid())
  name      String
  domain    String?         @unique
  createdAt DateTime        @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                          String    @id @default(cuid())
  tenantId                    String    @unique
  tenant                      Tenant    @relation(fields: [tenantId], references: [id])
  allowPublicSignup           Boolean   @default(true)
  customLogoUrl               String?
  primaryColor                String?
  accentColor                 String?
  features                    Json?
  welcomeEmailTemplate        String?
  appointmentConfirmationTmpl String?
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  user               User        @relation(fields: [userId], references: [id])
  interviews         Interview[]
}

model Interview {
  id                 String         @id @default(cuid())
  jobApplicationId   String
  date               DateTime
  type               String
  interviewer        String
  interviewerMobile  String?
  interviewerEmail   String?
  notes              String[]
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model ResumeScanHistoryItem {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean?
  user                User     @relation(fields: [userId], references: [id])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int?     @default(0)
  user        User     @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  userId           String
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        String?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int
  user             User               @relation(fields: [userId], references: [id])
  comments         CommunityComment[]
  bookmarkedBy     String[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  post       CommunityPost? @relation(fields: [postId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     Json     // Storing as JSON for simplicity in this model
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String
  lastGenerated           String?
}

model InterviewQuestion {
  id              String    @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean?
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       String
  approved        Boolean?
  createdAt       String
  bookmarkedBy    String[]
  creator         User      @relation(fields: [createdBy], references: [id])
  mockInterviewId String?
  quizSessionId   String?
}

model MockInterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json
  answers            Json
  overallFeedback    Json?
  overallScore       Float?
  status             String
  createdAt          DateTime @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
}

model QuizSession {
  id        String   @id @default(cuid())
  userId    String
  title     String
  questions Json
  answers   Json
  score     Float?
  startTime DateTime
  endTime   DateTime?
  status    String
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String?
  timestamp DateTime @default(now())
  description String
  user      User?    @relation(fields: [userId], references: [id])
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  creator        User      @relation(fields: [createdBy], references: [id])
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientTo   String?
  gradientVia  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Badge {
  id               String  @id @default(cuid())
  name             String
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  user         User                @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit' or 'debit'
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  rewardType  String
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int
  timesUsed   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Affiliate {
  id              String            @id @default(cuid())
  userId          String            @unique
  name            String
  email           String
  status          String // pending, approved, rejected
  affiliateCode   String            @unique
  commissionRate  Float
  totalEarned     Float?            @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  clicks          AffiliateClick[]
  signups         AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  newUserId        String    @unique
  signupDate       DateTime  @default(now())
  commissionEarned Float?
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  newUser          User      @relation("ReferredUserToSignup", fields: [newUserId], references: [id])
}

model ReferralHistoryItem {
  id               String   @id @default(cuid())
  referrerUserId   String
  referredEmailOrName String
  referralDate     DateTime
  status           String
  rewardAmount     Int?
  referrerUser     User     @relation(fields: [referrerUserId], references: [id])
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean? @default(false)
}

model GalleryEvent {
  id                String    @id @default(cuid())
  tenantId          String
  title             String
  date              DateTime
  imageUrls         String[]
  description       String?
  dataAiHint        String?
  isPlatformGlobal  Boolean?  @default(false)
  location          String?
  approved          Boolean?  @default(false)
  createdByUserId   String?
  attendeeUserIds   String[]
}

model Language {
  code String @id
  name String
}

model Word {
  id              String        @id @default(cuid())
  languageId      String
  originalText    String
  language        Language      @relation(fields: [languageId], references: [code])
  translations    Translation[] @relation("OriginalWord")
  qualityScores   Json?
}

model Translation {
  id             String @id @default(cuid())
  originalWordId String
  languageId     String
  translatedText String
  originalWord   Word   @relation("OriginalWord", fields: [originalWordId], references: [id])
  language       Language @relation(fields: [languageId], references: [code])
}

model ProductCompany {
  id             String  @id @default(cuid())
  name           String
  location       String
  websiteUrl     String
  domain         String
  hrName         String?
  hrEmail        String?
  contactNumber  String?
  logoUrl        String?
}
