// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(cuid())
  tenantId                  String
  name                      String
  email                     String      @unique
  role                      String
  status                    String?
  lastLogin                 DateTime?   @default(now())
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  dateOfBirth               DateTime?   @db.Date
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  company                   String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    Json?
  areasOfSupport            Json?
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?     @db.Text
  careerInterests           String?
  bio                       String?     @db.Text
  interests                 Json?
  offersHelpWith            Json?
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Json?
  referralCode              String?     @unique
  earnedBadges              Json?
  affiliateCode             String?     @unique
  pastInterviewSessions     Json?
  interviewCredits          Int?
  isDistinguished           Boolean?
  challengeTopics           Json?
  challengeProgress         Json?
  userApiKey                String?
  sessionId                 String?

  tenant              Tenant              @relation(fields: [tenantId], references: [id])
  jobApplications     JobApplication[]
  resumeProfiles      ResumeProfile[]
  resumeScanHistory   ResumeScanHistory[]
  requesterAppointments Appointment[]     @relation("RequesterAppointments")
  alumniAppointments  Appointment[]       @relation("AlumniAppointments")
  createdAnnouncements Announcement[]
  communityPosts      CommunityPost[]
  communityComments   CommunityComment[]
  activities          Activity[]
}

model Tenant {
  id        String @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())

  users    User[]
  settings TenantSettings?
}

model TenantSettings {
  id                    String  @id @default(cuid())
  tenantId              String  @unique
  allowPublicSignup     Boolean @default(true)
  customLogoUrl         String?
  primaryColor          String?
  accentColor           String?
  features              Json?
  emailTemplates        Json?

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String   @db.Text
  datePosted       DateTime @default(now())
  type             String
  postedByAlumniId String
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              Json?
  jobDescription     String?  @db.Text
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?  @db.Text

  user       User        @relation(fields: [userId], references: [id])
  interviews Interview[]
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  date             DateTime
  type             String
  interviewer      String
  interviewerEmail String?
  interviewerMobile String?
  notes            Json?

  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  alumniUserId    String
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?  @db.Text
  costInCoins     Int?
  withUser        String
  reminderDate    DateTime?

  requesterUser User @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUser    User @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  userId       String
  name         String
  resumeText   String    @db.Text
  lastAnalyzed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ResumeScanHistory {
  id                 String   @id @default(cuid())
  tenantId           String
  userId             String
  resumeId           String
  resumeName         String
  jobTitle           String
  companyName        String
  resumeTextSnapshot String   @db.Text
  jobDescriptionText String   @db.Text
  scanDate           DateTime @default(now())
  matchScore         Int?
  bookmarked         Boolean?

  user User @relation(fields: [userId], references: [id])
}

model Announcement {
  id             String    @id @default(cuid())
  tenantId       String?
  title          String
  content        String    @db.Text
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String

  user User @relation(fields: [createdBy], references: [id])
}

model CommunityPost {
  id                 String             @id @default(cuid())
  tenantId           String
  userId             String
  userName           String
  userAvatar         String?
  timestamp          DateTime           @default(now())
  content            String?            @db.Text
  type               String
  tags               Json?
  imageUrl           String?
  pollOptions        Json?
  eventTitle         String?
  eventDate          DateTime?
  eventLocation      String?
  attendees          Int?
  capacity           Int?
  assignedTo         String?
  status             String?
  moderationStatus   String
  flagCount          Int
  bookmarkedBy       Json?

  user     User                 @relation(fields: [userId], references: [id])
  comments CommunityComment[]
}

model CommunityComment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime @default(now())
  comment    String   @db.Text
  parentId   String?

  user User          @relation(fields: [userId], references: [id])
  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Activity {
    id String @id @default(cuid())
    tenantId String
    userId String
    timestamp DateTime @default(now())
    description String

    user User @relation(fields: [userId], references: [id])
}

model Badge {
    id String @id @default(cuid())
    name String @unique
    description String
    icon String
    xpReward Int?
    triggerCondition String?
}

model GamificationRule {
    id String @id @default(cuid())
    actionId String @unique
    description String
    xpPoints Int
}
