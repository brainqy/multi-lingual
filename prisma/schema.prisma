// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Bhasha Setu specific models
model Language {
  id   String @id @default(cuid())
  code String @unique
  name String
}

model Translation {
  id           String   @id @default(cuid())
  key          String
  text         String
  languageCode String
  timestamp    DateTime @default(now())
}

model User {
  id                        String                 @id @default(cuid())
  tenantId                  String
  tenant                    Tenant                 @relation(fields: [tenantId], references: [id])
  email                     String                 @unique
  name                      String
  password                  String?
  role                      String                 // "admin", "manager", "user"
  status                    String?                // "active", "inactive", "pending"
  lastLogin                 DateTime?
  createdAt                 DateTime               @default(now())
  sessionId                 String?
  // User Profile fields
  dateOfBirth               String?
  gender                    String?
  mobileNumber              String?
  currentAddress            String?
  graduationYear            String?
  degreeProgram             String?
  department                String?
  currentJobTitle           String?
  currentOrganization       String?
  industry                  String?
  workLocation              String?
  linkedInProfile           String?
  yearsOfExperience         String?
  skills                    String[]
  areasOfSupport            Json?
  timeCommitment            String?
  preferredEngagementMode   String?
  otherComments             String?
  lookingForSupportType     String?
  helpNeededDescription     String?
  shareProfileConsent       Boolean?
  featureInSpotlightConsent Boolean?
  profilePictureUrl         String?
  resumeText                String?
  careerInterests           String?
  bio                       String?
  interests                 String[]
  userApiKey                String?
  offersHelpWith            Json?
  appointmentCoinCost       Int?
  xpPoints                  Int?
  dailyStreak               Int?
  longestStreak             Int?
  totalActiveDays           Int?
  weeklyActivity            Boolean[]
  referralCode              String?
  earnedBadges              String[]
  affiliateCode             String?
  pastInterviewSessions     String[]
  interviewCredits          Int?
  isDistinguished           Boolean?
  challengeTopics           String[]
  challengeProgress         Json?
  streakFreezes             Int?
  // Relations
  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  scanHistories             ResumeScanHistory[]
  jobOpenings               JobOpening[]
  communityPosts            CommunityPost[]
  communityComments         CommunityComment[]
  requesterAppointments     Appointment[]          @relation("RequesterAppointments")
  alumniAppointments        Appointment[]          @relation("AlumniAppointments")
  createdQuestions          InterviewQuestion[]
  affiliateProfile          Affiliate?
  affiliateSignups          AffiliateSignup[]
  referralsMade             ReferralHistoryItem[]
  wallet                    Wallet?
  activities                Activity[]
  mockInterviewSessions     MockInterviewSession[]
  postedCompanies           ProductCompany[]
}

model Tenant {
  id               String           @id @default(cuid())
  name             String
  domain           String?
  createdAt        DateTime         @default(now())
  // Relations
  users            User[]
  jobOpenings      JobOpening[]
  jobApplications  JobApplication[]
  resumeProfiles   ResumeProfile[]
  scanHistories    ResumeScanHistory[]
  communityPosts   CommunityPost[]
  surveys          Survey[]
  surveyResponses  SurveyResponse[]
  appointments     Appointment[]
  settings         TenantSettings?
}

model TenantSettings {
  id                            String    @id @default(cuid())
  tenantId                      String    @unique
  tenant                        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allowPublicSignup             Boolean   @default(true)
  customLogoUrl                 String?
  primaryColor                  String?
  accentColor                   String?
  features                      Json?
  // emailTemplates can be a JSON object
  emailTemplates                Json?
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenantId      String
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json? // Represents FlashCoinBatch[]
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // "credit" or "debit"
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model Survey {
  id          String           @id @default(cuid())
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  name        String           @unique
  description String?
  steps       Json // Represents SurveyStep[]
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  survey       Survey   @relation(fields: [surveyId], references: [id])
  responseDate DateTime @default(now())
  data         Json
  tenantId     String? // Optional tenantId for scoping responses
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
}

model ReferralHistoryItem {
  id                 String  @id @default(cuid())
  referrerUserId     String
  referrerUser       User    @relation(fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate       DateTime @default(now())
  status             String // "Pending", "Signed Up", "Reward Earned", "Expired"
  rewardAmount       Int?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String // "pending", "approved", "rejected"
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
  newUserId          String    @unique
  newUser            User      @relation(fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model MockInterviewSession {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  topic               String
  description         String?
  jobDescription      String?
  questions           Json? // MockInterviewQuestion[]
  answers             MockInterviewAnswer[]
  overallFeedback     Json? // GenerateOverallInterviewFeedbackOutput
  overallScore        Int?
  status              String // "pending", "in-progress", "completed"
  createdAt           DateTime              @default(now())
  timerPerQuestion    Int?
  difficulty          String? // "Easy", "Medium", "Hard"
  questionCategories  String[]
  recordingReferences Json? // RecordingReference[]
}

model MockInterviewAnswer {
  id                   String               @id @default(cuid())
  sessionId            String
  session              MockInterviewSession @relation(fields: [sessionId], references: [id])
  questionId           String
  questionText         String
  userAnswer           String
  aiFeedback           String?
  aiScore              Int?
  strengths            String[]
  areasForImprovement  String[]
  suggestedImprovements String[]
  isRecording          Boolean?
}

model BlogPost {
  id           String             @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String             @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[] @relation(name: "BlogPostComments")
  bookmarkedBy String[]
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String // "text", "poll", "event", "request"
  tags              String[]
  imageUrl          String?
  pollOptions       Json? // { option: string, votes: number }[]
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String? // "open", "in progress", "completed"
  moderationStatus  String // "visible", "flagged", "removed"
  flagCount         Int                @default(0)
  comments          CommunityComment[] @relation(name: "CommunityPostComments")
  bookmarkedBy      String[]
  votedBy           String[]
  registeredBy      String[]
  likes             Int                @default(0)
}

model CommunityComment {
  id         String       @id @default(cuid())
  postId     String?
  post       CommunityPost? @relation(name: "CommunityPostComments", fields: [postId], references: [id], onDelete: Cascade)
  blogPostId String?
  blogPost   BlogPost?    @relation(name: "BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  userName   String
  userAvatar String?
  timestamp  DateTime     @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("CommentReplies")
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String // 'error', 'warning', 'info', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id          String   @id @default(cuid())
  type        String // 'standard' or 'flip'
  date        DateTime?
  title       String
  description String
  difficulty  String? // 'Easy', 'Medium', 'Hard'
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json? // { description: string, action: string, target: number }[]
}

model Badge {
  id                 String  @id
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?    @default(0)
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String // 'coins', 'xp', 'premium_days', 'flash_coins'
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int      @default(0) // 0 for unlimited
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String // 'Pending', 'In Progress', 'Completed', 'Rejected'
  upvotes     Int      @default(0)
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean  @default(false)
  location        String?
  approved        Boolean  @default(true)
  createdByUserId String
  attendeeUserIds String[]
}

model ResumeTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  title            String
  company          String
  location         String
  description      String
  datePosted       DateTime @default(now())
  type             String // 'Full-time', 'Part-time', 'Internship', 'Contract', 'Mentorship'
  postedByAlumniId String
  postedByAlumni   User     @relation(fields: [postedByAlumniId], references: [id])
  alumniName       String
  applicationLink  String?
}

model JobApplication {
  id                 String    @id @default(cuid())
  tenantId           String
  tenant             Tenant    @relation(fields: [tenantId], references: [id])
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String // 'Saved', 'Applied', 'Interviewing', 'Offer', 'Rejected'
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                String         @id @default(cuid())
  jobApplicationId  String
  jobApplication    JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date              DateTime
  type              String // 'Phone Screen', 'Technical', 'Behavioral', 'On-site', 'Final Round'
  interviewer       String
  interviewerMobile String?
  interviewerEmail  String?
  notes             String[]
}

model ResumeProfile {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  name          String
  resumeText    String
  lastAnalyzed  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ResumeScanHistory {
  id                   String   @id @default(cuid())
  tenantId             String
  tenant               Tenant   @relation(fields: [tenantId], references: [id])
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  resumeId             String
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime @default(now())
  matchScore           Int?
  bookmarked           Boolean? @default(false)
}

model PlatformSettings {
  id                            String   @id @default(cuid())
  platformName                  String
  maintenanceMode               Boolean
  communityFeedEnabled          Boolean
  autoModeratePosts             Boolean
  jobBoardEnabled               Boolean
  maxJobPostingDays             Int
  gamificationEnabled           Boolean
  xpForLogin                    Int
  xpForNewPost                  Int
  resumeAnalyzerEnabled         Boolean
  aiResumeWriterEnabled         Boolean
  coverLetterGeneratorEnabled   Boolean
  mockInterviewEnabled          Boolean
  referralsEnabled              Boolean
  affiliateProgramEnabled       Boolean
  alumniConnectEnabled          Boolean
  defaultAppointmentCost        Int
  featureRequestsEnabled        Boolean
  allowTenantCustomBranding     Boolean
  allowTenantEmailCustomization Boolean
  allowUserApiKey               Boolean?
  defaultProfileVisibility      String // 'public', 'alumni_only', 'private'
  maxResumeUploadsPerUser       Int
  defaultTheme                  String // 'light', 'dark'
  enablePublicProfilePages      Boolean
  sessionTimeoutMinutes         Int
  maxEventRegistrationsPerUser  Int?
  globalAnnouncement            String?
  pointsForAffiliateSignup      Int?
  walletEnabled                 Boolean?
}

enum InterviewQuestionCategory {
  Common
  Behavioral
  Technical
  Coding
  Role_Specific
  Analytical
  HR
  Situational
  Problem_Solving
}

enum InterviewQuestionDifficulty {
  Easy
  Medium
  Hard
}

model InterviewQuestion {
  id            String                      @id @default(cuid())
  category      InterviewQuestionCategory
  questionText  String
  isMCQ         Boolean?
  mcqOptions    Json?
  baseScore     Int?
  correctAnswer String?
  answerOrTip   String
  tags          String[]
  difficulty    InterviewQuestionDifficulty?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  createdBy     String
  creator       User                        @relation(fields: [createdBy], references: [id])
  approved      Boolean?
  createdAt     DateTime                    @default(now())
  bookmarkedBy  String[]
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  withUser        String
  reminderDate    String?
}
