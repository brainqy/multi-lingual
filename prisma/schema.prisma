// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Language {
  code String @id
  name String
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                           String    @id @default(cuid())
  tenant                       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                     String    @unique
  allowPublicSignup            Boolean   @default(true)
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  features                     Json?
  emailTemplates               Json?
}

model User {
  id                           String    @id @default(cuid())
  tenant                       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                     String
  name                         String
  email                        String    @unique
  password                     String?
  role                         String    @default("user") // e.g., 'user', 'manager', 'admin'
  status                       String    @default("active") // e.g., 'active', 'inactive', 'pending'
  sessionId                    String?
  
  // Personal Info
  dateOfBirth                  String?
  gender                       String?
  mobileNumber                 String?
  currentAddress               String?
  
  // Academic Info
  graduationYear               String?
  degreeProgram                String?
  department                   String?
  university                   String? // Added university
  
  // Professional Info
  currentJobTitle              String?
  currentOrganization          String? // Added current org
  industry                     String?
  workLocation                 String?
  linkedInProfile              String?
  yearsOfExperience            String?
  
  // Engagement
  areasOfSupport               String[]
  timeCommitment               String?
  preferredEngagementMode      String?
  otherComments                String?
  
  lookingForSupportType        String?
  helpNeededDescription        String?
  
  // Consent
  shareProfileConsent          Boolean?
  featureInSpotlightConsent    Boolean?

  // Profile Extras
  profilePictureUrl            String?
  resumeText                   String?
  careerInterests              String?
  bio                          String?
  shortBio                     String? // Added short bio
  interests                    String[]
  userApiKey                   String?

  // Gamification
  isDistinguished              Boolean?  @default(false)
  xpPoints                     Int?      @default(0)
  dailyStreak                  Int?      @default(0)
  longestStreak                Int?      @default(0)
  totalActiveDays              Int?      @default(0)
  lastLogin                    DateTime? @default(now())
  weeklyActivity               Int[]
  earnedBadges                 String[]
  streakFreezes                Int?      @default(0)
  referralCode                 String?   @unique
  interviewCredits             Int?      @default(5)
  challengeTopics              String[]
  challengeProgress            Json?
  completedChallengeIds        String[]
  completedFlipTaskIds         String[]
  currentFlipChallenge         Json?
  flipChallengeAssignedAt      DateTime?
  flipChallengeProgressStart   Json?

  // Notification Preferences
  emailNotificationsEnabled    Boolean? @default(true)
  appNotificationsEnabled      Boolean? @default(true)
  gamificationNotificationsEnabled Boolean? @default(true)
  referralNotificationsEnabled Boolean? @default(true)

  // System Timestamps
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  // Dashboard Customization
  dashboardWidgets             Json?

  // Relations
  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  notifications           Notification[]
  activities              Activity[]
  appointmentsAsRequester Appointment[]            @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[]            @relation("AlumniAppointments")
  wallet                  Wallet?
  referralHistory         ReferralHistory[]        @relation("Referrer")
  referredBy              ReferralHistory?         @relation("ReferredUser", fields: [referredById], references: [id])
  referredById            String?                  @unique
  affiliateProfile        Affiliate?
  affiliateSignups        AffiliateSignup[]
  promoCodeRedemptions    UserPromoCodeRedemption[]
  mockInterviewSessions   MockInterviewSession[]
<<<<<<< HEAD
  
  nominationsMade         Nomination[] @relation("Nominator")
  nominationsReceived     Nomination[] @relation("Nominee")
  votesCast               Vote[] @relation("Voter")
  awardsWon               Award[] @relation("Winner")
=======
  nominationsMade         Nomination[]              @relation("NominatorRelation")
  nominationsReceived     Nomination[]              @relation("NomineeRelation")
  votesCast               Vote[]                    @relation("VoterRelation")
  awardsWon               Award[]                   @relation("WinnerRelation")

  // Notification Preferences
  emailNotificationsEnabled    Boolean? @default(true)
  appNotificationsEnabled      Boolean? @default(true)
  gamificationNotificationsEnabled Boolean? @default(true)
  referralNotificationsEnabled Boolean? @default(true)
>>>>>>> 7ccd4a3a01b7ed9aa71d41f9f2ba164c4165b2f0
}

model JobOpening {
  id                 String   @id @default(cuid())
  tenantId           String
  title              String
  company            String
  location           String
  description        String
  datePosted         DateTime @default(now())
  type               String
  postedByAlumniId   String
  alumniName         String
  applicationLink    String?
}

model JobApplication {
  id                 String   @id @default(cuid())
  tenantId           String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       String?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id                 String         @id @default(cuid())
  jobApplication     JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId   String
  date               DateTime
  type               String
  interviewer        String
  interviewerEmail   String?
  interviewerMobile  String?
  notes              String[]
}

model ResumeProfile {
  id           String    @id @default(cuid())
  tenantId     String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  name         String
  resumeText   String
  lastAnalyzed String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  resumeTextSnapshot  String
  jobDescriptionText  String
  scanDate            DateTime @default(now())
  matchScore          Int?
  bookmarked          Boolean? @default(false)
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  userName          String
  userAvatar        String?
  timestamp         DateTime           @default(now())
  content           String?
  type              String
  tags              String[]
  imageUrl          String?
  pollOptions       Json?
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  assignedTo        String?
  status            String?
  moderationStatus  String
  flagCount         Int
  flagReasons       String[]
  votedBy           String[]
  registeredBy      String[]
  likedBy           String[]
  likes             Int?               @default(0)
  flaggedBy         String[]
  isPinned          Boolean?           @default(false)
  comments          CommunityComment[]
}

model CommunityComment {
  id         String         @id @default(cuid())
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  userName   String
  userAvatar String?
  timestamp  DateTime       @default(now())
  comment    String
  parentId   String?
  parent     CommunityComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    CommunityComment[] @relation("Replies")
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?
  blogPost   BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?
}

model BlogPost {
  id           String            @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  title        String
  slug         String            @unique
  author       String
  date         DateTime
  imageUrl     String
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model FeatureRequest {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String?
  timestamp    DateTime @default(now())
  title        String
  description  String
  status       String
  upvotes      Int?     @default(0)
}

model GalleryEvent {
  id              String    @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  isPlatformGlobal Boolean? @default(false)
  location        String?
  approved        Boolean?  @default(true)
  createdByUserId String
  attendeeUserIds String[]
  deletedAt       DateTime?
}

model Appointment {
  id                String    @id @default(cuid())
  tenantId          String
  requesterUser     User      @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  requesterUserId   String
  alumniUser        User      @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  alumniUserId      String
  title             String
  dateTime          DateTime
  status            String
  meetingLink       String?
  location          String?
  notes             String?
  costInCoins       Int?
  withUser          String
  reminderDate      String?
  isAssignedByAdmin Boolean?  @default(false)
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  timestamp DateTime @default(now())
  description String
}

model DailyChallenge {
  id           String   @id @default(cuid())
  type         String // 'standard', 'flip'
  date         String?
  title        String
  description  String
  difficulty   String?
  category     String?
  solution     String?
  xpReward     Int?
  tasks        Json?
  createdAt    DateTime @default(now())
}

model Wallet {
  id           String              @id @default(cuid())
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String              @unique
  coins        Int                 @default(0)
  flashCoins   Json?
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id          String   @id @default(cuid())
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId    String
  date        DateTime @default(now())
  description String
  amount      Int
  type        String // 'credit', 'debit'
  currency    String // 'coins', 'xp'
}

model ReferralHistory {
  id                   String   @id @default(cuid())
  referrerUser         User     @relation("Referrer", fields: [referrerUserId], references: [id], onDelete: Cascade)
  referrerUserId       String
  referredUser         User?    @relation("ReferredUser")
  referredUserId       String?  @unique
  referredEmailOrName  String
  referralDate         DateTime @default(now())
  status               String // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount         Int?
}

model Badge {
  id                 String  @id @default(cuid())
  name               String  @unique
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  steps       Json
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]
  tenantId    String?
}

model SurveyResponse {
  id           String   @id @default(cuid())
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId     String
  userId       String
  responseDate DateTime @default(now())
  data         Json
}

model Affiliate {
  id             String            @id @default(cuid())
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String            @unique
  name           String
  email          String
  status         String // 'pending', 'approved', 'rejected'
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float?            @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  affiliateId       String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  affiliateId        String
  newUser            User      @relation(fields: [newUserId], references: [id], onDelete: Cascade)
  newUserId          String    @unique
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
}

model ResumeTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String
  previewImageUrl String
  category        String
  dataAiHint      String?
  content         String
  headerColor     String?
  bodyColor       String?
  headerFontSize  String?
  textAlign       String?
  layout          String?
  deletedAt       DateTime?
}

model MockInterviewSession {
  id                  String     @id @default(cuid())
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  topic               String
  description         String?
  jobDescription      String?
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Float?
  status              String
  createdAt           DateTime   @default(now())
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
}

model InterviewQuestion {
  id             String    @id @default(cuid())
  category       String
  questionText   String
  isMCQ          Boolean?  @default(false)
  mcqOptions     Json?
  baseScore      Int?
  correctAnswer  String?
  answerOrTip    String
  tags           String[]
  difficulty     String?
  rating         Float?
  ratingsCount   Int?
  userRatings    Json?
  userComments   Json?
  createdBy      String? // Can be 'system' or a user ID
  approved       Boolean?  @default(true)
  createdAt      DateTime  @default(now())
  bookmarkedBy   String[]
}

model PlatformSettings {
  id                              String  @id @default(cuid())
  platformName                    String
  maintenanceMode                 Boolean @default(false)
  communityFeedEnabled            Boolean @default(true)
  autoModeratePosts               Boolean @default(true)
  jobBoardEnabled                 Boolean @default(true)
  maxJobPostingDays               Int     @default(30)
  gamificationEnabled             Boolean @default(true)
  xpForLogin                      Int     @default(10)
  xpForNewPost                    Int     @default(20)
  resumeAnalyzerEnabled           Boolean @default(true)
  aiResumeWriterEnabled           Boolean @default(true)
  coverLetterGeneratorEnabled     Boolean @default(true)
  mockInterviewEnabled            Boolean @default(true)
  aiMockInterviewCost             Int     @default(25)
  referralsEnabled                Boolean @default(true)
  affiliateProgramEnabled         Boolean @default(true)
  alumniConnectEnabled            Boolean @default(true)
  defaultAppointmentCost          Int     @default(10)
  featureRequestsEnabled          Boolean @default(true)
  allowTenantCustomBranding       Boolean @default(true)
  allowTenantEmailCustomization   Boolean @default(false)
  allowUserApiKey                 Boolean? @default(true)
  defaultProfileVisibility        String  @default("alumni_only")
  maxResumeUploadsPerUser         Int     @default(5)
  defaultTheme                    String  @default("light")
  enablePublicProfilePages        Boolean @default(false)
  sessionTimeoutMinutes           Int     @default(60)
  maxEventRegistrationsPerUser    Int?
  globalAnnouncement              String?
  pointsForAffiliateSignup        Int?
  walletEnabled                   Boolean? @default(true)
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  tenantId       String?
  deletedAt      DateTime?
}

model PromotionalContent {
  id            String   @id @default(cuid())
  isActive      Boolean
  title         String
  description   String
  imageUrl      String
  imageAlt      String
  imageHint     String?
  buttonText    String
  buttonLink    String
  gradientFrom  String?
  gradientTo    String?
  gradientVia   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PromoCode {
  id          String                    @id @default(cuid())
  tenantId    String?                   // 'platform' for global codes
  code        String                    @unique
  description String
  rewardType  String                    // 'coins', 'xp', 'premium_days', etc.
  rewardValue Int
  expiresAt   DateTime?
  usageLimit  Int                       @default(0) // 0 for unlimited
  timesUsed   Int                       @default(0)
  isActive    Boolean                   @default(true)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  deletedAt   DateTime?
  redemptions UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  promoCodeId String
  redeemedAt  DateTime  @default(now())

  @@id([userId, promoCodeId])
}

model ProductCompany {
  id            String   @id @default(cuid())
  name          String   @unique
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AwardCategory {
  id String @id @default(cuid())
  name String @unique
  description String?
  awards Award[]
}

model Award {
  id String @id @default(cuid())
  title String
  description String
  categoryId String
  category AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate DateTime
  votingStartDate DateTime
  votingEndDate DateTime
  status String // Draft, Nominating, Voting, Completed
  winnerId String? @unique
  winner User? @relation("Winner", fields: [winnerId], references: [id])
  nominations Nomination[]
}

model Nomination {
  id String @id @default(cuid())
  awardId String
  award Award @relation(fields: [awardId], references: [id])
  nomineeId String
  nominee User @relation("Nominee", fields: [nomineeId], references: [id])
  nominatorId String
  nominator User @relation("Nominator", fields: [nominatorId], references: [id])
  justification String
  createdAt DateTime @default(now())
  votes Vote[]
}

model Vote {
  id String @id @default(cuid())
  nominationId String
  nomination Nomination @relation(fields: [nominationId], references: [id])
  voterId String
  voter User @relation("Voter", fields: [voterId], references: [id])
  createdAt DateTime @default(now())
}
```