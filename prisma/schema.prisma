// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String?
  role              String
  status            String?
  lastLogin         DateTime? @updatedAt
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  sessionId         String?   @unique

  // Optional Profile Fields
  profilePictureUrl           String?
  bio                         String?
  shortBio                    String?
  university                  String?
  currentJobTitle             String?
  company                     String?
  skills                      String[]
  xpPoints                    Int?     @default(0)
  dailyStreak                 Int?     @default(0)
  longestStreak               Int?     @default(0)
  totalActiveDays             Int?     @default(0)
  weeklyActivity              Json?
  earnedBadges                String[]
  interviewCredits            Int?     @default(5)
  isDistinguished             Boolean? @default(false)
  referralCode                String?  @unique

  dateOfBirth                 String?
  gender                      String?
  mobileNumber                String?
  currentAddress              String?
  graduationYear              String?
  degreeProgram               String?
  department                  String?
  currentOrganization         String?
  industry                    String?
  workLocation                String?
  linkedInProfile             String?
  yearsOfExperience           String?
  careerInterests             String?
  resumeText                  String?
  userApiKey                  String?
  shareProfileConsent         Boolean?
  featureInSpotlightConsent   Boolean?
  areasOfSupport              String[]
  timeCommitment              String?
  preferredEngagementMode     String?
  otherComments               String?
  lookingForSupportType       String?
  helpNeededDescription       String?
  interests                   String[]
  offersHelpWith              String[]
  challengeTopics             String[]
  challengeProgress           Json?

  // Relations
  tenantId                  String
  tenant                    Tenant   @relation(fields: [tenantId], references: [id])

  wallet                    Wallet?
  referredByAffiliateSignupId String? @unique
  referredBySignup          AffiliateSignup? @relation("NewUserSignup", fields: [referredByAffiliateSignupId], references: [id])
  affiliateProfile          Affiliate?
  
  referralHistory           ReferralHistoryItem[]   @relation("ReferringUserHistory")

  appointmentsAsRequester   Appointment[]           @relation("Requester")
  appointmentsAsAlumni      Appointment[]           @relation("Alumni")

  jobApplications           JobApplication[]
  resumeProfiles            ResumeProfile[]
  resumeScanHistory         ResumeScanHistoryItem[]
  
  featureRequests           FeatureRequest[]
  communityPosts            CommunityPost[]
  comments                  CommunityComment[]
  createdAnnouncements      Announcement[]
  activities                Activity[]
  createdInterviewQuestions InterviewQuestion[]
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  domain    String?   @unique
  createdAt DateTime  @default(now())
  users     User[]
  settings  TenantSettings[]
}

model TenantSettings {
  id                 String    @id @default(cuid())
  tenantId           String    @unique
  tenant             Tenant    @relation(fields: [tenantId], references: [id])
  allowPublicSignup  Boolean   @default(true)
  customLogoUrl      String?
  primaryColor       String?
  accentColor        String?
  features           Json?
}

model Language {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  translations Translation[]
}

model Translation {
  id           String   @id @default(cuid())
  languageId   String
  language     Language @relation(fields: [languageId], references: [id])
  key          String
  value        String
  createdAt    DateTime @default(now())

  @@unique([languageId, key])
}

model JobApplication {
  id                 String      @id @default(cuid())
  tenantId           String
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  companyName        String
  jobTitle           String
  status             String
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?
  location           String?
  salary             String?
  reminderDate       DateTime?
  sourceJobOpeningId String?
  applicationUrl     String?
  resumeIdUsed       String?
  coverLetterText    String?
  interviews         Interview[]
}

model Interview {
  id               String   @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
  date             DateTime
  type             String
  interviewer      String
  interviewerMobile String?
  interviewerEmail  String?
  notes            String[]
}

model JobOpening {
  id                String   @id @default(cuid())
  tenantId          String
  title             String
  company           String
  location          String
  description       String
  datePosted        DateTime @default(now())
  type              String
  postedByAlumniId  String
  alumniName        String
  applicationLink   String?
}

model ResumeProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  resumeText   String
  lastAnalyzed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requester       User     @relation("Requester", fields: [requesterUserId], references: [id])
  alumniUserId    String
  alumni          User     @relation("Alumni", fields: [alumniUserId], references: [id])
  title           String
  dateTime        DateTime
  status          String
  meetingLink     String?
  location        String?
  notes           String?
  costInCoins     Int?
  reminderDate    DateTime?
}

model CommunityPost {
  id               String             @id @default(cuid())
  tenantId         String
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  userName         String
  userAvatar       String?
  timestamp        DateTime           @default(now())
  content          String?
  type             String
  tags             String[]
  imageUrl         String?
  pollOptions      Json?
  eventTitle       String?
  eventDate        String?
  eventLocation    String?
  attendees        Int?
  capacity         Int?
  assignedTo       String?
  status           String?
  moderationStatus String
  flagCount        Int                @default(0)
  comments         CommunityComment[]
  bookmarkedBy     String[]
}

model CommunityComment {
  id        String   @id @default(cuid())
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  userName  String
  userAvatar String?
  timestamp DateTime @default(now())
  comment   String
  parentId  String?
}

model FeatureRequest {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userName    String
  userAvatar  String?
  timestamp   DateTime @default(now())
  title       String
  description String
  status      String
  upvotes     Int      @default(0)
}

model Wallet {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  coins        Int
  flashCoins   Json?
  transactions Json
  updatedAt    DateTime @updatedAt
}

enum ReferralStatus {
  Pending
  SignedUp
  RewardEarned
  Expired
}

model ReferralHistoryItem {
  id               String         @id @default(cuid())
  referrerUserId   String
  referrerUser     User           @relation("ReferringUserHistory", fields: [referrerUserId], references: [id])
  referredEmailOrName String
  referralDate     DateTime       @default(now())
  status           ReferralStatus
  rewardAmount     Int?
}

model Affiliate {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  name           String
  email          String
  status         String
  affiliateCode  String            @unique
  commissionRate Float
  totalEarned    Float             @default(0)
  createdAt      DateTime          @default(now())
  clicks         AffiliateClick[]
  signups        AffiliateSignup[]
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])
  timestamp         DateTime  @default(now())
  ipAddress         String?
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id                 String    @id @default(cuid())
  affiliateId        String
  newUserId          String    @unique
  newUser            User      @relation("NewUserSignup", fields: [newUserId], references: [id])
  signupDate         DateTime  @default(now())
  commissionEarned   Float?
  affiliate          Affiliate @relation(fields: [affiliateId], references: [id])
}

model ProductCompany {
  id            String  @id @default(cuid())
  name          String
  location      String
  websiteUrl    String
  domain        String
  hrName        String?
  hrEmail       String?
  contactNumber String?
  logoUrl       String?
}

model DailyChallenge {
  id          String @id @default(cuid())
  type        String
  date        String?
  title       String
  description String
  difficulty  String?
  category    String?
  solution    String?
  xpReward    Int?
  tasks       Json?
}

model Survey {
  id        String   @id @default(cuid())
  name      String   @unique
  title     String
  description String?
  questions Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String?
  responseDate DateTime @default(now())
  data         Json
}

model PromotionalContent {
  id           String   @id @default(cuid())
  isActive     Boolean  @default(true)
  title        String
  description  String
  imageUrl     String
  imageAlt     String
  imageHint    String?
  buttonText   String
  buttonLink   String
  gradientFrom String?
  gradientVia  String?
  gradientTo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  rewardType  String
  rewardValue Float
  expiresAt   DateTime?
  usageLimit  Int      @default(0)
  timesUsed   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  linkText  String?
  isRead    Boolean  @default(false)
}

model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  startDate      DateTime
  endDate        DateTime?
  audience       String
  audienceTarget String?
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [createdById], references: [id])
  createdById    String
  tenantId       String?
}

model Badge {
  id               String @id @default(cuid())
  name             String @unique
  description      String
  icon             String
  xpReward         Int?
  triggerCondition String?
}

model GamificationRule {
  actionId  String @id @unique
  description String
  xpPoints    Int
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  userName     String
  userAvatar   String
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String?
  dataAiHint   String?
  content      String
  excerpt      String
  tags         String[]
  comments     Json     // Storing comments as JSON for simplicity in this model
  bookmarkedBy String[]
}

model MockInterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  topic              String
  description        String?
  jobDescription     String?
  questions          Json
  answers            Json
  overallFeedback    Json?
  overallScore       Float?
  status             String
  createdAt          DateTime @default(now())
  timerPerQuestion   Int?
  difficulty         String?
  questionCategories String[]
  recordingReferences Json?
}

model InterviewQuestion {
  id              String   @id @default(cuid())
  category        String
  questionText    String
  isMCQ           Boolean  @default(false)
  mcqOptions      Json?
  baseScore       Int?
  correctAnswer   String?
  answerOrTip     String
  tags            String[]
  difficulty      String?
  rating          Float?
  ratingsCount    Int?
  userRatings     Json?
  userComments    Json?
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     String
  approved        Boolean  @default(false)
  createdAt       DateTime @default(now())
  bookmarkedBy    String[]
}

model Activity {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now())
  description String
}

model ResumeScanHistoryItem {
  id                   String   @id @default(cuid())
  tenantId             String
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  resumeId             String
  resumeName           String
  jobTitle             String
  companyName          String
  resumeTextSnapshot   String
  jobDescriptionText   String
  scanDate             DateTime @default(now())
  matchScore           Float?
  bookmarked           Boolean? @default(false)
}
