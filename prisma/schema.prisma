// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String    @id @default(cuid())
  name                             String
  email                            String    @unique
  password                         String?
  role                             UserRole  @default(USER)
  profilePictureUrl                String?
  tenantId                         String
  tenant                           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionId                        String?
  lastLogin                        DateTime?
  createdAt                        DateTime  @default(now())
  status                           UserStatus? @default(active)
  dailyStreak                      Int?
  longestStreak                    Int?
  lastStreakCheck                  DateTime?
  xpPoints                         Int?
  earnedBadges                     String[]
  challengeTopics                  Json? // Store array of InterviewQuestionCategory
  challengeProgress                Json? // Record<string, { current: number; target: number }>
  completedChallengeIds            String[]
  currentFlipChallenge             Json? // Store DailyChallenge object
  flipChallengeAssignedAt          DateTime?
  flipChallengeProgressStart       Json? // Store Record<string, number>
  dateOfBirth                      String?
  gender                           String? // Consider enum: Male, Female, Other
  mobileNumber                     String?
  currentAddress                   String?
  graduationYear                   String?
  degreeProgram                    String?
  department                       String?
  currentJobTitle                  String?
  currentOrganization              String?
  industry                         String?
  workLocation                     String?
  linkedInProfile                  String?
  yearsOfExperience                String?
  skills                           String[]
  areasOfSupport                   String[]
  timeCommitment                   String?
  preferredEngagementMode          String?
  otherComments                    String?
  lookingForSupportType            String?
  helpNeededDescription            String?
  shareProfileConsent              Boolean?
  featureInSpotlightConsent        Boolean?
  resumeText                       String?   @db.Text
  careerInterests                  String?
  bio                              String?   @db.Text
  userApiKey                       String?
  interests                        String[]
  isDistinguished                  Boolean?
  appointmentCoinCost              Int?
  referralCode                     String?   @unique
  streakFreezes                    Int?
  emailNotificationsEnabled        Boolean?
  appNotificationsEnabled          Boolean?
  gamificationNotificationsEnabled Boolean?
  referralNotificationsEnabled     Boolean?
  dashboardWidgets                 Json?     // { user?: string[], manager?: any[], admin?: any[] }
  university                       String?

  jobApplications         JobApplication[]
  resumeProfiles          ResumeProfile[]
  resumeScanHistories     ResumeScanHistory[]
  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  notifications           Notification[]
  appointmentsAsRequester Appointment[]         @relation("RequesterAppointments")
  appointmentsAsAlumni    Appointment[]         @relation("AlumniAppointments")
  activities              Activity[]
  wallet                  Wallet?
  promoCodeRedemptions    UserPromoCodeRedemption[]
  referralHistory         ReferralHistory[]
  affiliateProfile        Affiliate?
  featureRequests         FeatureRequest[]
  galleryEventsCreated    GalleryEvent[]
  nominationsMade         Nomination[]        @relation("Nominator")
  nominationsReceived     Nomination[]        @relation("Nominee")
  votesCast               Vote[]
  awardWon                Award?

  @@index([tenantId])
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  PENDING_DELETION
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  users     User[]
  settings  TenantSettings?
}

model TenantSettings {
  id                           String   @id @default(cuid())
  tenant                       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                     String   @unique
  allowPublicSignup            Boolean  @default(true)
  customLogoUrl                String?
  primaryColor                 String?
  accentColor                  String?
  features                     Json?
}

model Language {
  code String @id
  name String
}

model Translation {
  id            String   @id @default(cuid())
  originalText  String
  languageCode  String
  language      Language @relation(fields: [languageCode], references: [code])
  translatedText String
  qualityScore  Float?
  createdAt     DateTime @default(now())
}

model PromotionalContent {
  id               String   @id @default(cuid())
  isActive         Boolean  @default(true)
  title            String
  description      String
  imageUrl         String
  imageAlt         String
  imageHint        String?
  buttonText       String
  buttonLink       String
  gradientFrom     String?
  gradientVia      String?
  gradientTo       String?
  targetTenantId   String?
  targetRole       UserRole?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CommunityPost {
  id                String             @id @default(cuid())
  tenantId          String
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName          String
  userAvatar        String?
  content           String?            @db.Text
  type              String             // 'text', 'poll', 'event', 'request'
  imageUrl          String?
  tags              String[]
  moderationStatus  String             // 'visible', 'flagged', 'removed'
  flagCount         Int?
  flagReasons       String[]
  flaggedBy         String[]
  likes             Int?
  likedBy           String[]
  isPinned          Boolean?
  timestamp         DateTime           @default(now())
  comments          CommunityComment[]
  pollOptions       Json?              // { option: string, votes: number }[]
  votedBy           String[]
  eventTitle        String?
  eventDate         DateTime?
  eventLocation     String?
  attendees         Int?
  capacity          Int?
  registeredBy      String[]
  assignedTo        String?
  status            String?            // 'open', 'in progress', 'completed'
}

model CommunityComment {
  id          String         @id @default(cuid())
  postId      String?
  post        CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost?      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName    String
  userAvatar  String?
  comment     String         @db.Text
  timestamp   DateTime       @default(now())
  parentId    String?
  parent      CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     CommunityComment[] @relation("CommentReplies")
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String   // 'info', 'warning', 'error', 'success'
  title     String
  message   String
  timestamp DateTime @default(now())
  linkTo    String?
  isRead    Boolean  @default(false)
}

model DailyChallenge {
  id              String   @id @default(cuid())
  title           String
  description     String
  category        String
  difficulty      String   // 'Easy', 'Medium', 'Hard'
  xpReward        Int?
  type            String   // 'standard', 'flip'
  solution        String?  @db.Text
  tasks           Json?
  createdAt       DateTime @default(now())
}

model Badge {
  id                 String  @id @default(cuid())
  name               String
  description        String
  icon               String
  xpReward           Int?
  triggerCondition   String?
  streakFreezeReward Int?
}

model GamificationRule {
  actionId    String @id
  description String
  xpPoints    Int
}

model ResumeProfile {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId     String
  name         String
  resumeText   String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  lastAnalyzed DateTime?
  deletedAt    DateTime?
}

model ResumeScanHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId            String
  resumeName          String
  jobTitle            String
  companyName         String
  scanDate            DateTime @default(now())
  matchScore          Int?
  resumeTextSnapshot  String   @db.Text
  jobDescriptionText  String   @db.Text
  bookmarked          Boolean?
}

model JobApplication {
  id                 String      @id @default(cuid())
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId           String
  companyName        String
  jobTitle           String
  status             String      // e.g., 'Saved', 'Applied', 'Interviewing', 'Offer', 'Rejected'
  dateApplied        DateTime
  notes              String[]
  jobDescription     String?     @db.Text
  location           String?
  applicationUrl     String?
  salary             String?
  resumeIdUsed       String?
  coverLetterText    String?     @db.Text
  reminderDate       DateTime?
  sourceJobOpeningId String?
  interviews         Interview[]
}

model Interview {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  date             DateTime
  type             String
  interviewer      String
  notes            String?        @db.Text
}

model JobOpening {
  id               String   @id @default(cuid())
  tenantId         String
  title            String
  company          String
  location         String
  description      String   @db.Text
  datePosted       DateTime @default(now())
  type             String   // 'Full-time', 'Part-time', etc.
  applicationLink  String?
  postedByAlumniId String?
  alumniName       String?
}

model Appointment {
  id              String   @id @default(cuid())
  tenantId        String
  requesterUserId String
  requesterUser   User     @relation("RequesterAppointments", fields: [requesterUserId], references: [id], onDelete: Cascade)
  alumniUserId    String
  alumniUser      User     @relation("AlumniAppointments", fields: [alumniUserId], references: [id], onDelete: Cascade)
  title           String
  dateTime        DateTime
  status          String   // 'Pending', 'Confirmed', 'Cancelled', 'Completed'
  notes           String?
  withUser        String
  costInCoins     Int
  reminderDate    DateTime?
  isAssignedByAdmin Boolean?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // 'system', 'mention', 'event'
  content   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                               String  @id @default(cuid())
  platformName                     String
  maintenanceMode                  Boolean
  communityFeedEnabled             Boolean
  autoModeratePosts                Boolean
  jobBoardEnabled                  Boolean
  maxJobPostingDays                Int
  gamificationEnabled              Boolean
  xpForLogin                       Int
  xpForNewPost                     Int
  resumeAnalyzerEnabled            Boolean
  aiResumeWriterEnabled            Boolean
  coverLetterGeneratorEnabled      Boolean
  mockInterviewEnabled             Boolean
  aiMockInterviewCost              Int
  referralsEnabled                 Boolean
  affiliateProgramEnabled          Boolean
  alumniConnectEnabled             Boolean
  defaultAppointmentCost           Int
  featureRequestsEnabled           Boolean
  allowTenantCustomBranding        Boolean
  allowTenantEmailCustomization    Boolean
  allowUserApiKey                  Boolean
  defaultProfileVisibility         String
  maxResumeUploadsPerUser          Int
  defaultTheme                     String
  enablePublicProfilePages         Boolean
  sessionTimeoutMinutes            Int
  maxEventRegistrationsPerUser     Int?
  globalAnnouncement               String? @db.Text
  pointsForAffiliateSignup         Int?
  walletEnabled                    Boolean @default(true)
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins        Int
  flashCoins   Json?
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  type        String   // 'credit' or 'debit'
  currency    String   // 'coins' or 'xp'
  date        DateTime @default(now())
}

model PromoCode {
  id                   String                    @id @default(cuid())
  tenantId             String
  code                 String                    @unique
  description          String
  rewardType           String
  rewardValue          Int
  expiresAt            DateTime?
  usageLimit           Int
  timesUsed            Int                       @default(0)
  isActive             Boolean
  createdAt            DateTime                  @default(now())
  deletedAt            DateTime?
  redeemedBy           UserPromoCodeRedemption[]
}

model UserPromoCodeRedemption {
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodeId String
  promoCode   PromoCode  @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  redeemedAt  DateTime   @default(now())

  @@id([userId, promoCodeId])
}

model ReferralHistory {
  id                 String   @id @default(cuid())
  referrerUserId     String
  referrerUser       User     @relation(fields: [referrerUserId], references: [id], onDelete: Cascade)
  referredEmailOrName String
  status             String   // 'Pending', 'Signed Up', 'Reward Earned', 'Expired'
  rewardAmount       Int?
  referralDate       DateTime
  tenantId           String?
}

model Affiliate {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  email            String
  status           String            // 'pending', 'approved', 'rejected', 'suspended'
  affiliateCode    String            @unique
  commissionRate   Float
  totalEarned      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clicks           AffiliateClick[]
  signups          AffiliateSignup[]
  commissionTierId String
  commissionTier   CommissionTier    @relation(fields: [commissionTierId], references: [id])
}

model AffiliateClick {
  id                String    @id @default(cuid())
  affiliateId       String
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  timestamp         DateTime  @default(now())
  convertedToSignup Boolean   @default(false)
}

model AffiliateSignup {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  newUserId        String
  signupDate       DateTime  @default(now())
  commissionEarned Float?
}

model CommissionTier {
  id                   String      @id @default(cuid())
  name                 String
  milestoneRequirement Int
  commissionRate       Float
  affiliates           Affiliate[]
}

model AwardCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  awards      Award[]
}

model Award {
  id                  String       @id @default(cuid())
  title               String
  description         String
  categoryId          String
  category            AwardCategory @relation(fields: [categoryId], references: [id])
  nominationStartDate DateTime
  nominationEndDate   DateTime
  votingStartDate     DateTime
  votingEndDate       DateTime
  status              String       // 'Draft', 'Nominating', 'Voting', 'Completed'
  winnerId            String?      @unique
  winner              User?        @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  nominations         Nomination[]
}

model Nomination {
  id            String   @id @default(cuid())
  awardId       String
  award         Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  nomineeId     String
  nominee       User     @relation("Nominee", fields: [nomineeId], references: [id], onDelete: Cascade)
  nominatorId   String
  nominator     User     @relation("Nominator", fields: [nominatorId], references: [id], onDelete: Cascade)
  justification String
  createdAt     DateTime @default(now())
  votes         Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  nominationId String
  nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  voterId      String
  voter        User       @relation(fields: [voterId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([nominationId, voterId])
}

model Survey {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  tenantId    String
  createdAt   DateTime @default(now())
  steps       Json
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String
  userName     String
  surveyId     String
  surveyName   String
  responseDate DateTime @default(now())
  data         Json
  tenantId     String
}

model InterviewQuestion {
  id            String   @id @default(cuid())
  questionText  String
  category      String
  difficulty    String?
  isMCQ         Boolean?
  mcqOptions    Json?
  correctAnswer String?
  answerOrTip   String   @db.Text
  tags          String[]
  approved      Boolean?
  createdBy     String?
  createdAt     String?
  rating        Float?
  ratingsCount  Int?
  userRatings   Json?
  userComments  Json?
  bookmarkedBy  String[]
  baseScore     Int?
}

model MockInterviewSession {
  id                  String   @id @default(cuid())
  userId              String
  tenantId            String?
  topic               String
  description         String?
  jobDescription      String?  @db.Text
  status              String   // 'pending', 'in-progress', 'completed', 'cancelled'
  createdAt           DateTime @default(now())
  questions           Json?
  answers             Json?
  overallFeedback     Json?
  overallScore        Int?
  timerPerQuestion    Int?
  difficulty          String?
  questionCategories  String[]
  recordingReferences Json?
  interviewerScores   Json?
  finalScore          Json?
}

model GalleryEvent {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  date            DateTime
  imageUrls       String[]
  description     String?
  dataAiHint      String?
  createdByUserId String
  createdBy       User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  attendeeUserIds String[]
  approved        Boolean?
  isPlatformGlobal Boolean?
  deletedAt       DateTime?
}

model BlogPost {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName     String
  userAvatar   String?
  title        String
  slug         String   @unique
  author       String
  date         DateTime
  imageUrl     String
  content      String   @db.Text
  excerpt      String
  tags         String[]
  comments     CommunityComment[]
  bookmarkedBy String[]
}

model BlogGenerationSettings {
  id                      String   @id @default(cuid())
  generationIntervalHours Int
  topics                  String[]
  style                   String?
  lastGenerated           DateTime?
}

model ResumeTemplate {
    id              String    @id @default(cuid())
    name            String
    description     String
    previewImageUrl String
    category        String
    dataAiHint      String?
    content         String    @db.Text
    headerColor     String?
    bodyColor       String?
    headerFontSize  String?
    textAlign       String?
    deletedAt       DateTime?
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId    String?
  description String
  timestamp   DateTime @default(now())
}
```